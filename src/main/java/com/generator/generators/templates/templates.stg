/* uuid : bec0c053-c73b-4164-880a-0895941a52ac */
delimiters "~", "~"

/** name,STRINGPROPERTY; **/
BooleanTemplateParameter(name) ::= <<BooleanTemplateParameter

name: 
	~name~ 
>>

/** kvNames,LISTPROPERTY;name,STRINGPROPERTY; **/
KeyValueListTemplateParameter(kvNames,name) ::= <<KeyValueListTemplateParameter

name:
	~name~

keys:
	~kvNames:{it|~it~}~ 
>>

/** elements,KEYVALUELISTPROPERTY,type;name,STRINGPROPERTY; **/
ListTemplateParameter(elements,name) ::= <<ListTemplateParameter

name: 
	~name~

elements:
	~elements:{it|~it.type~};separator="\n"~ 
>>

/** parameters,KEYVALUELISTPROPERTY,templateParameter,value;templateStatement,STRINGPROPERTY; **/
Statement(parameters,templateStatement) ::= <<Statement

TemplateStatement: 
	~templateStatement~

Parameter values:
	~parameters:{it|~it.templateParameter~ ~it.value~}~ 
>>

/** name,STRINGPROPERTY; **/
StatementTemplateParameter(name) ::= <<StatementTemplateParameter

name: 
	~name~ 
>>

/** name,STRINGPROPERTY;value,STRINGPROPERTY; **/
StringTemplateParameter(name,value) ::= <<StringTemplateParameter

name: 
	~name~

value: ~value~	// not in use atm 
>>

/** delimiter,STRINGPROPERTY;imports,LISTPROPERTY;name,STRINGPROPERTY;package,STRINGPROPERTY;templateStatements,LISTPROPERTY; **/
TemplateGroup(delimiter,imports,name,package,templateStatements) ::= <<Template Group

name:
	~name~

delimiter:
	~delimiter~

package:
	~package~

imports:
	~imports:{it|~it~};separator="\n"~

templateStatements:
	~templateStatements:{it|~it~};separator="\n"~ 
>>

/** name,STRINGPROPERTY;onBooleanTemplateParameter,KEYVALUELISTPROPERTY,declaration,statements;onKeyValueListTemplateParameter,KEYVALUELISTPROPERTY,declaration,statements;onListTemplateParameter,KEYVALUELISTPROPERTY,declaration,statements;onStatementTemplateParameter,KEYVALUELISTPROPERTY,declaration,statements;onStringTemplateParameter,KEYVALUELISTPROPERTY,declaration,statements;onTemplateGroup,KEYVALUELISTPROPERTY,declaration,statements;onTemplateGroupEnd,KEYVALUELISTPROPERTY,declaration,statements;onTemplateStatement,KEYVALUELISTPROPERTY,declaration,statements;onTemplateStatementEnd,KEYVALUELISTPROPERTY,declaration,statements;packageName,STRINGPROPERTY;returnProperty,STRINGPROPERTY;returnType,STRINGPROPERTY; **/
TemplateGroupVisitor(name,onBooleanTemplateParameter,onKeyValueListTemplateParameter,onListTemplateParameter,onStatementTemplateParameter,onStringTemplateParameter,onTemplateGroup,onTemplateGroupEnd,onTemplateStatement,onTemplateStatementEnd,packageName,returnProperty,returnType) ::= <<package ~packageName~;

import com.generator.generators.templateGroup.TemplateGroupGroup;

public class ~name~ extends TemplateVisitorNeo<~returnType~> {

	// todo this needs to be a neo-group (which gets its templates from a traversed visitor)
	private final TemplateGroupGroup group = new TemplateGroupGroup();

	// onTemplateGroup
	~onTemplateGroup:{it|~it.declaration~};separator="\n"~

	// onTemplateStatement
	~onTemplateStatement:{it|~it.declaration~};separator="\n"~

	// onTemplateStatement
	~onTemplateStatement:{it|~it.declaration~};separator="\n"~

	// onStringTemplateParameter
	~onStringTemplateParameter:{it|~it.declaration~};separator="\n"~

	// onBooleanTemplateParameter
	~onBooleanTemplateParameter:{it|~it.declaration~};separator="\n"~

	// onListTemplateParameter
	~onListTemplateParameter:{it|~it.declaration~};separator="\n"~

	// onKeyValueListTemplateParameter
	~onKeyValueListTemplateParameter:{it|~it.declaration~};separator="\n"~

	// onStatementTemplateParameter
	~onStatementTemplateParameter:{it|~it.declaration~};separator="\n"~

	// onTemplateStatementEnd
	~onTemplateStatementEnd:{it|~it.declaration~};separator="\n"~

	// onTemplateGroupEnd
	~onTemplateGroupEnd:{it|~it.declaration~};separator="\n"~

	@Override
	protected void onTemplateGroup(TemplatesNeo.TemplateGroupNode templateGroupNode) {

		~onTemplateGroup:{it|~it.statements~};separator="\n"~
	}

	@Override
	protected void onTemplateStatement(TemplatesNeo.TemplateStatementNode statementNode) {

		~onTemplateStatement:{it|~it.statements~};separator="\n"~
	}

	@Override
	protected void onStringTemplateParameter(TemplatesNeo.StringTemplateParameterNode stringTemplateParameterNode) {
		
		~onStringTemplateParameter:{it|~it.statements~};separator="\n"~
	}

	@Override
	protected void onBooleanTemplateParameter(TemplatesNeo.BooleanTemplateParameterNode booleanTemplateParameterNode) {

		~onBooleanTemplateParameter:{it|~it.statements~};separator="\n"~
	}

	@Override
	protected void onListTemplateParameter(TemplatesNeo.ListTemplateParameterNode listTemplateParameterNode) {

		~onListTemplateParameter:{it|~it.statements~};separator="\n"~
	}

	@Override
	protected void onKeyValueListTemplateParameter(TemplatesNeo.KeyValueListTemplateParameterNode keyValueListTemplateParameterNode) {

		~onKeyValueListTemplateParameter:{it|~it.statements~};separator="\n"~
	}

	@Override
	protected void onStatementTemplateParameter(TemplatesNeo.StatementTemplateParameterNode statementTemplateParameterNode) {

		~onStatementTemplateParameter:{it|~it.statements~};separator="\n"~
	}

	@Override
	protected void onTemplateStatementEnd(TemplatesNeo.TemplateStatementNode statementNode) {

		~onTemplateStatementEnd:{it|~it.statements~};separator="\n"~
	}

	@Override
	protected ~returnType~ onTemplateGroupEnd(TemplatesNeo.TemplateGroupNode templateGroupNode) {

		~onTemplateGroupEnd:{it|~it.statements~};separator="\n"~

		return ~returnProperty~;
	}
} 
>>

/** name,STRINGPROPERTY; **/
TemplateImport(name) ::= <<Template Import

name:
	~name~ 
	refers to another template (perhaps it should have an uuid-reference as well ?) 
>>

/** name,STRINGPROPERTY;templateParameters,LISTPROPERTY;text,STRINGPROPERTY; **/
TemplateStatement(name,templateParameters,text) ::= <<Template Statement

name: 
	"~name~" 

text:
~text~

parameters:
	~templateParameters:{it|~it~};separator="\n"~ 
>>
