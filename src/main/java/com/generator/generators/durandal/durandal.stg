/* durandal 561c7a8f-b965-458c-bec7-f6f7a2d4b09d*/
delimiters "~", "~"

eom() ::= <<}>>

gt() ::= <<> >>

appHTML(appStylesheetPath,splashTitle) ::= <<<!DOCTYPE html>
<html>
<head>

    <meta charset="utf-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge, chrome=1"/>
    <meta name="apple-mobile-web-app-capable" content="yes"/>
    <meta name="apple-mobile-web-app-status-bar-style" content="black"/>
    <meta name="format-detection" content="telephone=no"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>

    <!-- uncomment this to force a refresh on the favicon -->
    <!--<link rel="shortcut icon" href="https://localhost:8080/favicon.ico?v=2" />-->

    <link rel="apple-touch-startup-image" href="./lib/durandal/img/ios-startup-image-landscape.png" media="(orientation:landscape)"/>
    <link rel="apple-touch-startup-image" href="./lib/durandal/img/ios-startup-image-portrait.png" media="(orientation:portrait)"/>
    <link rel="apple-touch-icon" href="./lib/durandal/img/icon.png"/>

    <link rel="stylesheet" href="./lib/bootstrap/css/bootstrap.min.css"/>
    <link rel="stylesheet" href="./lib/font-awesome/css/font-awesome.min.css"/>
    <link rel="stylesheet" href="./lib/durandal/css/durandal.css"/>

    <link href="./lib/bootstrap/css/bootstrap-material-design.min.css" rel="stylesheet">
    <link href="./lib/bootstrap/css/ripples.min.css" rel="stylesheet">

    <link rel="stylesheet" href="./lib/css/ie10mobile.css"/>
    <link rel="stylesheet" href="./lib/durandal/css/starterkit.css"/>

    <!-- use this file to set all app-specific css-->
    ~if(appStylesheetPath)~<link rel="stylesheet" href="~appStylesheetPath~"/>~endif~

    <script type="text/javascript">
        if (navigator.userAgent.match(/IEMobile\/10\.0/)) {
            var msViewportStyle = document.createElement("style");
            var mq = "@@-ms-viewport{width:auto!important}";
            msViewportStyle.appendChild(document.createTextNode(mq));
            document.getElementsByTagName("head")[0].appendChild(msViewportStyle);
        }
    </script>
</head>
<body>
<div id="applicationHost">
    <div class="splash">
        <div class="message">~splashTitle~</div>
        <i class="fa fa-spinner fa-spin"></i>
    </div>
</div>
<script src="./lib/require/require.js" data-main="./main.js"></script>
</body>
</html> >>

bugfix2() ::= <<}>>

mainJS(appTitle,paths,plugins) ::= <<requirejs.config({
    paths: {
		'durandal': 'lib/durandal/js',
        'plugins': 'lib/durandal/js/plugins',
        'transitions': 'lib/durandal/js/transitions',
        'jquery': 'lib/jquery/jquery-1.9.1.min',
        'jquery-ui': 'lib/jquery-ui/jquery-ui.min',
        'knockout': 'lib/knockout/knockout-3.1.0',
        'knockoutMapping': 'lib/knockout/knockout.mapping-latest',
        'text': 'lib/require/text',
        'sockjs': 'lib/sockjs/sockjs.min',
        'eventbus': 'lib/vertx/vertxbus-3.1.0',
        'material': 'lib/bootstrap/js/material.min',
        'dropdown': 'lib/bootstrap/js/dropdown',
        'materialRipples': 'lib/bootstrap/js/ripples.min'~if(paths)~
			~paths:{it|'~it.name~': '~it.path~',};separator=",\n"~~endif~
    }
});

define(['durandal/system', 'durandal/app'], function (system, app) {

    system.debug(true);

    app.title = '~appTitle~';

    app.configurePlugins({
		 router: true,
       dialog: true,
       numberFormatter: true,
       flash: true~if(plugins)~
		~plugins:{it|~it.name~: true};separator=",\n"~~endif~
    });

    app.start().then(function () {
        app.setRoot('shell', 'entrance');
    });
});>>

moduleJS(dependencies,statements,returnValue) ::= <<define([~dependencies:{it|'~it.importName~'};separator=", "~], function (~dependencies:{it|~it.refName~};separator=", "~) {

   ~statements:{it|~it~};separator="\n"~

	return ~returnValue~;
});>>

shellHTML() ::= <<<div>
    <nav class="navbar navbar-default navbar-fixed-top" role="navigation">
        <div class="navbar-header">
            <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
                <span class="sr-only">Toggle Navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            <a class="navbar-brand" href="#">
                <i class="fa fa-home"></i>
                <span></span>
            </a>
        </div>

        <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
            <ul class="nav navbar-nav" data-bind="foreach: router.navigationModel">
                <li data-bind="css: { active: isActive }">
                    <a data-bind="attr: { href: hash }, text: title"></a>
                </li>
            </ul>

            <ul class="nav navbar-nav navbar-right">
                <li class="loader" data-bind="css: { active: router.isNavigating }">
                    <i class="fa fa-spinner fa-spin fa-2x"></i>
                </li>
            </ul>

            <form class="navbar-form navbar-right" role="search" data-bind="submit:search">
                <div class="form-group">
                    <input type="text" class="form-control" id="searchTerm" placeholder="Search"/>
                </div>
            </form>
        </div>
    </nav>

    <div class="page-host" data-bind="router: { transition:'entrance' }"></div>
</div> >>

shellJS(routes) ::= <<define(['plugins/router', 'durandal/app', 'material', 'knockout'], function (router, app, material, ko) {

    return {

        router: router,

        search: function (formElement) {
            var menuItem = $(formElement).find("#searchTerm").val().toLowerCase();
            for (var i = 0; i < router.routes.length; i++) {
                var obj = router.routes[i];
                if (obj.route.toLowerCase().includes(menuItem)) {
                    router.navigate(obj.route);
                    return;
                }
            }
        },

        activate: function () {

            $.material.init();

            return router.map([
               ~routes:{it|{route: ['~it.route~'], moduleId: '~it.moduleId~/~it.moduleId~', title: '~it.title~'~if(it.nav)~, nav: ~it.nav~~endif~~bugfix2()~};separator=",\n"~ 
            ]).buildNavigationModel().
                mapUnknownRoutes().
                activate();
        }
    };
});>>

model(name,statements) ::= <<var ~name~ = function () {
	var self = this;

	~statements:{it|~it~;};separator="\n\n"~
};>>