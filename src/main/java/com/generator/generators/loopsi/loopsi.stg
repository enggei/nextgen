/* uuid : 0b0029d5-f16a-4912-9627-7bb2187489df */
delimiters "~", "~"

/** enumDeclarations,KEYVALUELISTPROPERTY,declaration;label,STRINGPROPERTY;name,STRINGPROPERTY;properties,KEYVALUELISTPROPERTY,defaultValue,name; **/
GridEditor(enumDeclarations,label,name,properties) ::= <<define(['eventbus', 'plugins/router', 'durandal/app', 'knockout', 'knockoutMapping', 'utils'], function (EventBus, r, app, ko, mapping, utils) {

	var Element = function (element) {
        var self = this;
        ~properties:{it|self.~it.name~ = ko.observable(element.~it.name~);};separator="\n"~
		self.uuid = ko.observable(element.uuid);
    };

	var ~name~ = function () {
        var self = this;
        self.elements = ko.observableArray();
		self.eb = new EventBus(utils.getHost("eventbus/"), null, {debug: true});

		~enumDeclarations:{it|~it.declaration~};separator="\n"~

		self.eb.onopen = function () {
         	console.log("Eventbus opened");

          	utils.send(self.eb,
            'GetNodesByLabel',
            {
						"label": "~label~"
				},
                function (content) {
                    self.elements.removeAll();
                    for (var i = 0; i < content.list.length; i++) {
                        self.elements.push(new Element(content.list[i]));
                    }
                },
                function (cause) {
                    console.error("could not get elements: " + cause);
                });
        };

        self.addElement = function () {
            self.elements.push(new Element({
					~properties:{it|~it.name~: "~it.defaultValue~"};separator=",\n"~,
					uuid: ""
            }));
        };

        self.deleteElement = function (element) {
				console.log("delete " + element);
			utils.send(self.eb,
                'DeleteNode',
                {
                    "uuid": element.uuid
                },
                function (content) {

                    var found = ko.utils.arrayFirst(self.elements(), function (item) {
                        return item.uuid == content.uuid;
                    });

                    if (found) {
                        self.elements.remove(found);
                    }
                },
                function (cause) {
                    console.error("could save ~label~: " + cause);
                });
        };

        self.saveElement = function (element) {
            console.info("saving " + element); 
			utils.send(self.eb,
                'SaveNode',
                {
                    "label": "~label~",
					"uuid": element.uuid(),
					"properties": {
                    	~properties:{it|"~it.name~": element.~it.name~()};separator=",\n"~
					}
                },
                function (content) {
                    element.uuid = content.uuid
                },
                function (cause) {
                    console.error("could save ~label~: " + cause);
                });
        };

        self.activate = function () {
            console.log('activate grid');
        };

        self.canActivate = function () {
            console.log('canActivate grid');
            return true;
        };

        self.canDeactivate = function () {
            return true;
            //return app.showMessage('Are you sure you want to leave?', 'Leaving', ['Yes', 'No']);
        };

        self.deactivate = function () {
            console.log('deactivate grid');
        };
    };

    return new ~name~();
}); 
>>

/** properties,KEYVALUELISTPROPERTY,htmlComponent,name;title,STRINGPROPERTY; **/
GridEditorHtml(properties,title) ::= <<<section>
    <div class="page-header">
    <h3>~title;format="capitalize"~</h3>
    <div>
			<form>
            <p><span data-bind='text: elements().length'>&nbsp;</span> ~title;format="capitalize"~(s).</p>
				<button class="btn btn-default" data-bind='click: addElement'>Add</button>            
				<table class="table table-condensed" data-bind='visible: elements().length > 0'>
                <thead>
                    <tr>
                        <th>Save</th>
                        <th>Delete</th>
                        ~properties:{it|<th>~it.name;format="capitalize"~</th>};separator="\n"~
                    </tr>
                </thead>
                <tbody data-bind='foreach: elements'>
                    <tr>
							<td>
                     	<button class="btn btn-primary" data-bind='click: $root.saveElement'>
                        	<span class="glyphicon glyphicon-floppy-save"></span>
                        </button>
                     </td>
                     <td>
                     	<button class="btn btn-danger" data-bind='click: $root.deleteElement'>
                        	<span class="fa fa-trash-o"></span>
                        </button>
                     </td>                        
							~properties:{it|<td>~it.htmlComponent~</td>};separator="\n"~
							<td><input class='form-control' type="hidden" data-bind='value: uuid' /></td>
                    </tr>
                </tbody>
            </table>
            <br/>
            
        </form>
    </div>
	</div>
</section> 
>>

/** description,STRINGPROPERTY;messages,KEYVALUELISTPROPERTY,impl,name;name,STRINGPROPERTY;packageName,STRINGPROPERTY; **/
api(description,messages,name,packageName) ::= <<package ~packageName~;

import com.udc.loopsi.db.BaseDomainVisitor;
import com.udc.loopsi.db.NeoModel;
import com.udc.loopsi.db.NeoVisitor;
import com.udc.loopsi.db.VisitorFactory;
import io.vertx.core.Vertx;
import io.vertx.ext.web.Router;
import io.vertx.ext.web.RoutingContext;
import io.vertx.ext.web.handler.sockjs.BridgeOptions;
import io.vertx.core.json.JsonArray;
import io.vertx.core.json.JsonObject;
import org.neo4j.graphdb.Label;
import org.neo4j.graphdb.Node;
import org.neo4j.graphdb.Relationship;
import org.neo4j.graphdb.RelationshipType;

import java.time.LocalDateTime;
import java.util.Comparator;
import java.util.Set;
import java.util.TreeSet;
import java.util.UUID;

import static com.udc.loopsi.api.APIVisitorFactory.dispatchVisitorRequest;
import static com.udc.loopsi.db.NeoModel.uuidOf;
import static com.udc.loopsi.util.APIUtil.verifyNode;
import static com.udc.loopsi.util.JsonUtil.KEYS.PARAMS;
import static com.udc.loopsi.util.JsonUtil.KEYS.VISITOR;
import static com.udc.loopsi.util.JsonUtil.newJsonObject;
import static com.udc.loopsi.util.JsonUtil.success;
import static com.udc.loopsi.util.VertxWebUtil.*;
import static java.util.UUID.fromString;

/**
 * ~description~
 */
public class ~name~ {

	protected final static org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(~name~.class);

	public enum VISITORS {
		~messages:{it|~it.name~};separator=", "~
	}

	public static void attach(Router router, Vertx vertx, JsonObject config, BridgeOptions bridgeOptions) {

		~messages:{it|APIVisitorFactory.addEventbusRouter(vertx, log, AdminAPI.class, VISITORS.~it.name~.name(), bridgeOptions);};separator="\n"~
	}

	public static VisitorFactory newVisitorFactory() {
		return (parameters, model, tx) -> {
			switch (VISITORS.valueOf(parameters.getString(VISITOR.name()))) {
~messages:{it|
				case ~it.name~:
					return ~it.name;format="lowFirst"~(parameters.getJsonObject(PARAMS.name()), model);};separator="\n"~
				default:
					throw new IllegalArgumentException("unknown BadgeAPI.VISITOR: '" + parameters.getString(VISITOR.name()) + "' " + PARAMS.name() + ": '" + parameters.getJsonObject(PARAMS.name()).encode() + "'");
			}
		};
	}

~messages:{it|
	static NeoVisitor ~it.name;format="lowFirst"~(final JsonObject parameters, final NeoModel model) {
		return ~it.impl~
	~bugfix()~
};separator="\n"~
} 
>>

/** impl,STRINGPROPERTY; **/
baseDomainVisitor(impl) ::= <<new BaseDomainVisitor() {
			@Override
			public void visit(JsonObject result) throws Throwable {
				~impl~
			}
		}; 
>>

/**  **/
bugfix() ::= <<} 
>>

/**  **/
convertProperties() ::= <<final JsonArray jsonArray = parameters.getJsonArray("properties");
final String[] properties = new String[jsonArray.size() * 2];
int index = 0;
for (Object kv : jsonArray) {
	final JsonObject keyValue = (JsonObject) kv;
	properties[index++] = keyValue.getString("key");
	properties[index++] = keyValue.getString("value");
} 
>>

/** items,KEYVALUELISTPROPERTY,description,name,route; **/
mainMenu(items) ::= <<define(['plugins/router', 'knockout'], function (r, ko) {

    var menuButtons = ko.observableArray([
        ~items:{it|{name: "~it.name;format="capitalize"~", description: "~it.description~", route: "~it.route~"~bugfix()~};separator=",\n"~
    ]);

    return {
        menuButtons: menuButtons
    }
}); 
>>

/**  **/
mainMenuHtml() ::= <<<section>
    <div data-bind="compose: 'menuButtons.html'"></div>
</section> 
>>

/** routes,KEYVALUELISTPROPERTY,moduleId,nav,route,title; **/
shell(routes) ::= <<define(['plugins/router', 'durandal/app', 'material', 'knockout'], function (router, app, material, ko) {

    var currentTime = ko.observable();

    function checkTime(i) {
        return (i < 10) ? "0" + i : i;
    }

    function startTime() {

        // neither GMT nor UTC change for summer-time, so even if it says 'GMT' in UTCString
        // ref http://www.timeanddate.com/time/gmt-utc-time.html
        currentTime(new Date().toUTCString());
        setTimeout(function () {
            startTime()
        }, 500);
    }

    return {

        router: router,

        currentTime: currentTime,

        search: function () {
            app.showMessage('Search not yet implemented...');
        },

        activate: function () {

            $.material.init();

            startTime();

            return router.map([                
					~routes:{it|{route: [~it.route~], moduleId: '~it.moduleId~', title: '~it.title~'~if(it.nav)~, nav: ~it.nav~~endif~~bugfix()~};separator=",\n"~
            ]).buildNavigationModel().
                mapUnknownRoutes(). // This will automatically interpret url patterns as module ids. So, a route of home would map to a module with id of home.
                activate();
        }
    };
}); 
>>
