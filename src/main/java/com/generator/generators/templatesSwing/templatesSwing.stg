/* uuid : 413d652e-413a-4342-9a68-e70c4c053df0 */
delimiters "~", "~"

/** groupName,STRINGPROPERTY;packageName,STRINGPROPERTY;statements,KEYVALUELISTPROPERTY,name,newAction; **/
TemplatesSwing(groupName,packageName,statements) ::= <<package ~packageName~;

import com.generator.util.SwingUtil;
import org.neo4j.graphdb.GraphDatabaseService;
import org.neo4j.graphdb.Transaction;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.io.File;

/**
 * Swing methods for ~groupName~ (Swing UI for neo, group and vertx)
 */
public class ~groupName~Swing {

	private final ~groupName~Neo db;

	public ~groupName~Swing(GraphDatabaseService db) {
		this.db = new ~groupName~Neo(db);
	}

	public static abstract class ~groupName~NeoListener {

~statements:{it|
		public void new~it.name;format="capitalize"~(~groupName~Neo.~it.name~Node node) {
			System.out.println("new~it.name;format="capitalize"~Node : " + node.getUuid());
		~bugfix()~
};separator="\n"~
		public void onException(String action, Throwable throwable) {
			System.out.println("Could not " + action + " : " + throwable.getMessage());
			throwable.printStackTrace();
		}
	}

	public JPanel newNewInstancesPanel(~groupName~NeoListener delegate) {
		return new NewInstancesPanel(this, delegate);
	}

	~statements:{it|
~it.newAction~
	};separator="\n"~

	private final class NewInstancesPanel extends SwingUtil.FormPanel {

		public NewInstancesPanel(~groupName~Swing neoSwing, ~groupName~NeoListener delegate) {
			super("150dlu, 4dlu, 150dlu:grow", "pref, 4dlu~statements:{it|, pref};separator=", 4dlu"~");

			setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));

			int row = 1;
			this.addSeparator("New instances", 1, row, 3, 1);

~statements:{it|
			row += 2;
			this.addLabel("New ~it.name;format="capitalize"~", 1, row);
			this.add(newJButton(neoSwing.new~it.name;format="capitalize"~Action(delegate)), 3, row);
};separator="\n"~
		}

		private JButton newJButton(Action action) {
			final JButton button = new JButton(action);
			button.setMargin(new Insets(1,1,1,1));
			button.setFocusPainted(false);
			return button;
		}
	}

	public static void main(String[] args) {
		final org.neo4j.graphdb.GraphDatabaseService db = new org.neo4j.graphdb.factory.GraphDatabaseFactory().newEmbeddedDatabase(new File("src/test/tests/db"));
		final ~groupName~Swing templatesNeoSwing = new ~groupName~Swing(db);

		SwingUtil.showPanel(templatesNeoSwing.newNewInstancesPanel(new ~groupName~NeoListener() {
~statements:{it|
			@Override
			public void new~it.name;format="capitalize"~(~groupName~Neo.~it.name~Node node) {
				super.new~it.name;format="capitalize"~(node);
			~bugfix()~
};separator="\n"~
		}));
	}
} 
>>

/** name,STRINGPROPERTY;packageName,STRINGPROPERTY; **/
addVerticleAction(name,packageName) ::= <<add(deployVerticleAction(vertx, txtRoot, "~packageName~", "~name~Verticle", new VertxUtil.SuccessHandler<String>() {
	@Override
	public void onSuccess(String result) {
		SwingUtilities.invokeLater(() -> {
			declarationsPanel.add("~name~Instance", new Group~name~Panel(vertx));
		});
	}

	@Override
	public void onFail(Throwable t) {

	}
})); 
>>

/**  **/
bugfix() ::= <<} 
>>

/** groupName,STRINGPROPERTY;name,STRINGPROPERTY; **/
newAction(groupName,name) ::= <<public Action new~name;format="capitalize"~Action(~groupName~NeoListener listener) {
	return new AbstractAction("new ~name;format="capitalize"~") {
		@Override
		public void actionPerformed(ActionEvent e) {
			SwingUtilities.invokeLater(() -> {
				db.doInTransaction(new ~groupName~Neo.~groupName~NeoAction() {
					@Override
					public void doAction(Transaction tx) throws Throwable {
						listener.new~name;format="capitalize"~(db.new~name;format="capitalize"~());
					}

					@Override
					public void exception(Throwable throwable) {
						listener.onException("new~name~", throwable);
					}
				});
			});
		}
	};
} 
>>

/** groupName,STRINGPROPERTY;name,STRINGPROPERTY; **/
stringPropertyEditor(groupName,name) ::= << final JPanel ~name~Editor = new JPanel(new GridLayout(1,3));

~name~Editor.add(new JLabel("~name~ "));
final JTextField txt~name~ = new JTextField(10);
~name~Editor.add(txt~name~);
~name~Editor.add(new JButton(new AbstractAction("set") {
	@Override
	public void actionPerformed(ActionEvent e) {
		// DomainBooleanPropertySetterVerticle.sendPropertyNameMessage
		~groupName~Verticle.send~name;format="capitalize"~Message(vertx, instanceID, txt~name~.getText(), s -> SwingUtilities.invokeLater(() -> {
			((JButton) e.getSource()).setEnabled(false);
		}));
	}
}));
actionPanel.add(~name~Editor); 
>>
