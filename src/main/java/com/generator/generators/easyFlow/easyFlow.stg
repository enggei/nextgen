/* easyFlow bc15673a-2781-4b46-96a0-575db6804f4d*/
delimiters "~", "~"

declaration(name,state) ::= <<.whenEnter(~state~, new ContextHandler<~name~Context>() {
    @Override
    public void call(final ~name~Context context) throws Exception {
        //log.debug("entering: ~state;format="humpToCap"~");
        if (listener != null) listener.onEnter(~state~, context);
        ~state;format="toLower"~(context);
    }
})
.whenLeave(~state~, new ContextHandler<~name~Context>() {
    @Override
    public void call(final ~name~Context context) throws Exception {
        //log.debug("exiting: ~state;format="humpToCap"~");
        if (listener != null) listener.onLeave(~state~, context);
    }
})>>

easyFlow(bindings,context,events,extends,name,package,states,superParams,transit,implement) ::= <<~if(package)~package ~package~;

~endif~import au.com.ds.ef.*;
import au.com.ds.ef.call.ContextHandler;
import au.com.ds.ef.err.ExecutionError;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import static au.com.ds.ef.FlowBuilder.*;
import static ~package~.~name~.States.*;
import static ~package~.~name~.Events.*;

/**
 * Generated with NextGen
 * 
 * EasyFlow: http://datasymphony.com.au/open-source/easyflow/
 */
public abstract class ~name~ ~if(extends)~extends ~extends~ ~endif~~if(implement)~implements ~implement~~endif~{

    protected static final Logger log = LoggerFactory.getLogger(~name~.class);

    ~context~

    ~states~

    ~events~

    /** ~name~Listener  **/
    public interface ~name~Listener {
        void onEnter(States state, ~name~Context context);
        void onLeave(States state, ~name~Context context);
        void onFinalState(States state, ~name~Context context);
        void onError(ExecutionError error, ~name~Context context);
    }

    private final EasyFlow<~name~Context> fsm;
    protected ~name~Listener listener;

    public ~name~(~superParams:{it|~it.type~ ~it.name~};separator=", "~) {
        super(~superParams:{it|~it.name~};separator=", "~);

        // states and transitions:
        this.fsm = ~transit~;

        // binding:
        this.fsm
            .executor(new SyncExecutor())
            ~bindings:{it|~it.declaration~};separator="\n"~.
            whenFinalState((state, context) -> {
                //log.debug("FINAL");
                if (listener != null) listener.onFinalState((States)state, (~name~Context)context);
                onFinalState((~name~Context)context);
            }).
            whenError((error, context) -> {
                //log.error("ERROR");
                if (listener != null) listener.onError(error, (~name~Context)context);
                onERROR(error, (~name~Context)context);
            });
    }

    public void start(final ~name~Context context) {
        this.fsm.start(context);
    }

    public void start(final ~name~Context context, ~name~Listener listener) {
        this.listener = listener;
        this.fsm.start(context);
    }

    ~bindings:{it|~it.impl~};separator="\n"~

    protected abstract void onFinalState(final ~name~Context context);

    protected abstract void onERROR(final ExecutionError error, final ~name~Context context);
}>>

events(events) ::= <<public enum Events implements EventEnum {
    ~events:{it|~it~};separator=",\n"~
}>>

impl(name,state) ::= <<protected abstract void ~state;format="toLower"~(final ~name~Context context) throws Exception;>>

mvn() ::= <<<dependency>
    <groupId>au.com.datasymphony</groupId>
    <artifactId>EasyFlow</artifactId>
    <version>1.3</version>
</dependency> >>

stateDeclaration(comment,name) ::= <<~name~~if(comment)~ /* ~comment~ */ ~endif~>>

statefulContext(name,properties) ::= <<public static class ~name~Context extends StatefulContext {
    ~properties:{it|~if(it.modifier)~~it.modifier~ ~endif~~it.type~ ~it.name~~if(it.value)~ = ~it.value~~endif~;~if(it.comment)~ //~it.comment~~endif~};separator="\n"~
}>>

states(states) ::= <<public enum States implements StateEnum {
    ~states:{it|~it~};separator=",\n"~
}>>

transit(event,isFinish,isInit,state,transits,name) ::= <<~if(isInit)~from(~state~)~else~on(~event~).~if(isFinish)~finish~else~to~endif~(~state~)~endif~~if(transits)~.transit( // ~name~
~transits:{it|~it~};separator=",\n"~
)~endif~>>