delimiters "~","~"

FormPanel(statements,mainStatements,components,name,extending,rowSpec,package,colSpec) ::= <<package ~package~;

public class ~name~~if(extending)~ extends ~extending~~endif~ {

	~components:{it|~it.type~ ~it.name~;};separator="\n"~
	
	public ~name~() {
		setLayout(new com.jgoodies.forms.layout.FormLayout("~colSpec~", "~rowSpec~"));
		setBackground(javax.swing.UIManager.getColor("Panel.background"));
		~statements:{it|~it~};separator="\n"~
~components:{it|~if(it.init)~
		set~it.name;format="capitalize"~(~it.init~);
~endif~}~
	}

~components:{it|
	public ~name~ set~it.name;format="capitalize"~(~it.type~ component) {
		this.~it.name~ = component;
		add(~it.name~, new com.jgoodies.forms.layout.CellConstraints().xywh(~it.x~, ~it.y~, ~it.w~, ~it.h~, "~it.hAlign~, ~it.vAlign~"));
		return this;
	~eom()~
};separator="\n"~

~components:{it|
	public ~name~ decorate~it.name;format="capitalize"~(java.util.function.Consumer<~it.type~> consumer) {
		consumer.accept(this.~it.name~);
		return this;
	~eom()~
};separator="\n"~

~components:{it|
	public ~it.type~ get~it.name;format="capitalize"~() {
		return ~it.name~;
	~eom()~
};separator="\n"~

	public static void main(String[] args) throws Throwable {
		final java.awt.Font font = new java.awt.Font("InputMono", java.awt.Font.PLAIN, 24);
		javax.swing.UIManager.put("TextField.font", font);
		javax.swing.UIManager.put("TextArea.font", font);
		
		~mainStatements:{it|~it~};separator="\n"~

		nextgen.utils.SwingUtil.showPanel(new ~name~());
	}
}  >>

grammar() ::= <<columnSpecs ::= columnSpec+ 
rowSpecs ::= rowSpec+

columnSpec ::= [columnAlignment:] size [:resizeBehavior]
rowSpec ::= [rowAlignment :] size [:resizeBehavior]
columnAlignment ::= LEFT | CENTER | RIGHT | FILL | L | C | R | F
rowAlignment ::= TOP | CENTER | BOTTOM | FILL | T | C | B | F
size ::= constantSize | componentSize | boundedSize
componentSize ::= MIN | PREF | DEFAULT | M | P | D
constantSize ::= {integer}integerUnit | {double}doubleUnit
integerUnit ::= PX | PT | DLU
doubleUnit ::= IN | MM | CM
boundedSize ::= MIN(constantSize;componentSize) | MAX(constantSize;componentSize)
resizeBehavior ::= NONE | GROW | GROW({double) | G({double})


constraints ::= column, row [, colSpan, rowSpan][, hAlign, vAlign]
column ::= {an integer}
row ::= {an integer}
colSpan ::= {an integer}
rowSpan ::= {an integer}
hAlign ::= LEFT | CENTER | RIGHT | DEFAULT | FILL | L | C | R | D | F
vAlign ::= TOP | CENTER | BOTTOM | DEFAULT | FILL | T | C | B | D | F  >>

rowSpecs(rowSpec) ::= <<~rowSpec:{it|~it~};separator=", "~  >>

columnSpecs(columnSpec) ::= <<~columnSpec:{it|~it~};separator=", "~  >>

grow(double) ::= <<grow~if(double)~(~double~)~endif~  >>

rowSpan(n) ::= <<~n~  >>

colSpan(n) ::= <<~n~  >>

row(n) ::= <<~n~  >>

column(n) ::= <<~n~  >>

constraints(hAlign,rowSpan,colSpan,row,vAlign,column) ::= <<~column~, ~row ~[, ~colSpan~, ~rowSpan~][, ~hAlign~, ~vAlign~]  >>

resizeBehavior(GROW) ::= <<~if(GROW)~~GROW~~else~NONE~endif~  >>

boundedSize(componentSize,constantSize) ::= <<MIN(~constantSize~;~componentSize~) | MAX(~constantSize~;~componentSize~)  >>

constantSize(unit,value) ::= <<~value~~unit~  >>

rowSpec(resizeBehavior,rowAlignment,size) ::= <<~if(rowAlignment)~~rowAlignment~:~endif~~size~~if(resizeBehavior)~:~resizeBehavior~~endif~  >>

columnSpec(columnAlignment,size,resizeBehavior) ::= <<~if(columnAlignment)~~columnAlignment~:~endif~~size~~if(resizeBehavior)~:~resizeBehavior~~endif~  >>

eom() ::= "}"

gt() ::= ">"
