delimiters "~","~"

DomainVerticle(messages,name,imports,packageName) ::= <<package ~packageName~;

import io.vertx.core.AbstractVerticle;
import io.vertx.core.Promise;
import io.vertx.core.eventbus.Message;
import io.vertx.core.json.JsonObject;
~imports:{it|~it~};separator="\n"~

public class ~name;format="capitalize"~ extends AbstractVerticle {

	private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(~name;format="capitalize"~.class);

	private org.neo4j.graphdb.GraphDatabaseService db;

	@Override
	public void start(Promise<Void> promise) throws Exception {
		new Thread(() -> {

			db = new org.neo4j.graphdb.factory.GraphDatabaseFactory()
				.newEmbeddedDatabaseBuilder(new java.io.File(config().getString("db.path")))
				.setConfig(org.neo4j.graphdb.factory.GraphDatabaseSettings.allow_upgrade, "true")
				.newGraphDatabase();
		
			log.info("db started");

			~messages:{it|vertx.eventBus().consumer("~it.address~", this::~it.handler~);};separator="\n"~
			
		}).start();
	}

	~messages:{it|~it.implementation~};separator="\n\n"~

	private static void debug(String method, Message<io.vertx.core.buffer.Buffer> message) {
		log.info(method + " : " + message.body());
	}

	private void doInTransaction(java.util.function.Consumer<org.neo4j.graphdb.Transaction> action, java.util.function.Consumer<java.lang.Throwable> onException) {
		try (org.neo4j.graphdb.Transaction tx = db.beginTx())  {
			action.accept(tx);
			tx.success();
		} catch (java.lang.Throwable t)  {
			onException.accept(t);
		}
	}
}  >>

DomainAction(statements,params,name) ::= <<private void ~name~(Message<io.vertx.core.buffer.Buffer> message) {
	debug("~name~", message);
~if(params)~
	final JsonObject body = message.body();
	~params:{it|final ~it.type~ ~it.name~ = body.get~it.type~("~it.name~");};separator="\n"~
~endif~
	
	doInTransaction(transaction -> {
		final JsonObject reply = new JsonObject();
		~statements:{it|~it~};separator="\n"~
		message.reply(reply);
	}, throwable -> {
		message.fail(500, throwable.getMessage());
	});
}  >>

Entities() ::= << >>

JsonFactory(entities,package,name) ::= <<package ~package~;

public class ~name;format="capitalize"~ {

	public static io.vertx.core.json.JsonObject load(java.io.File file) throws java.io.IOException {
		if (!file.exists() || !file.isFile()) throw new IllegalArgumentException("could not read " + file.getAbsolutePath());
		return new io.vertx.core.json.JsonObject(io.vertx.core.buffer.Buffer.buffer(java.nio.file.Files.readAllBytes(file.toPath())));
	}

	public static io.vertx.core.json.JsonObject load(java.io.InputStream inputStream) throws java.io.IOException {
		if (inputStream == null) throw new java.io.IOException("inputStream is null");
		java.io.ByteArrayOutputStream buffer = new java.io.ByteArrayOutputStream();
		int read;
		byte[] data = new byte[2048];
		while ((read = inputStream.read(data, 0, data.length)) != -1)
			buffer.write(data, 0, read);
		inputStream.close();
		final byte[] content = buffer.toByteArray();
		buffer.close();
		return new io.vertx.core.json.JsonObject(io.vertx.core.buffer.Buffer.buffer(content));
	}
	
	public static void save(io.vertx.core.json.JsonObject jsonObject, java.io.File file) throws java.io.IOException {

		if (!file.getParentFile().exists() && !file.getParentFile().mkdirs())
			throw new IllegalStateException("could not create " + file.getParentFile().getAbsolutePath());

		if (!file.exists() && !file.createNewFile())
			throw new IllegalStateException("could not create " + file.getAbsolutePath());

		java.nio.file.Files.write(file.toPath(), jsonObject.toBuffer().getBytes());
	}

~entities:{it|
	public static ~it~ new~it~() { 
		return new ~it~();
	\}

	public static ~it~ new~it~NoUuid() { 
		return new ~it~().removeUuid();
	\}

	public static ~it~ new~it~(io.vertx.core.json.JsonObject jsonObject) { 
		return new ~it~(jsonObject);
	\}

	public static ~it~ new~it~(java.io.File file) throws java.io.IOException { 
		return new ~it~(load(file));
	\}

	public static ~it~ merge(~it~ lhs, ~it~ rhs) {
		return new~it~(lhs.getJsonObject().mergeIn(rhs.getJsonObject()));
	\}
};separator="\n"~
}  >>

JsonWrapper(accessors,neoNodeMapper,lexical,externalFields,name,package) ::= <<package ~package~;

public class ~name;format="capitalize"~ {

	private final io.vertx.core.json.JsonObject jsonObject;
	~externalFields:{it|private ~it.type~ _~it.name~~if(it.initializer)~ = ~it.initializer~~endif~;};separator="\n"~

	public ~name;format="capitalize"~() { 
		this.jsonObject = new io.vertx.core.json.JsonObject();
		jsonObject.put("uuid", java.util.UUID.randomUUID().toString());
	}

	public ~name;format="capitalize"~(io.vertx.core.json.JsonObject jsonObject) { 
		this.jsonObject = jsonObject;
		java.lang.String uuidString = jsonObject.getString("uuid");
		if (uuidString == null) jsonObject.put("uuid", java.util.UUID.randomUUID().toString());
	}

	public ~name;format="capitalize"~(java.io.File file) throws java.io.IOException {
		this(new io.vertx.core.json.JsonObject(io.vertx.core.buffer.Buffer.buffer(java.nio.file.Files.readAllBytes(file.toPath()))));
	}

	public ~name;format="capitalize"~(java.io.InputStream inputStream) throws java.io.IOException {
		if (inputStream == null) throw new java.io.IOException("inputStream is null");
		java.io.ByteArrayOutputStream buffer = new java.io.ByteArrayOutputStream();
		int read;
		byte[] data = new byte[2048];
		while ((read = inputStream.read(data, 0, data.length)) != -1)
			buffer.write(data, 0, read);
		inputStream.close();
		final byte[] content = buffer.toByteArray();
		buffer.close();

		this.jsonObject = new io.vertx.core.json.JsonObject(io.vertx.core.buffer.Buffer.buffer(content));
		java.lang.String uuidString = jsonObject.getString("uuid");
		if (uuidString == null) jsonObject.put("uuid", java.util.UUID.randomUUID().toString());
	}

	public io.vertx.core.json.JsonObject getJsonObject() { 
		return this.jsonObject;
	}

	@Deprecated
	public String uuid() {
		return this.jsonObject.getString("uuid");
	}

	public String getUuid() {
		return this.jsonObject.getString("uuid");
	}

	public ~name;format="capitalize"~ removeUuid() {
		this.jsonObject.remove("uuid");
		return this;
	}

	@Override
	public boolean equals(java.lang.Object o) { 
		if (this == o) return true;
		if (o == null || getClass() != o.getClass()) return false;
		final ~name;format="capitalize"~ other = (~name;format="capitalize"~) o;
		return jsonObject.getString("uuid").equals(other.getJsonObject().getString("uuid"));
	}

	@Override
	public int hashCode() { 
		return java.util.Objects.hash(jsonObject.getString("uuid"));
	}

	~accessors:{it|~it~};separator="\n\n"~

	~neoNodeMapper~

	@Override
	public java.lang.String toString() { 
		return ~if(lexical)~jsonObject.getString("~lexical~")~else~jsonObject.encode()~endif~;
	}
}  >>

externalAccessors(name,className,type) ::= <<public ~className;format="capitalize"~ set~name;format="capitalize"~(~type~ value) { 
	this._~name~ = value;
	return this;
}

public ~type~ get~name;format="capitalize"~() { 
	return this._~name~;
}

public ~type~ get~name;format="capitalize"~(~type~ defaultValue) { 
	return this._~name~ == null ? defaultValue : this._~name~;
} >>

referenceAccessors(type,className,name) ::= <<public ~className;format="capitalize"~ set~name;format="capitalize"~(~type~ value) { 
	jsonObject.put("~name~", value.getJsonObject());
	return this;
}

public ~type~ get~name;format="capitalize"~() { 
	return jsonObject.getJsonObject("~name~") == null ? null : new ~type~(jsonObject.getJsonObject("~name~"));
} >>

listPrimitiveAccessors(className,type,name) ::= <<public ~className;format="capitalize"~ add~name;format="capitalize"~(~type~ value) { 
	io.vertx.core.json.JsonArray jsonArray = jsonObject.getJsonArray("~name~");
	if (jsonArray == null) jsonObject.put("~name~", jsonArray = new io.vertx.core.json.JsonArray());
	jsonArray.add(value);
	return this;
}

public java.util.stream.Stream<~type~> get~name;format="capitalize"~() { 
	return jsonObject.getJsonArray("~name~", new io.vertx.core.json.JsonArray()).stream().map((o) -> (~type~)o);
}

public ~className;format="capitalize"~ remove~name;format="capitalize"~(~type~ value) { 
	final io.vertx.core.json.JsonArray jsonArray = jsonObject.getJsonArray("~name~", new io.vertx.core.json.JsonArray());
	for (int i = 0; i < jsonArray.size(); i++)  { 
		final ~type~ o = jsonArray.get~type~(i);
		if (value.equals(o))  { 
			jsonArray.remove(i);
			return this;
		}
	}
	return this;
}

public ~className;format="capitalize"~ clear~name;format="capitalize"~() { 
	jsonObject.put("~name~", new io.vertx.core.json.JsonArray());
	return this;
}  >>

primitiveAccessors(className,name,type) ::= <<public ~className;format="capitalize"~ set~name;format="capitalize"~(~type~ value) { 
	jsonObject.put("~name~", value);
	return this;
}

public ~type~ get~name;format="capitalize"~() { 
	return jsonObject.get~type;format="capitalize"~("~name~");
}

public ~type~ get~name;format="capitalize"~(~type~ defaultValue) { 
	return jsonObject.get~type;format="capitalize"~("~name~", defaultValue);
}  >>

listReferenceAccessors(className,name,type) ::= <<public ~className;format="capitalize"~ add~name;format="capitalize"~(~type~ value) { 
	io.vertx.core.json.JsonArray jsonArray = jsonObject.getJsonArray("~name~");
	if (jsonArray == null) jsonObject.put("~name~", jsonArray = new io.vertx.core.json.JsonArray());
	jsonArray.add(value.getJsonObject());
	return this;
}

public java.util.stream.Stream<~type~> get~name;format="capitalize"~() { 
	return jsonObject.getJsonArray("~name~", new io.vertx.core.json.JsonArray()).stream().map((o) -> new ~type~((io.vertx.core.json.JsonObject) o));
}

public ~className;format="capitalize"~ remove~name;format="capitalize"~(~type~ value) { 
	final io.vertx.core.json.JsonArray jsonArray = jsonObject.getJsonArray("~name~", new io.vertx.core.json.JsonArray());
	for (int i = 0; i < jsonArray.size(); i++)  { 
		final io.vertx.core.json.JsonObject o = jsonArray.getJsonObject(i);
		if (value.getJsonObject().getString("uuid").equals(o.getString("uuid")))  { 
			jsonArray.remove(i);
			return this;
		}
	}
	return this;
}

public ~className;format="capitalize"~ clear~name;format="capitalize"~() { 
	jsonObject.put("~name~", new io.vertx.core.json.JsonArray());
	return this;
} >>

enumAccessors(className,type,name) ::= <<public ~className;format="capitalize"~ set~name;format="capitalize"~(~type~ value) { 
	if (value == null) return this;
	jsonObject.put("~name~", value.name());
	return this;
}

public ~type~ get~name;format="capitalize"~() { 
	return get~name;format="capitalize"~(null);
}

public ~type~ get~name;format="capitalize"~(~type~ defaultValue) { 
	return jsonObject.getString("~name~") == null ? defaultValue : ~type~.valueOf(jsonObject.getString("~name~"));
} >>

listEnumAccessors(className,name,type) ::= <<public ~className;format="capitalize"~ add~name;format="capitalize"~(~type~ value) { 
	io.vertx.core.json.JsonArray jsonArray = jsonObject.getJsonArray("~name~");
	if (jsonArray == null) jsonObject.put("~name~", jsonArray = new io.vertx.core.json.JsonArray());
	jsonArray.add(value.name());
	return this;
}

public java.util.stream.Stream<~type~> get~name;format="capitalize"~() { 
	return jsonObject.getJsonArray("~name~", new io.vertx.core.json.JsonArray()).stream().map((o) -> ~type~.valueOf(o.toString()));
}

public ~className;format="capitalize"~ remove~name;format="capitalize"~(~type~ value) { 
	final io.vertx.core.json.JsonArray jsonArray = jsonObject.getJsonArray("~name~", new io.vertx.core.json.JsonArray());
	jsonArray.remove(value.name());
	return this;
}

public ~className;format="capitalize"~ clear~name;format="capitalize"~() { 
	jsonObject.put("~name~", new io.vertx.core.json.JsonArray());
	return this;
}  >>

Server(packageName,imports,name) ::= <<package ~packageName~;

~imports:{it|~it~};separator="\n"~

public class ~name~ {

	protected static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(~name~.class);

	public ~name~(String configPath) throws java.io.IOException {
		log.info("Starting server");

		final io.vertx.core.json.JsonObject serverDeployment = configPath == null
				? new io.vertx.core.json.JsonObject(read(getClass().getResourceAsStream("/config.json")))
				: new io.vertx.core.json.JsonObject(read(new java.io.FileInputStream(configPath)));

		final io.vertx.core.DeploymentOptions deploymentOptions = new io.vertx.core.DeploymentOptions().setConfig(serverDeployment);
		log.info("serverDeploymentOptions " + serverDeployment.encode());

		final io.vertx.core.Vertx vertx = io.vertx.core.Vertx.vertx();


		serverDeployment.getJsonArray("verticles")
				.stream()
				.map(o -> (io.vertx.core.json.JsonObject)o)
				.forEach(verticleSettings -> {
					log.info("verticle settings " + verticleSettings.encodePrettily());
					vertx.deployVerticle(verticleSettings.getString("className"), deploymentOptions, result -> {
						if (result.failed())
							log.error("deployment failed " + result.cause().getMessage(), result.cause());
						else
							log.info("deployment success");
					});
				});
	}

	public static io.vertx.core.buffer.Buffer read(java.io.InputStream inputStream) throws java.io.IOException {
		java.io.ByteArrayOutputStream buffer = new java.io.ByteArrayOutputStream();
		int read;
		byte[] data = new byte[2048];
		while ((read = inputStream.read(data, 0, data.length)) != -1)
			buffer.write(data, 0, read);
		inputStream.close();
		final byte[] content = buffer.toByteArray();
		buffer.close();
		return io.vertx.core.buffer.Buffer.buffer(content);
	}

	public static void main(java.lang.String[] args) throws java.io.IOException {
		System.setProperty("io.netty.tryReflectionSetAccessible", "true");
		new ~name~(args.length == 1 ? args[0] : null);
	}
}  >>

ServerConfig(webCachingEnabled,webEnableRangeSupport,verticles,name,webHost,webPort,webRoot,sslCertPath,sslKeyPath,isSSL,jwtExpiresInMinutes,jwtSecretKey,jwtPublicKey,jwtAlgorithm,dbPath) ::= <<{
	"name" : "~name~",
	"web.host" : "~webHost~",
	"web.port" : ~webPort~,
	"web.root" : "~webRoot~",
	"web.cachingEnabled" : ~webCachingEnabled~,
	"web.enableRangeSupport" : ~webEnableRangeSupport~,
	"verticles" : [ 
		~verticles:{it|{
	"name" : "~it.name~",
	"className" : "~it.className~"
~eom()~};separator=",\n"~
	],
	"jwt.algorithm" : "~jwtAlgorithm~",
	"jwt.publicKey" : "~jwtPublicKey~",
	"jwt.secretKey" : "~jwtSecretKey~",
	"jwt.expiresInMinutes" : "~jwtExpiresInMinutes~",
	"ssl" : ~if(isSSL)~true~else~false~endif~,
	"ssl.keyPath" : "~sslKeyPath~",
	"ssl.certPath" : "~sslCertPath~",
	"db.path" : "~dbPath~"
}  >>

WebVerticle(imports,startStatements,handlers,routes,methods,name,fields,packageName) ::= <<package ~packageName~;

import io.netty.handler.codec.http.HttpResponseStatus;
import io.vertx.core.AbstractVerticle;
import io.vertx.core.Future;
import io.vertx.core.MultiMap;
import io.vertx.core.http.HttpHeaders;
import io.vertx.core.http.HttpServerOptions;
import io.vertx.core.json.JsonArray;
import io.vertx.core.json.JsonObject;
import io.vertx.core.net.PemKeyCertOptions;
import io.vertx.ext.auth.jwt.JWTAuth;
import io.vertx.ext.auth.jwt.JWTAuthOptions;
import io.vertx.ext.jwt.JWTOptions;
import io.vertx.ext.web.Router;
import io.vertx.ext.web.RoutingContext;
import io.vertx.ext.web.handler.BodyHandler;
import io.vertx.ext.web.handler.JWTAuthHandler;
import io.vertx.ext.web.handler.SessionHandler;
import io.vertx.ext.web.handler.StaticHandler;
import io.vertx.ext.web.sstore.LocalSessionStore;

import java.util.Map;

import static io.netty.handler.codec.http.HttpResponseStatus.*;

~imports:{it|import ~it~;};separator="\n"~

public class ~name;format="capitalize"~ extends AbstractVerticle {

	private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(~name;format="capitalize"~.class);
	private static final String JSON_CONTENT_TYPE = "application/json; charset=utf-8";
	private static final String HTML_CONTENT_TYPE = "text/html; charset=utf-8";
	~fields:{it|private ~it.type~ ~it.name~~if(it.init)~ = ~it.init~~endif~;};separator="\n"~

	@Override
	public void start(Future<Void> startFuture) throws Exception {
		log.info("starting ~name;format="capitalize"~");

		~startStatements:{it|~it~};separator="\n"~

		final JWTAuth auth = JWTAuth.create(vertx, new JWTAuthOptions()
				.addPubSecKey(new io.vertx.ext.auth.PubSecKeyOptions()
						.setAlgorithm(config().getString("jwt.algorithm"))
						.setPublicKey(readPem(config().getString("jwt.publicKey")))
						.setSecretKey(readPem(config().getString("jwt.secretKey")))
				));

		final Router router = Router.router(vertx);
		router.route().handler(BodyHandler.create());
		router.route().handler(SessionHandler.create(LocalSessionStore.create(vertx)));
		router.post("/login").handler(routingContext -> login(routingContext, auth));
		router.route("/secure/*").handler(JWTAuthHandler.create(auth, "/login"));
		~routes:{it|router.~it.action~("/~it.url~")~if(it.order)~.order(~it.order~)~endif~.handler(this::~it.handler~);};separator="\n"~
		
		final HttpServerOptions serverOptions = new HttpServerOptions();

		if (config().getBoolean("ssl", false)) {
			serverOptions
					.setSsl(true)
					.setPemKeyCertOptions(
							new PemKeyCertOptions().
									setKeyPath(config().getString("ssl.keyPath")).
									setCertPath(config().getString("ssl.certPath")));
		}

		final StaticHandler staticHandler = StaticHandler.create();
		staticHandler.setWebRoot(config().getString("web.root"));
		staticHandler.setCachingEnabled(config().getBoolean("web.cachingEnabled"));
		staticHandler.setEnableRangeSupport(config().getBoolean("web.enableRangeSupport"));
		router.route("/*").handler(staticHandler);

		vertx.createHttpServer(serverOptions).requestHandler(router::accept).listen(config().getInteger("web.port"));

		log.info("server running on " + (config().getBoolean("ssl",false) ? "https" : "http") + "://" + config().getString("web.host") + ":" + config().getInteger("web.port"));

		startFuture.succeeded();
	}

	private void login(RoutingContext routingContext, JWTAuth auth) {
		debug("login", routingContext);

		vertx.eventBus().request("login", routingContext.getBodyAsJson(), reply -> {

			if (reply.succeeded()) {
				final JsonObject replyBody = (JsonObject) reply.result().body();

				if (replyBody.getBoolean("login.success", false)) {

					final String token = auth.generateToken(
							new io.vertx.core.json.JsonObject().put("sub", replyBody.getString("username")),
							new JWTOptions()
									.setAlgorithm(config().getString("jwt.algorithm"))
									.setExpiresInMinutes(config().getInteger("jwt.expiresInMinutes"))
									.setSubject(replyBody.getString("username")));

					final JsonObject session = new io.vertx.core.json.JsonObject()
							.put("username", replyBody.getString("username"))
							.put("token", token);

					sendResponse(routingContext, OK, session);

				} else {

					sendResponse(routingContext, OK, replyBody);	
				}

			} else {

				sendErrors(routingContext, INTERNAL_SERVER_ERROR,	"Server Error");
			}
		});
	}

	~handlers:{it|~it~};separator="\n\n"~

	~methods:{it|~it~};separator="\n\n"~

	static void sendErrors(RoutingContext routingContext, HttpResponseStatus httpResponseStatus, String... errors) {
		final JsonArray errorsArray = new JsonArray();
		for (String error : errors)
			errorsArray.add(error.trim());

		final String encode = new JsonObject().put("errors", errorsArray).encode();
		log.info(routingContext.request().absoluteURI() + " " + encode);
		routingContext.response()
					.setStatusCode(httpResponseStatus.code())
					.putHeader(HttpHeaders.CONTENT_LENGTH, encode.length() + "")
					.putHeader(HttpHeaders.CONTENT_TYPE, JSON_CONTENT_TYPE)
					.end(encode);
	}

	static void sendResponse(RoutingContext routingContext, HttpResponseStatus httpResponseStatus, JsonObject response) {
		final String encode = response.encode();
		log.info(routingContext.request().absoluteURI() + " " + encode);
		routingContext.response()
				.setStatusCode(httpResponseStatus.code())
				.putHeader(HttpHeaders.CONTENT_LENGTH, encode.length() + "")
				.putHeader(HttpHeaders.CONTENT_TYPE, JSON_CONTENT_TYPE)
				.end(encode);
	}

	static void sendHtmlResponse(RoutingContext routingContext, HttpResponseStatus httpResponseStatus, String html) {
		log.info(routingContext.request().absoluteURI() + " " + html);
		routingContext.response()
				.setStatusCode(httpResponseStatus.code())
				.putHeader(HttpHeaders.CONTENT_LENGTH, html.length() + "")
				.putHeader(HttpHeaders.CONTENT_TYPE, HTML_CONTENT_TYPE)
				.end(html);
	}

	static void debug(String method, RoutingContext routingContext) {
		final String uri = method + " " + routingContext.request().method().name() + " " + routingContext.request().uri();
		boolean isAuthenticated = routingContext.user() != null;
		log.info(uri + " " + (isAuthenticated ? "(authenticated)" : "(NOT authenticated)"));
		final MultiMap headers = routingContext.request().headers();
		for (Map.Entry<String, String> header : headers)
				log.info("\t" + header.getKey() + "=" + header.getValue());
		log.info("body " + routingContext.getBody().toString());
	}

	private String readPem(String path) throws java.io.IOException {
		final java.io.File file = new java.io.File(path);
		final java.io.BufferedInputStream inputStream = new java.io.BufferedInputStream(new java.io.FileInputStream(file));
		java.io.ByteArrayOutputStream buffer = new java.io.ByteArrayOutputStream();
		int read;
		byte[] data = new byte[2048];
		while ((read = inputStream.read(data, 0, data.length)) != -1)
			buffer.write(data, 0, read);
		inputStream.close();
		final byte[] content = buffer.toByteArray();
		buffer.close();
		final String s = new String(content);
		final int startIndex = s.indexOf("KEY-----") + 8;
		final int endIndex = s.indexOf("-----END");
		return s.substring(startIndex, endIndex).trim();
	}
}  >>

RequestHandler(page,statements,packageName,name) ::= <<package ~packageName~;

import io.vertx.core.eventbus.Message;
import io.vertx.core.json.JsonObject;
import io.vertx.ext.web.RoutingContext;
import ui.materialdesignlight.*;

import static ui.materialdesignlight.MaterialDesignLightST.*;

public class ~name~ {

	public static String handle(Message<Object> message) {
		final Object body = message.body();
		final JsonObject js = (JsonObject) body;
		
		final Page page = newPage();
		final String name = js.getString("name", "~page~");
		final String title = js.getString("title", "~page;format="capitalize"~");
		
		page.setHeader(newHeader()
				.setTitle(title)
				.setLgMenu(java.util.Arrays.stream(PageModel._pageRoutes)
						.map(pageRoute -> new Header.Header_LgMenu(name.equals(pageRoute.name()), pageRoute.name(), pageRoute.route()))
						.collect(java.util.stream.Collectors.toList()))
				.setSmMenu(java.util.Arrays.stream(PageModel._pageRoutes)
						.map(pageRoute -> new Header.Header_SmMenu(name.equals(pageRoute.name()), pageRoute.name(), pageRoute.route()))
						.collect(java.util.stream.Collectors.toList())))
				.setFooter(newMiniFooter()
						.setHeading(title));
		
		~statements:{it|~it~};separator="\n"~
		
		return page.toString();
	}
}  >>

RouteHandler(name,params) ::= <<private void ~name~(RoutingContext routingContext~if(params)~, ~params:{it|~it.type~ ~it.name~};separator=","~~endif~) {
	debug("~name~", routingContext);

	vertx.eventBus().request("~name~", routingContext.getBody(), reply -> {
		if (reply.succeeded()) {
			sendHtmlResponse(routingContext, OK, java.util.Objects.requireNonNull(~name;format="capitalize"~RequestHandler.handle(reply.result())));	
		} else {
			sendErrors(routingContext, INTERNAL_SERVER_ERROR,	reply.cause().getMessage());
		}
	});
}  >>

SendEventBusAction(actionName,params) ::= <<getFromDomainDB(vertx, routingContext, "~actionName~", new JsonObject()~if(params)~.~params:{it|put("~it.name~", routingContext.request().getParam("~it.name~"))}~~endif~);  >>

eom() ::= "}"

gt() ::= ">"
