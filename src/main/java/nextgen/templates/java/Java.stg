delimiters "~","~"

Entities() ::= << >>

Bean(fields,package,name,beanListener,lexical,eqha,fieldDeclarations,accessors) ::= <<package ~package~;

public class ~name~ implements java.beans.PropertyChangeListener {

	private final static org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(~name~.class);

	~fields:{it|private ~it.type~ _~it.name~~if(it.initializer)~ = ~it.initializer~~endif~;};separator="\n"~
	~fieldDeclarations:{it|~it~};separator="\n"~

	private final java.beans.PropertyChangeSupport pcs = new java.beans.PropertyChangeSupport(this);
	
	public ~name~() {
	}
	
	~accessors:{it|~it~};separator="\n\n"~
	
~if(lexical)~

	@Override
	public String toString() {
		return "" + ~lexical:{it|_~it~};separator=" + \" \" + "~;
	}
~endif~

~if(eqha)~

	@Override
	public boolean equals(Object o) {
		if (this == o) return true;
		if (o == null || getClass() != o.getClass()) return false;
		~name~ that = (~name~) o;
		return _~eqha~.equals(that._~eqha~);
	}

	@Override
	public int hashCode() {
		return java.util.Objects.hash(_~eqha~);
	}
~endif~

	@Override
	public void propertyChange(java.beans.PropertyChangeEvent evt) {
		this.pcs.firePropertyChange("~name~", this, evt);
	}
	
	public void addPropertyChangeListener(java.beans.PropertyChangeListener listener) {
		this.pcs.addPropertyChangeListener(listener);
	}

	public void removePropertyChangeListener(java.beans.PropertyChangeListener listener) {
		this.pcs.removePropertyChangeListener(listener);
	}

	~beanListener~
}  >>

boundedExternalListAccessors(type,name,className) ::= <<public java.util.List<~type~> get~name;format="capitalize"~() {
	return this._~name~;
}

public ~className~ add~name;format="capitalize"~(~type~ value) {
	this._~name~.add(value);
	this.pcs.firePropertyChange("add.~name~", null, value);
	return this;
}

public ~className~ remove~name;format="capitalize"~(~type~ value) {
	this._~name~.remove(value);
	this.pcs.firePropertyChange("remove.~name~", value, null);
	return this;
}  >>

boundedExternalReferenceAccessors(className,name,type) ::= <<public ~type~ get~name;format="capitalize"~() {
	return this._~name~;
}

public ~className;format="capitalize"~ set~name;format="capitalize"~(~type~ value) {
	~type~ oldValue = this._~name~;
	this._~name~ = value;
	this.pcs.firePropertyChange("set.~name~", oldValue, value);
	return this;
}

public ~className;format="capitalize"~ remove~name;format="capitalize"~() {
	~type~ oldValue = this._~name~;
	this._~name~ = null;
	this.pcs.firePropertyChange("remove.~name~", oldValue, null);
	return this;
}  >>

BeanListener(name,singleProperties,listProperties) ::= <<public static class ~name;format="capitalize"~ChangeListener implements java.beans.PropertyChangeListener {

	@Override
	public void propertyChange(java.beans.PropertyChangeEvent propertyChangeEvent) {
		switch (propertyChangeEvent.getPropertyName()) {
			
			case "~name;format="capitalize"~":
				on~name;format="capitalize"~Change((~name;format="capitalize"~) propertyChangeEvent.getOldValue(), (java.beans.PropertyChangeEvent) propertyChangeEvent.getNewValue());
				break;
				
~singleProperties:{it|
			case "set.~it.name~":
				onSet~it.name;format="capitalize"~((~it.type~) propertyChangeEvent.getOldValue(), (~it.type~) propertyChangeEvent.getNewValue());
				break;
			case "remove.~it.name~":
				onRemove~it.name;format="capitalize"~((~it.type~) propertyChangeEvent.getOldValue(), (~it.type~) propertyChangeEvent.getNewValue());
				break;
};separator="\n"~

~listProperties:{it|
			case "add.~it.name~":
				onAdd~it.name;format="capitalize"~((~it.type~) propertyChangeEvent.getOldValue(), (~it.type~) propertyChangeEvent.getNewValue());
				break;
			case "remove.~it.name~":
				onRemove~it.name;format="capitalize"~((~it.type~) propertyChangeEvent.getOldValue(), (~it.type~) propertyChangeEvent.getNewValue());
				break;
};separator="\n"~

		}
	}

	protected void on~name;format="capitalize"~Change(~name;format="capitalize"~ instance, java.beans.PropertyChangeEvent event) {
		log.info("on~name;format="capitalize"~Change " + instance + " " + event);
	}
	
~singleProperties:{it|
	protected void onSet~it.name;format="capitalize"~(~it.type~ oldValue, ~it.type~ newValue) {
		log.info("onSet~it.name;format="capitalize"~ " + oldValue + " " + newValue);
	~eom()~
	
	protected void onRemove~it.name;format="capitalize"~(~it.type~ oldValue, ~it.type~ newValue) {
		log.info("onRemove~it.name;format="capitalize"~ " + oldValue + " " + newValue);
	~eom()~
};separator="\n\n"~

~listProperties:{it|
	protected void onAdd~it.name;format="capitalize"~(~it.type~ oldValue, ~it.type~ newValue) {
		log.info("onAdd~it.name;format="capitalize"~ " + oldValue + " " + newValue);
	~eom()~
	
	protected void onRemove~it.name;format="capitalize"~(~it.type~ oldValue, ~it.type~ newValue) {
		log.info("onRemove~it.name;format="capitalize"~ " + oldValue + " " + newValue);
	~eom()~
};separator="\n\n"~
}  >>

boundedReferenceAccessors(className,name,type) ::= <<public ~type~ get~name;format="capitalize"~() {
	return this._~name~;
}

public ~className;format="capitalize"~ set~name;format="capitalize"~(~type~ value) {
	~type~ oldValue = this._~name~;
	if (oldValue != null) oldValue.removePropertyChangeListener(this);
	this._~name~ = value;
	if (value != null) value.addPropertyChangeListener(this);
	this.pcs.firePropertyChange("set.~name~", oldValue, value);
	return this;
}

public ~className;format="capitalize"~ remove~name;format="capitalize"~() {
	~type~ oldValue = this._~name~;
	this._~name~ = null;
	if (oldValue != null) oldValue.removePropertyChangeListener(this);
	this.pcs.firePropertyChange("remove.~name~", oldValue, null);
	return this;
}  >>

boundedPrimitiveAccessors(name,className,type) ::= <<public ~type~ get~name;format="capitalize"~() {
	return this._~name~;
}

public ~className;format="capitalize"~ set~name;format="capitalize"~(~type~ value) {
	~type~ oldValue = this._~name~;
	this._~name~ = value;
	this.pcs.firePropertyChange("set.~name~", oldValue, value);
	return this;
}  >>

boundedListReferenceAccessors(className,name,type) ::= <<public java.util.List<~type~> get~name;format="capitalize"~() {
	return this._~name~;
}

public ~className~ add~name;format="capitalize"~(~type~ value) {
	this._~name~.add(value);
	if (value != null) value.addPropertyChangeListener(this);
	this.pcs.firePropertyChange("add.~name~", null, value);
	return this;
}

public ~className~ remove~name;format="capitalize"~(~type~ value) {
	this._~name~.remove(value);
	if (value != null) value.removePropertyChangeListener(this);
	this.pcs.firePropertyChange("remove.~name~", value, null);
	return this;
}  >>

boundedListAccessors(className,name,type) ::= <<public java.util.List<~type~> get~name;format="capitalize"~() {
	return this._~name~;
}

public ~className~ add~name;format="capitalize"~(~type~ value) {
	this._~name~.add(value);
	this.pcs.firePropertyChange("add.~name~", null, value);
	return this;
}

public ~className~ remove~name;format="capitalize"~(~type~ value) {
	this._~name~.remove(value);
	this.pcs.firePropertyChange("remove.~name~", value, null);
	return this;
}  >>

Runnable(methods,statements,fields,name,packageName) ::= <<package ~if(packageName)~~packageName~~else~tmp~endif~;

public class ~name~ implements Runnable {

	~fields:{it|private final ~it.type~ ~it.name~;};separator="\n"~
	
	public ~name~(~fields:{it|~it.type~ ~it.name~};separator=", "~) {	
		~fields:{it|this.~it.name~ = ~it.name~;};separator="\n"~
	}
	
	@Override
	public void run() {
		~statements:{it|~it~};separator="\n"~
	}

	~methods:{it|~it~};separator="\n\n"~
}  >>

ValueObject(package,fields,name,lexical) ::= <<package ~package~;

public class ~name~ {

	private final java.util.UUID uuid;
	~fields:{it|public ~it.type~ _~it.name~~if(it.initializer)~ = ~it.initializer~~endif~;};separator="\n"~

	public ~name~() {
		this.uuid = java.util.UUID.randomUUID();
	}

	public ~name~(java.util.UUID uuid) {
		this.uuid = uuid;
	}

	public java.util.UUID getUuid() {
		return this.uuid;
	}	
	
	@Override
	public String toString() {
		return ~if(lexical)~~lexical:{it|_~it~};separator=" + \" \" + "~~else~this.uuid.toString()~endif~;
	}

	@Override
	public boolean equals(Object o) {
		if (this == o) return true;
		if (o == null || getClass() != o.getClass()) return false;
		~name~ that = (~name~) o;
		return uuid.equals(that.uuid);
	}

	@Override
	public int hashCode() {
		return java.util.Objects.hash(uuid);
	}
}  >>

Enum(name,enumValues,package) ::= <<package ~package~;

public enum ~name~ {

	~enumValues:{it|~it~};separator=",\n"~
}  >>

EnumValue(name,lexical) ::= <<~name~~if(lexical)~() {
	@Override
	public String toString() { return "~lexical~"; }
}~endif~ >>

Singleton(methods,name,fields,packageName) ::= <<package ~packageName~;

public final class ~name~ {

	private static ~name~ INSTANCE;
	~fields:{it|private ~it.type~ _~it.name~~if(it.initializer)~ = ~it.initializer~~endif~;};separator="\n"~

	private ~name~() {		  
	}

	public static synchronized ~name~ getInstance() {
		if (INSTANCE == null) INSTANCE = new ~name~();
		return INSTANCE;
	}

~fields:{it|
	public ~it.type~ get~it.name;format="capitalize"~() {
		return _~it.name~;
	~eom()~

	public ~name~ set~it.name;format="capitalize"~(~it.type~ value) {
		this._~it.name~ = value;
		return this;
	~eom()~
};separator="\n"~

	~methods:{it|~it~};separator="\n\n"~
}  >>

PojoFactory(name,entities,package) ::= <<package ~package~;

public class ~name;format="capitalize"~ {

~entities:{it|
	public static ~it~ new~it~() { 
		return new ~it~();
	~eom()~	
};separator="\n"~
}  >>

Pojo(accessors,lexical,fieldDeclarations,fields,package,name) ::= <<package ~package~;

public class ~name~ {

	private final java.util.UUID uuid;
	~fields:{it|private ~it.type~ _~it.name~~if(it.initializer)~ = ~it.initializer~~endif~;};separator="\n"~
	~fieldDeclarations:{it|~it~};separator="\n"~
	
	public ~name~() {
		this.uuid = java.util.UUID.randomUUID();
	}

	public ~name~(java.util.UUID uuid) {
		this.uuid = uuid;
	}

	public java.util.UUID getUuid() {
		return this.uuid;
	}	
	
	~accessors:{it|~it~};separator="\n\n"~
~if(lexical)~

	@Override
	public String toString() {
		return ~lexical:{it|_~it~};separator=" + \" \" + "~;
	}
~endif~

	@Override
	public boolean equals(Object o) {
		if (this == o) return true;
		if (o == null || getClass() != o.getClass()) return false;
		~name~ that = (~name~) o;
		return uuid.equals(that.uuid);
	}

	@Override
	public int hashCode() {
		return java.util.Objects.hash(uuid);
	}
}  >>

primitiveAccessors(className,type,name) ::= <<public ~type~ get~name;format="capitalize"~() {
	return this._~name~;
}

public ~className;format="capitalize"~ set~name;format="capitalize"~(~type~ value) {
	this._~name~ = value;
	return this;
}  >>

listAccessors(className,type,name) ::= <<public java.util.List<~type~> get~name;format="capitalize"~() {
	return this._~name~;
}

public ~className~ add~name;format="capitalize"~(~type~ value) {
	this._~name~.add(value);
	return this;
}

public ~className~ remove~name;format="capitalize"~(~type~ value) {
	this._~name~.remove(value);
	return this;
}  >>

referenceAccessors(name,type,className) ::= <<public ~type~ get~name;format="capitalize"~() {
	return this._~name~;
}

public ~className;format="capitalize"~ set~name;format="capitalize"~(~type~ value) {
	this._~name~ = value;
	return this;
}

public ~className;format="capitalize"~ remove~name;format="capitalize"~() {
	this._~name~ = null;
	return this;
} >>

Functions() ::= << >>

Interfaces() ::= << >>

Lambda(input,expression) ::= <<(~input:{it|~it~};separator=", "~) -> ~expression~  >>

Symbol(name,packageName) ::= <<package ~packageName~;

public interface ~name~ {
	
}  >>

Type(fields,name,lexical,packageName) ::= <<package ~packageName~;

public class ~name~ {

	public static Builder builder() { return new Builder(); }

	public static class Builder implements java.util.function.Supplier<~name~> {
	
		~fields:{it|private ~it.type~ _~it.name~;};separator="\n"~

		private Builder() { }
		
~fields:{it|
		public Builder ~it.name~(~it.type~ _~it.name~) {
			this._~it.name~ = _~it.name~;
			return this;
		~eom()~
};separator="\n\n"~
		@Override
		public ~name~ get() {
			return new ~name~(~fields:{it|_~it.name~};separator=", "~);
		}
	}

	private final java.util.UUID uuid;
	~fields:{it|private final ~it.type~ _~it.name~;};separator="\n"~
	
	public ~name~(~fields:{it|~it.type~ _~it.name~};separator=", "~) {
		this.uuid = java.util.UUID.randomUUID();
		~fields:{it|this._~it.name~ = _~it.name~;};separator="\n"~
	}

	public final java.util.UUID uuid() {
		return this.uuid;
	}	
	
	~fields:{it|public final ~it.type~ ~it.name~() {
		return _~it.name~;
	~eom()~
	};separator="\n"~
	
~if(lexical)~

	@Override
	public String toString() {
		return ~lexical:{it|_~it~};separator=" + \" \" + "~;
	}
~endif~

	@Override
	public boolean equals(Object o) {
		if (this == o) return true;
		if (o == null || getClass() != o.getClass()) return false;
		~name~ that = (~name~) o;
		return uuid.equals(that.uuid);
	}

	@Override
	public int hashCode() {
		return java.util.Objects.hash(uuid);
	}
}  >>

FunctionsFactory(packageName,name,types,extending,methods) ::= <<package ~packageName~;

public final class ~name~~if(extending)~ extends ~extending~~endif~ {

	~types:{it|~it~};separator="\n\n"~
	
	~methods:{it|~it~};separator="\n\n"~
}  >>

TypeFactoryMethod(type,name) ::= <<public static ~type~.Builder ~name~() {
	return ~type~.builder();	
}  >>

FunctionsFactoryMethod(arguments,name,type) ::= <<public static ~type~ ~name~(~arguments:{it|~it.type~ ~it.name~};separator=", "~) {
	return new ~type~(~arguments:{it|~it.name~};separator=", "~);	
}  >>

BiPredicate(U,packageName,T,expression,extending,name) ::= <<package ~packageName~;

public final class ~name~~if(extending)~ extends ~extending~~endif~ implements java.util.function.BiPredicate<~T~, ~U~> {
	
	@Override
	public boolean test(~T~ t, ~U~ u) {
		~expression~
	}
}  >>

BiFunction(name,extending,T,R,expression,packageName,U) ::= <<package ~packageName~;

public final class ~name~~if(extending)~ extends ~extending~~endif~ implements java.util.function.BiFunction<~T~, ~U~, ~R~> {
	
	@Override
	public ~R~ apply(~T~ t, ~U~ u) {
		~expression~
	}
}  >>

BiConsumer(expression,U,name,packageName,T,extending) ::= <<package ~packageName~;

public final class ~name~~if(extending)~ extends ~extending~~endif~ implements java.util.function.BiConsumer<~T~, ~U~> {
	
	@Override
	public void accept(~T~ t, ~U~ u) {
		~expression~
	}
}  >>

Consumer(T,extending,expression,name,packageName) ::= <<package ~packageName~;

public final class ~name~~if(extending)~ extends ~extending~~endif~ implements java.util.function.Consumer<~T~> {
	
	@Override
	public void accept(~T~ t) {
		~expression~
	}
}  >>

Supplier(expression,name,T,packageName,extending) ::= <<package ~packageName~;

public final class ~name~~if(extending)~ extends ~extending~~endif~ implements java.util.function.Supplier<~T~> {
	
	@Override
	public ~T~ get() {
		~expression~
	}
}  >>

Predicate(extending,name,packageName,T,expression) ::= <<package ~packageName~;

public final class ~name~~if(extending)~ extends ~extending~~endif~ implements java.util.function.Predicate<~T~> {
	
	@Override
	public boolean test(~T~ t) {
		~expression~
	}
}  >>

Function(name,O,packageName,expression,extending,I) ::= <<package ~packageName~;

public final class ~name~~if(extending)~ extends ~extending~~endif~ implements java.util.function.Function<~I~, ~O~> {
	
	@Override
	public ~O~ apply(~I~ input) {
		~expression~
	}
}  >>

Grammar() ::= << >>

ArrayCreationLevel(dimension) ::= <<[~dimension~] >>

Types() ::= << >>

ClassOrInterfaceType(isArrayType,typeArguments,isTyped,scope,names) ::= <<~if(scope)~~scope~.~endif~~names:{it|~it~};separator=" | "~~if(typeArguments)~<~typeArguments:{it|~it~};separator=", "~>~else~~if(isTyped)~<>~endif~~endif~~if(isArrayType)~[]~endif~ >>

TypeParameter(name,typeBounds) ::= <<~name~~if(typeBounds)~ extends ~typeBounds:{it|~it~};separator=" & "~~endif~ >>

Statements() ::= << >>

TryStmt(resources,catchClauses,finalClause,tryBlock) ::= <<try~if(resources)~ (~resources:{it|~it~};separator=";"~)~endif~ ~tryBlock~ ~catchClauses:{it|~it~}~~if(finalClause)~ finally ~finalClause~~endif~ >>

DoStmt(body,condition) ::= <<do ~body~ while (~condition~); >>

ExplicitConstructorInvocationStmt(arguments,isThis) ::= <<~if(isThis)~this~else~super~endif~(~arguments:{it|~it~};separator=", "~); >>

CatchClause(body,parameter) ::= <<catch (~parameter~) ~body~ >>

BlockStmt(statements,isStatic) ::= <<~if(isStatic)~ static~endif~ { ~if(statements)~
	~statements:{it|~it~};separator="\n"~
~endif~
} >>

BreakStmt(label) ::= <<break~if(label)~ ~label~~endif~; >>

EmptyStmt() ::= <<; >>

ForEachStmt(variable,iterable,body) ::= <<for (~variable~ : ~iterable~) ~body~ >>

AssertStmt(expression,message) ::= <<assert ~expression~~if(message)~ : ~message~~endif~; >>

IfStmt(condition,then,elseStmt) ::= <<if (~condition~) ~then~~if(elseStmt)~ 
else ~elseStmt~~endif~ >>

ForStmt(update,initialization,compare,body) ::= <<for (~initialization:{it|~it~};separator=", "~; ~compare~; ~update:{it|~it~};separator=", "~) ~body~ >>

ThrowStmt(expression) ::= <<throw ~expression~; >>

ReturnStmt(expression) ::= <<return~if(expression)~ ~expression~~endif~; >>

SwitchEntryStmt(statements,labels) ::= <<~if(labels)~~labels:{it|case ~it~ :};separator="\n"~~else~default :~endif~
	~statements:{it|~it~};separator="\n"~ >>

ContinueStmt(label) ::= <<continue~if(label)~ ~label~~endif~; >>

ExpressionStmt(expression,comment) ::= <<~if(comment)~//~comment~
~endif~~expression~;  >>

LabeledStmt(label,statement) ::= <<~label~ : 
	~statement~ >>

WhileStmt(body,condition) ::= <<while (~condition~) ~body~ >>

SynchronizedStmt(body,expression) ::= <<synchronized ( ~expression~ ) ~body~ >>

SwitchStmt(entries,selector) ::= <<switch(~selector~) {
	~entries:{it|~it~};separator="\n"~
} >>

Expressions() ::= << >>

ClassExpression(type) ::= <<~type~.class >>

ThisExpression(typeName) ::= <<this~if(typeName)~.~endif~~typeName~ >>

NameExpression(value) ::= <<~value~ >>

BinaryExpression(operator,left,right) ::= <<~left~ ~operator~ ~right~ >>

LongExpression(value) ::= <<~value~ >>

InstanceOfExpression(expression,type) ::= <<~expression~ instanceof ~type~ >>

FieldAccessExpression(scope,name) ::= <<~if(scope)~~scope~.~endif~~name~ >>

EnclosedExpression(expression) ::= <<(~expression~) >>

DoubleLiteralExpression(value) ::= <<~value~ >>

ConditionalExpression(thenExpression,elseExpression,condition) ::= <<~condition~ ? ~thenExpression~ : ~elseExpression~ >>

CharLiteralExpression(value) ::= <<~value~ >>

CastExpression(expression,type) ::= <<(~type~) ~expression~ >>

BooleanLiteralExpression(value) ::= <<~value~ >>

IntegerLiteralExpression(value) ::= <<~value~ >>

LambdaExpression(parameters,body) ::= <<(~parameters:{it|~it~};separator=", "~) -> ~body~ >>

MarkerAnnotationExpression(name) ::= <<@~name~ >>

MethodCallExpression(typeArguments,name,scope,arguments) ::= <<~if(scope)~~scope~.~endif~~if(typeArguments)~<~typeArguments:{it|~it~};separator=","~>~endif~~name~(~arguments:{it|~it~};separator=", "~) >>

MethodReferenceExpression(identifier,scope) ::= <<~scope~::~identifier~ >>

SingleMemberAnnotationExpression(members,name) ::= <<@~name~~if(members)~(~members:{it|~it~};separator=", "~)~endif~ >>

VariableDeclarationExpression(modifiers,variables) ::= <<~modifiers:{it|~it~};separator=" "~~if(modifiers)~ ~endif~~variables:{it|~it~};separator=", "~ >>

NullLiteralExpression(value) ::= <<~value~ >>

NormalAnnotationExpression(memberValues,name) ::= <<@~name~~if(memberValues)~(~memberValues:{it|~it~};separator=", "~)~endif~ >>

ObjectCreationExpression(emptyClassBody,typeArguments,type,anonymousClassBodies,arguments,scope) ::= <<new ~if(scope)~~scope~.~endif~~type~~if(typeArguments)~<~typeArguments:{it|~it~};separator=", "~>~endif~(~arguments:{it|~it~};separator=", "~)~if(anonymousClassBodies)~ {

	~anonymousClassBodies:{it|~it~};separator="\n"~

}~elseif(emptyClassBody)~ {
}~endif~ >>

UnaryExpression(isPostfix,expression,operator,isPrefix) ::= <<~if(isPrefix)~~operator~~endif~~expression~~if(isPostfix)~~operator~~endif~ >>

SuperExpression(typeName) ::= <<super~if(typeName)~.~endif~~typeName~ >>

ThisVariableExpression(value) ::= <<this.~value~ >>

StringLiteralExpression(value) ::= <<"~value~" >>

ArrayInitializerExpression(values) ::= <<{
	~values:{it|~it~};separator=",\n"~
} >>

ArrayCreationExpression(levels,initializer,type) ::= <<new ~type~~levels:{it|~it~}~~if(initializer)~ ~initializer~~endif~ >>

AssignThisVariableExpression(value) ::= <<~ThisVariableExpression(value)~ = ~value~ >>

AssignExpression(operator,value,target) ::= <<~target~ ~operator~ ~value~ >>

ArrayAccessExpression(name,index) ::= <<~name~[~index~] >>

JavaPackageInfo(packageName,interfaces,classes) ::= <<~packageName~

interfaces:
	~interfaces:{it|~it.name~};separator="\n"~

classes:
	~classes:{it|~it.name~};separator="\n"~ >>

MemberValuePair(name,value) ::= <<~name~ = ~value~ >>

QualifierName(value) ::= <<~value:{it|~it~};separator="."~ >>

CompilationUnit(importDeclaration,packageDeclaration,types) ::= <<~packageDeclaration~

~importDeclaration:{it|~it~};separator="\n"~

~types:{it|~it~};separator="\n\n"~ >>

ImportDeclaration(isAsterisk,name,isStatic) ::= <<import ~if(isStatic)~static ~endif~~name~~if(isAsterisk)~.*~endif~; >>

EnumDeclaration(name,members,annotations,implementedTypes,entries,extend,modifiers) ::= <<~annotations:{it|~it~};separator="\n"~~if(annotations)~
~endif~~modifiers:{it|~it~};separator=" "~~if(modifiers)~ ~endif~enum ~name~~if(extend)~ extends ~extend:{it|~it~};separator=", "~~endif~~if(implementedTypes)~ implements ~implementedTypes:{it|~it~};separator=","~~endif~ {

	~entries:{it|~it~};separator=",\n"~~if(members)~;~endif~

	~members:{it|~it~};separator="\n\n"~
} >>

EnumConstant(methods,arguments,name,annotations) ::= <<~annotations:{it|~it~};separator="\n"~~if(annotations)~
~endif~~name~~if(arguments)~(~arguments:{it|~it~};separator=","~)~endif~~if(methods)~ {
	~methods:{it|~it~};separator="\n"~
}~endif~ >>

ClassOrInterfaceDeclaration(annotations,comments,isInterface,modifiers,name,typeParameters,extend,implementedTypes,fields,members) ::= <<~comments:{it|~it~};separator="\n"~~if(comments)~
~endif~~annotations:{it|~it~};separator="\n"~~if(annotations)~
~endif~~modifiers:{it|~it~};separator=" "~~if(modifiers)~ ~endif~~if(isInterface)~interface ~else~class ~endif~~name~~if(typeParameters)~<~typeParameters:{it|~it~};separator=", "~>~endif~~if(extend)~ extends ~extend:{it|~it~};separator=", "~~endif~~if(implementedTypes)~ implements ~implementedTypes:{it|~it~};separator=", "~~endif~ {
	
	~fields:{it|~it~};separator="\n"~
	~if(fields)~
	
	~endif~
	~members:{it|~it~};separator="\n\n"~
} >>

FieldDeclaration(modifiers,variables,annotations) ::= <<~annotations:{it|~it~};separator="\n"~~if(annotations)~
~endif~~modifiers:{it|~it~};separator=" "~~if(modifiers)~ ~endif~~variables:{it|~it~};separator=", "~; >>

ConstructorDeclaration(name,blockStmt,modifiers,annotations,thrownExceptions,typeParameters,parameters) ::= <<~annotations:{it|~it~};separator="\n"~~if(annotations)~
~endif~~modifiers:{it|~it~};separator=" "~~if(modifiers)~ ~endif~~if(typeParameters)~~typeParameters:{it|<~it~>};separator=" "~ ~endif~~name~(~parameters:{it|~it~};separator=", "~)~if(thrownExceptions)~ throws ~thrownExceptions:{it|~it~};separator=", "~ ~endif~~if(blockStmt)~~blockStmt~~else~ { }~endif~ >>

Declarations() ::= << >>

MethodDeclaration(type,typeParameters,annotations,modifiers,blockStmt,thrownExceptions,isInterfaceDeclaration,name,parameters) ::= <<~annotations:{it|~it~};separator="\n"~~if(annotations)~
~endif~~modifiers:{it|~it~};separator=" "~~if(modifiers)~ ~endif~~if(type)~~if(typeParameters)~<~typeParameters:{it|~it~};separator=", "~>~endif~~type~ ~else~void ~endif~~name~(~parameters:{it|~it~};separator=", "~)~if(thrownExceptions)~ throws ~thrownExceptions:{it|~it~};separator=", "~~endif~~if(isInterfaceDeclaration)~;~else~~if(blockStmt)~~blockStmt~~else~ { }~endif~~endif~  >>

Parameter(name,isVarargs,modifiers,type,annotations) ::= <<~annotations:{it|~it~};separator=" "~~if(annotations)~ ~endif~~modifiers:{it|~it~};separator=" "~~if(modifiers)~ ~endif~~if(type)~~type~ ~endif~~if(isVarargs)~... ~endif~~name~ >>

PackageDeclaration(name) ::= <<package ~name~;  >>

ModuleDeclaration(usesDirective,providesDirective,opens,exportsDirective,requiresDirective,name) ::= <<module ~name~ {
    ~requiresDirective:{it|requires ~it~};separator="\n"~
    ~exportsDirective:{it|exports ~it~};separator="\n"~
    ~providesDirective:{it|provides ~it~};separator="\n"~
    ~usesDirective:{it|uses ~it~};separator="\n"~
    ~opens:{it|opens ~it~};separator="\n"~
} >>

FinalFieldDeclaration(type,initializer,name) ::= <<final ~VariableDeclaration(initializer,name,type)~; >>

AnnotationMemberDeclaration(type,name,defaultValue) ::= <<~type~ ~name~()~if(defaultValue)~ default ~defaultValue~~endif~; >>

AnnotationDeclaration(members,modifiers,name,annotations) ::= <<~annotations:{it|~it~};separator="\n"~~if(annotations)~
~endif~~modifiers:{it|~it~};separator=" "~~if(modifiers)~ ~endif~@interface ~name~ {
	~members:{it|~it~};separator="\n"~
} >>

StaticPrivateFinalFieldDeclaration(type,name,initializer) ::= <<static final ~VariableDeclaration(initializer,name,type)~; >>

staticPublicFinalFieldDeclaration(initializer,type,name) ::= <<static public final ~VariableDeclaration(initializer,name,type)~; >>

VariableDeclaration(name,type,initializer) ::= <<~if(type)~~type~ ~endif~~name~~if(initializer)~ = ~initializer~~endif~ >>

PrivateFieldDeclaration(initializer,name,type) ::= <<private ~VariableDeclaration(initializer,name,type)~; >>

PrivateFinalFieldDeclaration(initializer,name,type) ::= <<private final ~VariableDeclaration(initializer,name,type)~; >>

PublicFinalFieldDeclaration(initializer,name,type) ::= <<public final ~VariableDeclaration(initializer,name,type)~; >>

StaticFinalFieldDeclaration(initializer,name,type) ::= <<static final ~VariableDeclaration(initializer,name,type)~; >>

JavaCompiler(packageName,name,methods) ::= <<package ~packageName~;

class ~name~ {

   private static final java.io.PrintStream log = System.out;

   public static void main(String[] args) throws java.io.IOException {

      final String newClass = "NEWCLASS";
      final java.nio.file.Path copypath = copy("/home/goe/projects/compiler/src/main/java", ".java", "CLASS", newClass);

      assert copypath != null;
      final Class<?> aClass = compile(newClass, java.nio.file.Files.readString(copypath));

      assert aClass != null;
      final Object anObject = instanceOf(aClass, 0, null);

      assert anObject != null;
      apply(anObject, 0, null);
   }

	~methods:{it|~it~};separator="\n\n"~

   private static Class<?> compile(String name, String source) {
      log.println(java.util.Arrays.toString(new String[]{"compile", name, source}));
      try {
         return net.openhft.compiler.CompilerUtils.CACHED_COMPILER.loadFromJava(name, source);
      } catch (Throwable e) {
         error(e);
         return null;
      }
   }

   private static Object instanceOf(Class<?> aClass, int constructor, Object[] args) {
      assert aClass != null;
      log.println(java.util.Arrays.toString(new String[]{"instantiate", aClass.toString(), Integer.toString(constructor), java.util.Arrays.toString(args)}));

      final java.lang.reflect.Constructor<?>[] declaredConstructors = aClass.getDeclaredConstructors();
      final java.lang.reflect.Constructor<?> declaredConstructor = declaredConstructors[constructor];
      try {
         if (args == null) return declaredConstructor.newInstance();
         else return declaredConstructor.newInstance(args);
      } catch (Throwable e) {
         error(e);
         return null;
      }
   }

   private static void apply(Object anObject, int method, Object[] args) {
      log.println(java.util.Arrays.toString(new String[]{"invoke", anObject.toString(), Integer.toString(method), java.util.Arrays.toString(args)}));

      final java.lang.reflect.Method[] methods = anObject.getClass().getMethods();
      try {
         if (args == null) methods[method].invoke(anObject);
         else methods[method].invoke(anObject, args);
      } catch (Throwable e) {
         error(e);
      }
   }

   private static void error(Throwable e) {
      log.println(java.util.Arrays.toString(new String[]{"!", e.getClass().getCanonicalName(), e.getMessage(), java.util.Arrays.toString(e.getStackTrace())}));
   }
}  >>

JCMethod(O,apply,IN,T,name) ::= <<private static~if(T)~ ~T~~endif~ ~name~(~IN:{it|~it.type~ ~it.value~};separator=", "~) {
	log.println(java.util.Arrays.toString(new String[]{"~name~", ~IN:{it|~it.value~};separator=", "~}));
	try {
		~apply~
		~if(O)~return ~O~~endif~
	} catch (Throwable e) {
		error(e);
		return null;
	}
}  >>

JavaLibrary(name,packages) ::= <<~name~

~packages:{it|~it~};separator="\n\n"~  >>

JavaPackage(name,types) ::= <<~name~
~types:{it|~it~};separator="\n"~  >>

JavaType(packageName,name) ::= <<~packageName~.~name~  >>

Streams() ::= << >>

Stream(elements) ::= <<~elements:{it|~it~};separator="."~  >>

distinct() ::= <<distinct()  >>

concat(two,one) ::= <<concat(~one~,~two~)  >>

anyMatch(predicate) ::= <<anyMatch(~predicate~)  >>

allMatch(predicate) ::= <<allMatch(~predicate~)  >>

Utils() ::= << >>

PasswordUtils(name,packageName) ::= <<package ~packageName~;

import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.spec.InvalidKeySpecException;
import java.util.Arrays;
import java.util.Base64;
import java.util.Random;

public class ~name~ {

    private static final Random RANDOM = new SecureRandom();
    private static final String ALPHABET = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
    private static final int ITERATIONS = 10000;
    private static final int KEY_LENGTH = 256;

    public static String getSalt(int length) {
        StringBuilder returnValue = new StringBuilder(length);
        for (int i = 0; i < length; i++)
            returnValue.append(ALPHABET.charAt(RANDOM.nextInt(ALPHABET.length())));
        return new String(returnValue);
    }

    public static byte[] hash(char[] password, byte[] salt) {
        final PBEKeySpec spec = new PBEKeySpec(password, salt, ITERATIONS, KEY_LENGTH);
        Arrays.fill(password, Character.MIN_VALUE);
        try {
            SecretKeyFactory skf = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA1");
            return skf.generateSecret(spec).getEncoded();
        } catch (NoSuchAlgorithmException | InvalidKeySpecException e) {
            throw new AssertionError("Error while hashing a password: " + e.getMessage(), e);
        } finally {
            spec.clearPassword();
        }
    }

    public static String generateSecurePassword(String password, String salt) {
        String returnValue;
        byte[] securePassword = hash(password.toCharArray(), salt.getBytes());
        returnValue = Base64.getEncoder().encodeToString(securePassword);
        return returnValue;
    }

    public static boolean verifyUserPassword(String providedPassword, String securedPassword, String salt) {
        final String newSecurePassword = generateSecurePassword(providedPassword, salt);
        return newSecurePassword.equalsIgnoreCase(securedPassword);
    }
}  >>

eom() ::= "}"

gt() ::= ">"
