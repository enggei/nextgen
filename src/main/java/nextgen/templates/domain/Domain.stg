delimiters "~","~"

Domain(properties,name) ::= <<~name~
	~properties:{it|~it.name~	~it.quantifier~	~it.type~~if(it.decl)~
    
	~it.decl~
~endif~};separator="\n"~  >>

DomainProcessor(i,transforms,parameters,domains,packageName,name) ::= <<package ~packageName~;

import domain.meta.*;
import nextgen.st.STGenerator;
import nextgen.templates.domain.*;

import java.util.*;

import static domain.meta.MetaDomain.Quantifier.*;

public class ~name~ {

   ~domains:{it|~it~};separator="\n\n"~

	public static MetaDomainFactory newDomain(String name) {
		return new MetaDomainFactoryImpl(name);
	}
	
	public static MetaDomain.MetaProperty enumerate(MetaDomainFactory domain, String value) {
		return domain.newMetaProperty(value);
	}
	
	public static MetaDomainFactory.MetaPropertyBuilder many(MetaDomainFactory domain, String name, String type, MetaDomain typeDeclaration) {
		return domain.newMetaProperty(name)
				.setquantifier(MANY)
				.settype(type)
				.settypeDeclaration(typeDeclaration);
	}
	
	public static MetaDomainFactory.MetaPropertyBuilder many(MetaDomainFactory domain, String name, String type) {
		return many(domain, name, type, null);
	}
	
	public static MetaDomain.MetaProperty single(MetaDomainFactory domain, String name, String type, MetaDomain typeDeclaration) {
		return domain.newMetaProperty(name)
				.setname(name)
				.setquantifier(ONE)
				.settype(type)
				.settypeDeclaration(typeDeclaration);
	}
	
	public static MetaDomain.MetaProperty single(MetaDomainFactory domain, String name, String type) {
		return single(domain, name, type, null);
	}
	
	public static MetaDomain.MetaProperty optional(MetaDomainFactory domain, String name, String type, MetaDomain typeDeclaration) {
		return domain.newMetaProperty(name)
				.setname(name)
				.setquantifier(OPTIONAL)
				.settype(type)
				.settypeDeclaration(typeDeclaration);
	}
	
	public static MetaDomain.MetaProperty optional(MetaDomainFactory domain, String name, String type) {
		return optional(domain, name, type, null);
	}

   interface DomainTransformer<T> {

      T transform(MetaDomain domain);
   }

   ~TemplateTransformer()~

   public static void main(String[] args) {

		final String root = args.length <= 0 ? "./src/main/java" : args[0];
		~parameters:{it|final String ~it.name~ = args.length <= ~i~ ? ~if(it.defaultValue)~~it.defaultValue~~else~"./src/main/java"~endif~ : args[~i~];};separator="\n"~
		
		final MetaDomain metaDomain = nextgenDomain();
		
~transforms:{it|
		final ~it.type~ ~it.type;format="lowFirst"~ = new ~it.name~(~parameters:{it|~it.name~};separator=", "~).transform(metaDomain);~if(it.writeJavaFile)~
		STGenerator.writeJavaFile(~it.type;format="lowFirst"~, ~it.type;format="lowFirst"~.getPackageName().toString(), ~it.type;format="lowFirst"~.getName(), root);
~endif~};separator="\n"~
   }	
}  >>

DomainDeclaration(entities,properties,name) ::= <<public static MetaDomain new~name;format="capitalize"~() {

	final MetaDomainFactory domain = new MetaDomainFactoryImpl("~name;format="capitalize"~");
	
	~entities:{it|~it~};separator="\n\n"~

	~properties:{it|domain.addproperties(~it.quantifier~(domain, "~it.name~"~if(it.type)~, "~it.type~"~if(it.typeDeclaration)~, ~it.typeDeclaration~~endif~~endif~));};separator="\n"~
	
	return domain;
}  >>

DomainEntityDeclaration(properties,name) ::= <<final MetaDomainFactory ~name~ = newDomain("~name~")
		~properties:{it|.addproperties(~it.quantifier~(domain, "~it.name~"~if(it.type)~, "~it.type~"~if(it.typeDeclaration)~, ~it.typeDeclaration~~endif~~endif~))};separator="\n"~;  >>

TemplateTransformer() ::= <<public static abstract class TemplateDomainTransformer<T> implements DomainTransformer<T> {

	@Override
	public T transform(MetaDomain domain) {

		onDomain(domain);

		domain.properties()
				.filter(metaProperty -> metaProperty.type().isPresent())
				.forEach(this::onProperty);

		final Set<MetaDomain> entities = getEntities(domain);
		for (MetaDomain entity : entities) onEntity(entity);

		return onComplete();
	}

	public abstract void onDomain(MetaDomain domain);

	public abstract void onProperty(MetaDomain.MetaProperty metaProperty);

	public abstract void onEntity(MetaDomain entity);

	public abstract T onComplete();

	public boolean isInterface(MetaDomain entity) {
		return entity.properties().anyMatch(metaProperty -> metaProperty.quantifier().isPresent());
	}

	protected Object quantifier(MetaDomain.MetaProperty metaProperty) {
		return metaProperty.quantifier().orElse(null);
	}
	
	protected Object name(MetaDomain.MetaProperty metaProperty) {
		return metaProperty.name();
	}
	
	protected Object type(MetaDomain.MetaProperty metaProperty) {
		return metaProperty.type().orElse(null);
	}
	
	protected Object typeDeclaration(MetaDomain.MetaProperty metaProperty) {
		return metaProperty.typeDeclaration().orElse(null);
	}

	Set<MetaDomain> getEntities(MetaDomain domain) {
		final LinkedHashSet<MetaDomain> set = new LinkedHashSet<>();

		domain.properties()
				.filter(metaProperty -> metaProperty.typeDeclaration().isPresent())
				.map(metaProperty -> metaProperty.typeDeclaration().get())
				.forEach(metaDomain -> addEntity(metaDomain, set));

		return set;
	}

	private void addEntity(MetaDomain domain, LinkedHashSet<MetaDomain> set) {
		set.add(domain);
		domain.properties()
				.filter(metaProperty -> metaProperty.typeDeclaration().isPresent())
				.map(metaProperty -> metaProperty.typeDeclaration().get())
				.forEach(metaDomain -> addEntity(metaDomain, set));
	}
}  >>

TemplateTransformerImpl(mapName,mapTypeDeclaration,mapType,mapQuantifier,fields,packageName,onComplete,onEntity,onProperty,onDomain,init,properties,methods,T,name) ::= <<package ~packageName~;

import nextgen.templates.domain.*;
import java.util.*;
import static domain.DomainProcessor.*;

public class ~name~ extends TemplateDomainTransformer<~T~> {

	final ~T~ result = ~init~;
	
	~fields:{it|final ~it.type~ ~it.name~ = ~it.init~;};separator="\n"~
	~properties:{it|~it.type~ ~it.name~;};separator="\n"~
	
	public ~name~(~properties:{it|~it.type~ ~it.name~};separator=", "~) {
		~properties:{it|this.~it.name~ = ~it.name~;};separator="\n"~
	}

	@Override
	public void onDomain(MetaDomain domain) {
		~onDomain:{it|~it~};separator="\n"~
	}

	@Override
	public void onProperty(MetaDomain.MetaProperty metaProperty) {
		~onProperty:{it|~it~};separator="\n"~
	}

	@Override
	public void onEntity(MetaDomain entity) {
		~onEntity:{it|~it~};separator="\n"~
	}

	@Override
	public ~T~ onComplete() {
		~onComplete:{it|~it~};separator="\n"~
		return result;
	}

~if(mapQuantifier)~
	@Override
	public Object quantifier(MetaDomain.MetaProperty metaProperty) {
		~mapQuantifier:{it|~it~}~
	}
~endif~
~if(mapName)~
	@Override
	public Object name(MetaDomain.MetaProperty metaProperty) {
		~mapName:{it|~it~}~
	}
~endif~
~if(mapType)~
	@Override
	public Object type(MetaDomain.MetaProperty metaProperty) {
		~mapType:{it|~it~}~
	}
~endif~
~if(mapTypeDeclaration)~
	@Override
	public Object typeDeclaration(MetaDomain.MetaProperty metaProperty) {
		~mapTypeDeclaration:{it|~it~}~
	}
~endif~

	~methods:{it|~it~};separator="\n\n"~
}  >>

toFactory(methods,domain,properties,entities,name,packageName) ::= <<package ~packageName~;

public interface ~name~ extends ~domain~ {
	
	~properties:{it|~name~ ~it.name~(~it.type~ value);};separator="\n"~
	
	~entities:{it|~it~};separator="\n\n"~

	~methods:{it|~it~};separator="\n\n"~
}  >>

defaultFactoryImpl(methods,requiredProperties,properties,entities,factory,name,packageName) ::= <<package ~packageName~;

import domain.meta.*;

import static domain.DomainProcessor.*;

public class ~name~ implements ~factory~ {

	~properties:{it|~if(it.init)~ final~endif~ ~it.impl~ ~it.name~~if(it.init)~ = ~it.init~~endif~;};separator="\n"~

	public ~name~(~requiredProperties:{it|~it.type~ ~it.name~};separator=", "~) {
		~requiredProperties:{it|this.~it.name~ = ~it.name~;};separator="\n"~
	}
	
~properties:{it|
	@Override
	public ~it.type~ ~it.name~() { return ~it.getter~; ~eom()~

	@Override
	public ~factory~ ~it.methodName~(~it.element~ element) { ~it.assign~; return this; ~eom()~
};separator="\n"~
	~entities:{it|~it~};separator="\n\n"~

	~methods:{it|~it~};separator="\n\n"~
}  >>

defaultEntityImpl(requiredProperties,properties,type,name) ::= <<@Override 
public ~type~Builder new~name;format="capitalize"~(~requiredProperties:{it|~it.type~ ~it.name~};separator=", "~) { return new ~type~BuilderImpl(~requiredProperties:{it|~it.name~};separator=", "~); }

public static final class ~type~BuilderImpl implements ~type~Builder {

	~properties:{it| private~if(it.init)~ final~endif~ ~it.impl~ ~it.name~~if(it.init)~ = ~it.init~~endif~;};separator="\n"~

	~type~BuilderImpl(~requiredProperties:{it|~it.type~ ~it.name~};separator=", "~) {
		~requiredProperties:{it|this.~it.name~ = ~it.name~;};separator="\n"~
	}

~properties:{it|
	@Override
	public ~it.type~ ~it.name~() { return ~it.getter~; ~eom()~
	
	@Override 
	public ~type~Builder ~it.methodName~(~it.element~ element) { ~it.assign~; return this; ~eom()~
};separator="\n"~
}  >>

factoryEntity(requiredProperties,properties,name,type) ::= <<~type~Builder new~name;format="capitalize"~(~requiredProperties:{it|~it.type~ ~it.name~};separator=", "~);

interface ~type~Builder extends ~type~ {
	~properties:{it|~type~Builder ~it.methodName~(~it.type~ element);};separator="\n"~
}  >>

toForm(properties,packageName,name) ::= <<~if(packageName)~package ~packageName~;
~endif~
public class ~name~ extends javax.swing.JPanel {

	~properties:{it|~if(it.decl)~~else~~it.type~ get~it.name;format="capitalize"~();~endif~};separator="\n"~
	~properties:{it|~if(it.decl)~

~it.decl~~endif~};separator="\n"~
}  >>

toInterfaces(properties,domains,name,packageName) ::= <<~if(packageName)~package ~packageName~;

public ~endif~interface ~name~ {

	~properties:{it|~it.type~ ~it.name~();};separator="\n"~
	
	~domains:{it|~it~};separator="\n\n"~
}  >>

toEnum(properties,name) ::= <<enum ~name~ {
	
	~properties:{it|~it.name;format="capitalize"~};separator=",\n"~
	
}  >>

toInterface(properties,name) ::= <<interface ~name~ {
	
	~properties:{it|~it.type~ ~it.name~();};separator="\n"~
	
}  >>

eom() ::= "}"

gt() ::= ">"
