{
  "uuid" : "68548572-6e3a-48dd-a96e-2d23030ba650",
  "name" : "Vertx",
  "delimiter" : "~",
  "stgFile" : "/home/goe/projects/nextgen/components/core/src/main/resources/templates/Vertx.stg",
  "templates" : [ {
    "uuid" : "58f87deb-08cb-4f64-bb55-d28f76acb9c7",
    "name" : "Entities",
    "text" : "",
    "children" : [ {
      "uuid" : "4a756317-c8b7-44c4-a677-68c57d064ab6",
      "name" : "JsonWrapper",
      "text" : "package ~package~;\n\npublic class ~name;format=\"capitalize\"~ {\n\n\tprivate final io.vertx.core.json.JsonObject jsonObject;\n\t~externalFields:{it|private ~it.type~ _~it.name~~if(it.initializer)~ = ~it.initializer~~endif~;};separator=\"\\n\"~\n\n\tpublic ~name;format=\"capitalize\"~() { \n\t\tthis.jsonObject = new io.vertx.core.json.JsonObject();\n\t\tjsonObject.put(\"uuid\", java.util.UUID.randomUUID().toString());\n\t}\n\n\tpublic ~name;format=\"capitalize\"~(io.vertx.core.json.JsonObject jsonObject) { \n\t\tthis.jsonObject = jsonObject;\n\t\tjava.lang.String uuidString = jsonObject.getString(\"uuid\");\n\t\tif (uuidString == null) jsonObject.put(\"uuid\", java.util.UUID.randomUUID().toString());\n\t}\n\n\tpublic io.vertx.core.json.JsonObject getJsonObject() { \n\t\treturn this.jsonObject;\n\t}\n\n\tpublic String uuid() {\n\t\treturn this.jsonObject.getString(\"uuid\");\n\t}\n\n\tpublic ~name;format=\"capitalize\"~ removeUuid() {\n\t\tthis.jsonObject.remove(\"uuid\");\n\t\treturn this;\n\t}\n\n\t@Override\n\tpublic boolean equals(java.lang.Object o) { \n\t\tif (this == o) return true;\n\t\tif (o == null || getClass() != o.getClass()) return false;\n\t\tfinal ~name;format=\"capitalize\"~ other = (~name;format=\"capitalize\"~) o;\n\t\treturn jsonObject.getString(\"uuid\").equals(other.getJsonObject().getString(\"uuid\"));\n\t}\n\n\t@Override\n\tpublic int hashCode() { \n\t\treturn java.util.Objects.hash(jsonObject.getString(\"uuid\"));\n\t}\n\n\t~accessors:{it|~it~};separator=\"\\n\\n\"~\n\n\t~neoNodeMapper~\n\n\t@Override\n\tpublic java.lang.String toString() { \n\t\treturn ~if(lexical)~jsonObject.getString(\"~lexical~\")~else~jsonObject.encode()~endif~;\n\t}\n} ",
      "parameters" : [ {
        "uuid" : "4d639a81-c7d5-4a31-aeb7-dc34b6e37a3d",
        "name" : "package",
        "type" : "SINGLE",
        "argumentType" : "String"
      }, {
        "uuid" : "cf2cc501-9e14-4e59-bec9-ef952a1d4da6",
        "name" : "name",
        "type" : "SINGLE",
        "argumentType" : "String"
      }, {
        "uuid" : "a9ef4ef0-acf7-4c48-bedf-26d2cd61115f",
        "name" : "externalFields",
        "type" : "KVLIST",
        "argumentType" : "Object",
        "keys" : [ {
          "uuid" : "b56fa0c7-a7b9-4356-93a7-25d613fc3aff",
          "name" : "type",
          "argumentType" : "Object"
        }, {
          "uuid" : "bdb93ebe-322c-44c6-baa6-2d6f4cfe463f",
          "name" : "name",
          "argumentType" : "String"
        }, {
          "uuid" : "0a68c542-044e-4b17-ae24-8f70484e3b15",
          "name" : "initializer",
          "argumentType" : "Object"
        } ]
      }, {
        "uuid" : "733aec27-d21b-4751-82ab-02207cf0feae",
        "name" : "accessors",
        "type" : "LIST",
        "argumentType" : "Object"
      }, {
        "uuid" : "9884634b-6558-45f7-8c41-756730c2261b",
        "name" : "neoNodeMapper",
        "type" : "SINGLE",
        "argumentType" : "Object"
      }, {
        "uuid" : "4eec6de0-1ca1-4d42-9bcb-2d4e3ddb5210",
        "name" : "lexical",
        "type" : "SINGLE",
        "argumentType" : "Object"
      } ],
      "children" : [ {
        "uuid" : "f9d01bcc-c94a-4a4f-adaf-e0cf9715b3ea",
        "name" : "primitiveAccessors",
        "text" : "public ~className;format=\"capitalize\"~ set~name;format=\"dotToCap\"~(~type~ value) { \n\tjsonObject.put(\"~name~\", value);\n\treturn this;\n}\n\npublic ~type~ get~name;format=\"dotToCap\"~() { \n\treturn jsonObject.get~type;format=\"capitalize\"~(\"~name~\");\n}\n\npublic ~type~ get~name;format=\"dotToCap\"~(~type~ defaultValue) { \n\treturn jsonObject.get~type;format=\"capitalize\"~(\"~name~\", defaultValue);\n}",
        "parameters" : [ {
          "uuid" : "4d6a3810-7799-4600-b42f-6aec6f8c77df",
          "name" : "className",
          "type" : "SINGLE",
          "argumentType" : "Object"
        }, {
          "uuid" : "e51f43a5-beb1-46dd-b574-bc8944b42f3a",
          "name" : "name",
          "type" : "SINGLE",
          "argumentType" : "Object"
        }, {
          "uuid" : "71dee823-dc69-41ad-a058-8b1122e5da93",
          "name" : "type",
          "type" : "SINGLE",
          "argumentType" : "Object"
        } ]
      }, {
        "uuid" : "23f3083f-6cd5-47ab-8c39-bce21da141ab",
        "name" : "listReferenceAccessors",
        "text" : "public ~className;format=\"capitalize\"~ add~name;format=\"capitalize\"~(~type~ value) { \n\tio.vertx.core.json.JsonArray jsonArray = jsonObject.getJsonArray(\"~name~\");\n\tif (jsonArray == null) jsonObject.put(\"~name~\", jsonArray = new io.vertx.core.json.JsonArray());\n\tjsonArray.add(value.getJsonObject());\n\treturn this;\n}\n\npublic java.util.stream.Stream<~type~> get~name;format=\"capitalize\"~() { \n\treturn jsonObject.getJsonArray(\"~name~\", new io.vertx.core.json.JsonArray()).stream().map((o) -> new ~type~((io.vertx.core.json.JsonObject) o));\n}\n\npublic ~className;format=\"capitalize\"~ remove~name;format=\"capitalize\"~(~type~ value) { \n\tfinal io.vertx.core.json.JsonArray jsonArray = jsonObject.getJsonArray(\"~name~\", new io.vertx.core.json.JsonArray());\n\tfor (int i = 0; i < jsonArray.size(); i++)  { \n\t\tfinal io.vertx.core.json.JsonObject o = jsonArray.getJsonObject(i);\n\t\tif (value.getJsonObject().getString(\"uuid\").equals(o.getString(\"uuid\")))  { \n\t\t\tjsonArray.remove(i);\n\t\t\treturn this;\n\t\t}\n\t}\n\treturn this;\n}\n\npublic ~className;format=\"capitalize\"~ clear~name;format=\"capitalize\"~() { \n\tjsonObject.put(\"~name~\", new io.vertx.core.json.JsonArray());\n\treturn this;\n}",
        "parameters" : [ {
          "uuid" : "80b97977-d278-4905-bfd1-19a065b4979c",
          "name" : "className",
          "type" : "SINGLE"
        }, {
          "uuid" : "db61ef5a-03ab-4d36-9f88-80a3097a4373",
          "name" : "name",
          "type" : "SINGLE"
        }, {
          "uuid" : "9695d63e-90d4-42b1-98e1-13071b09e877",
          "name" : "type",
          "type" : "SINGLE"
        } ]
      }, {
        "uuid" : "f6ed57f1-6238-4590-82e1-27aff0ecf302",
        "name" : "referenceAccessors",
        "text" : "public ~className;format=\"capitalize\"~ set~name;format=\"capitalize\"~(~type~ value) { \n\tjsonObject.put(\"~name~\", value.getJsonObject());\n\treturn this;\n}\n\npublic ~type~ get~name;format=\"capitalize\"~() { \n\treturn jsonObject.getJsonObject(\"~name~\") == null ? null : new ~type~(jsonObject.getJsonObject(\"~name~\"));\n}",
        "parameters" : [ {
          "uuid" : "5a5b52f3-5f4c-48c7-a5b3-2ed08eeb1444",
          "name" : "className",
          "type" : "SINGLE"
        }, {
          "uuid" : "d9c8fdc9-1589-406c-a6e7-473c8514e859",
          "name" : "name",
          "type" : "SINGLE"
        }, {
          "uuid" : "a0e59457-2f46-449b-8102-88371e0bf625",
          "name" : "type",
          "type" : "SINGLE"
        } ]
      }, {
        "uuid" : "41c43c9b-5829-4dcf-8e64-c9130cd1ddae",
        "name" : "listPrimitiveAccessors",
        "text" : "public ~className;format=\"capitalize\"~ add~name;format=\"capitalize\"~(~type~ value) { \n\tio.vertx.core.json.JsonArray jsonArray = jsonObject.getJsonArray(\"~name~\");\n\tif (jsonArray == null) jsonObject.put(\"~name~\", jsonArray = new io.vertx.core.json.JsonArray());\n\tjsonArray.add(value);\n\treturn this;\n}\n\npublic java.util.stream.Stream<~type~> get~name;format=\"capitalize\"~() { \n\treturn jsonObject.getJsonArray(\"~name~\", new io.vertx.core.json.JsonArray()).stream().map((o) -> (~type~)o);\n}\n\npublic ~className;format=\"capitalize\"~ remove~name;format=\"capitalize\"~(~type~ value) { \n\tfinal io.vertx.core.json.JsonArray jsonArray = jsonObject.getJsonArray(\"~name~\", new io.vertx.core.json.JsonArray());\n\tfor (int i = 0; i < jsonArray.size(); i++)  { \n\t\tfinal io.vertx.core.json.JsonObject o = jsonArray.getJsonObject(i);\n\t\tif (value.equals(o))  { \n\t\t\tjsonArray.remove(i);\n\t\t\treturn this;\n\t\t}\n\t}\n\treturn this;\n}\n\npublic ~className;format=\"capitalize\"~ clear~name;format=\"capitalize\"~() { \n\tjsonObject.put(\"~name~\", new io.vertx.core.json.JsonArray());\n\treturn this;\n}",
        "parameters" : [ {
          "uuid" : "ad223fc1-12e5-47b8-ac94-40a00e31cfb5",
          "name" : "className",
          "type" : "SINGLE",
          "argumentType" : "Object"
        }, {
          "uuid" : "fe8a0752-dcb3-483e-88c0-1a0dbccd2cea",
          "name" : "name",
          "type" : "SINGLE",
          "argumentType" : "Object"
        }, {
          "uuid" : "eb79aa9f-3397-4315-9195-0223d64bbf00",
          "name" : "type",
          "type" : "SINGLE",
          "argumentType" : "Object"
        } ]
      }, {
        "uuid" : "5247ccdf-3c9d-4e65-bcd0-02d040a8806e",
        "name" : "externalAccessors",
        "text" : "public ~className;format=\"capitalize\"~ set~name;format=\"capitalize\"~(~type~ value) { \n\tthis._~name~ = value;\n\treturn this;\n}\n\npublic ~type~ get~name;format=\"capitalize\"~() { \n\treturn this._~name~;\n}\n\npublic ~type~ get~name;format=\"capitalize\"~(~type~ defaultValue) { \n\treturn this._~name~ == null ? defaultValue : this._~name~;\n}",
        "parameters" : [ {
          "uuid" : "b3464feb-12d8-49d7-aa6a-edf2f4eace7c",
          "name" : "className",
          "type" : "SINGLE",
          "argumentType" : "Object"
        }, {
          "uuid" : "95d152f6-0fd6-4369-a496-1cc41fbcaeb6",
          "name" : "name",
          "type" : "SINGLE",
          "argumentType" : "Object"
        }, {
          "uuid" : "a19997d0-9341-4dbe-a2d5-179ae3d8aea1",
          "name" : "type",
          "type" : "SINGLE",
          "argumentType" : "Object"
        } ]
      }, {
        "uuid" : "d725755e-d593-4b9f-90d9-74a8b46aa511",
        "name" : "enumAccessors",
        "text" : "public ~className;format=\"capitalize\"~ set~name;format=\"capitalize\"~(~type~ value) { \n\tif (value == null) return this;\n\tjsonObject.put(\"~name~\", value.name());\n\treturn this;\n}\n\npublic ~type~ get~name;format=\"capitalize\"~() { \n\treturn get~name;format=\"capitalize\"~(null);\n}\n\npublic ~type~ get~name;format=\"capitalize\"~(~type~ defaultValue) { \n\treturn jsonObject.getString(\"~name~\") == null ? defaultValue : ~type~.valueOf(jsonObject.getString(\"~name~\"));\n}",
        "parameters" : [ {
          "uuid" : "bf8e80a6-4e9c-4adb-905e-907438a551f8",
          "name" : "className",
          "type" : "SINGLE",
          "argumentType" : "Object"
        }, {
          "uuid" : "64d50e61-f4f7-4eac-81fc-5951d41fcd7b",
          "name" : "name",
          "type" : "SINGLE",
          "argumentType" : "Object"
        }, {
          "uuid" : "c72f8db9-5d7a-4638-a959-3fc5fb072d3b",
          "name" : "type",
          "type" : "SINGLE",
          "argumentType" : "Object"
        } ]
      }, {
        "uuid" : "4f8d77ad-c484-4afb-a70c-9d6f3bf5c220",
        "name" : "listEnumAccessors",
        "text" : "public ~className;format=\"capitalize\"~ add~name;format=\"capitalize\"~(~type~ value) { \n\tio.vertx.core.json.JsonArray jsonArray = jsonObject.getJsonArray(\"~name~\");\n\tif (jsonArray == null) jsonObject.put(\"~name~\", jsonArray = new io.vertx.core.json.JsonArray());\n\tjsonArray.add(value.name());\n\treturn this;\n}\n\npublic java.util.stream.Stream<~type~> get~name;format=\"capitalize\"~() { \n\treturn jsonObject.getJsonArray(\"~name~\", new io.vertx.core.json.JsonArray()).stream().map((o) -> ~type~.valueOf(o.toString()));\n}\n\npublic ~className;format=\"capitalize\"~ remove~name;format=\"capitalize\"~(~type~ value) { \n\tfinal io.vertx.core.json.JsonArray jsonArray = jsonObject.getJsonArray(\"~name~\", new io.vertx.core.json.JsonArray());\n\tjsonArray.remove(value.name());\n\treturn this;\n}\n\npublic ~className;format=\"capitalize\"~ clear~name;format=\"capitalize\"~() { \n\tjsonObject.put(\"~name~\", new io.vertx.core.json.JsonArray());\n\treturn this;\n} ",
        "parameters" : [ {
          "uuid" : "b1bb02bf-43dd-4c39-a5dd-4074ce33f957",
          "name" : "className",
          "type" : "SINGLE",
          "argumentType" : "Object"
        }, {
          "uuid" : "fa98a611-44a6-4e17-a0bc-e677a03ac81f",
          "name" : "name",
          "type" : "SINGLE",
          "argumentType" : "Object"
        }, {
          "uuid" : "0e11c6c9-f97b-496c-9cb9-130ce3e659ff",
          "name" : "type",
          "type" : "SINGLE",
          "argumentType" : "Object"
        } ]
      } ]
    }, {
      "uuid" : "cefddd6f-722b-42df-8a8e-ced8c58ae2e0",
      "name" : "JsonFactory",
      "text" : "package ~package~;\n\npublic class ~name;format=\"capitalize\"~ {\n\n\tpublic static void save(io.vertx.core.json.JsonObject jsonObject, java.io.File file) throws java.io.IOException {\n\n\t\tif (!file.getParentFile().exists() && !file.getParentFile().mkdirs())\n\t\t\tthrow new IllegalStateException(\"could not create \" + file.getParentFile().getAbsolutePath());\n\n\t\tif (!file.exists() && !file.createNewFile())\n\t\t\tthrow new IllegalStateException(\"could not create \" + file.getAbsolutePath());\n\n\t\tjava.nio.file.Files.write(file.toPath(), jsonObject.toBuffer().getBytes());\n\t}\n\t\n~entities:{it|\n\tpublic static ~it~ new~it~() { \n\t\treturn new ~it~();\n\t\\}\n\t\n\tpublic static ~it~ new~it~NoUuid() { \n\t\treturn new ~it~().removeUuid();\n\t\\}\n\t\n\tpublic static ~it~ new~it~(io.vertx.core.json.JsonObject jsonObject) { \n\t\treturn new ~it~(jsonObject);\n\t\\}\n\n\tpublic static ~it~ new~it~(java.io.File file) throws java.io.IOException { \n\t\treturn new ~it~(new io.vertx.core.json.JsonObject(io.vertx.core.buffer.Buffer.buffer(java.nio.file.Files.readAllBytes(file.toPath()))));\n\t\\}\n};separator=\"\\n\"~\n}",
      "parameters" : [ {
        "uuid" : "bdf5d171-51ff-49cd-af42-e8c9e5556247",
        "name" : "package",
        "type" : "SINGLE",
        "argumentType" : "Object"
      }, {
        "uuid" : "ae766e9d-fb87-4128-84d8-dfac019c18ac",
        "name" : "name",
        "type" : "SINGLE",
        "argumentType" : "Object"
      }, {
        "uuid" : "fcd999dd-425d-4e8c-b284-60eccd7bb408",
        "name" : "entities",
        "type" : "LIST",
        "argumentType" : "Object"
      } ]
    } ]
  }, {
    "uuid" : "57405911-04a7-483b-97ac-497ecb3361da",
    "name" : "DomainVerticle",
    "text" : "package ~packageName~;\n\nimport ~packageName~.messages.*;\nimport io.vertx.core.AbstractVerticle;\nimport io.vertx.core.Promise;\nimport io.vertx.core.eventbus.Message;\nimport io.vertx.core.json.JsonObject;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class ~name;format=\"capitalize\"~ extends AbstractVerticle {\n\n\tprivate static final Logger log = LoggerFactory.getLogger(~name;format=\"capitalize\"~.class);\n\n\tpublic enum Action {\n\t\t~actions:{it|~it.name~};separator=\",\\n\"~\n\t}\n\n\tpublic enum ErrorCodes {\n\t\tNO_ACTION_HEADER,\n\t\tUNKNOWN_ACTION,\n\t\tDB_ERROR\n\t}\n\n\tprivate ~domainFactory~ db;\n\n\t@Override\n\tpublic void start(Promise<Void> promise) throws Exception {\n\t\tdb = new ~domainFactory~(config().getString(\"path\"));\n\t\tvertx.eventBus().consumer(config().getString(\"~address~\", \"~address~\"), this::onMessage);\n\t}\n\n\tpublic void onMessage(Message<JsonObject> message) {\n\n\t\tif (!message.headers().contains(\"action\")) {\n\t\t\tlog.error(\"No action header specified for message with headers {} and body {}\", message.headers(), message.body().encodePrettily());\n\t\t\tmessage.fail(ErrorCodes.NO_ACTION_HEADER.ordinal(), \"No action header specified\");\n\t\t\treturn;\n\t\t}\n\n\t\tfinal Action action = getAction(message);\n\t\t\n\t\tif (action == null) {\n\t\t\tmessage.fail(ErrorCodes.UNKNOWN_ACTION.ordinal(), \"Unknown action\");\n\t\t\treturn;\n\t\t}\n\n\t\tswitch (action) {\n~actions:{it|\n\t\t\tcase ~it.name~: {\n\t\t\t\t~it.name~(message);\n\t\t\t\tbreak;\n\t\t\t\\}};separator=\"\\n\"~\n\t\t}\n\t}\n\n\t~actions:{it|~it.declaration~};separator=\"\\n\\n\"~\n\n\tprivate Action getAction(Message<JsonObject> message) {\n\t\tfinal String action = message.headers().get(\"action\");\n\t\ttry {\n\t\t\treturn Action.valueOf(action);\n\t\t} catch (Throwable e) {\n\t\t\tlog.error(\"Unknown action \" + action);\n\t\t\treturn null;\n\t\t}\n\t}\n} ",
    "parameters" : [ {
      "uuid" : "3592475a-74e7-4374-ab0f-4d2f034e37f3",
      "name" : "packageName",
      "type" : "SINGLE",
      "argumentType" : "Object"
    }, {
      "uuid" : "ae287fcd-2430-4288-9239-8ea8fa5634e1",
      "name" : "name",
      "type" : "SINGLE",
      "argumentType" : "Object"
    }, {
      "uuid" : "87405f18-d203-4942-af5b-be5c78954fb3",
      "name" : "actions",
      "type" : "KVLIST",
      "argumentType" : "Object",
      "keys" : [ {
        "uuid" : "b462a429-a5e5-4662-b950-07374733b966",
        "name" : "name",
        "argumentType" : "Object"
      }, {
        "uuid" : "7e291985-78c9-465f-98bb-00b6648bcb89",
        "name" : "declaration",
        "argumentType" : "Object"
      } ]
    }, {
      "uuid" : "6228f125-da6a-4272-b062-97d9df6d9705",
      "name" : "domainFactory",
      "type" : "SINGLE",
      "argumentType" : "Object"
    }, {
      "uuid" : "1fa2d877-dfc4-446d-a2f6-2fff2bee9f71",
      "name" : "address",
      "type" : "SINGLE",
      "argumentType" : "Object"
    } ],
    "children" : [ {
      "uuid" : "9f95ad7e-12e6-4d2a-bc20-1539d7428678",
      "name" : "DomainAction",
      "text" : "private void ~name~(Message<JsonObject> message) {\n~if(params)~\n\tfinal JsonObject body = message.body();\n\t~params:{it|final ~it.type~ ~it.name~ = body.get~it.type~(\"~it.name~\");};separator=\"\\n\"~\n~endif~\n\t\n\tdb.doInTransaction(transaction -> {\n\t\t~statements:{it|~it~};separator=\"\\n\"~\n\t}, throwable -> {\n\t\tmessage.fail(ErrorCodes.DB_ERROR.ordinal(), throwable.getMessage());\n\t});\n} ",
      "parameters" : [ {
        "uuid" : "3fd0eb95-3fdc-4cf0-9b11-59eafe4b9b8b",
        "name" : "name",
        "type" : "SINGLE",
        "argumentType" : "Object"
      }, {
        "uuid" : "e5731597-b0b9-424e-8fd4-72d3582a8e82",
        "name" : "params",
        "type" : "KVLIST",
        "argumentType" : "Object",
        "keys" : [ {
          "uuid" : "3c4370d1-3e31-4e35-ad0c-14389bdd6daa",
          "name" : "type",
          "argumentType" : "Object"
        }, {
          "uuid" : "a66726f1-31a8-4f2e-9bed-029410c95fa1",
          "name" : "name",
          "argumentType" : "Object"
        } ]
      }, {
        "uuid" : "b4ac6941-407e-4e85-a47a-0b9c186eda11",
        "name" : "statements",
        "type" : "LIST",
        "argumentType" : "Object"
      } ]
    } ]
  }, {
    "uuid" : "d128bcda-0d12-4d30-ab1b-6534a3c38e4e",
    "name" : "WebVerticle",
    "text" : "package ~packageName~;\n\nimport com.securityx.web.api.LoginRequest;\nimport com.securityx.web.domain.*;\nimport io.vertx.core.AbstractVerticle;\nimport io.vertx.core.Future;\nimport io.vertx.core.Vertx;\nimport io.vertx.core.eventbus.DeliveryOptions;\nimport io.vertx.core.http.HttpServerOptions;\nimport io.vertx.core.json.JsonArray;\nimport io.vertx.core.json.JsonObject;\nimport io.vertx.core.net.PemKeyCertOptions;\nimport io.vertx.ext.auth.KeyStoreOptions;\nimport io.vertx.ext.auth.jwt.JWTAuth;\nimport io.vertx.ext.auth.jwt.JWTAuthOptions;\nimport io.vertx.ext.jwt.JWTOptions;\nimport io.vertx.ext.web.Router;\nimport io.vertx.ext.web.RoutingContext;\nimport io.vertx.ext.web.handler.BodyHandler;\nimport io.vertx.ext.web.handler.JWTAuthHandler;\nimport io.vertx.ext.web.handler.SessionHandler;\nimport io.vertx.ext.web.handler.StaticHandler;\nimport io.vertx.ext.web.sstore.LocalSessionStore;\n\nimport java.util.Optional;\nimport java.util.concurrent.atomic.AtomicInteger;\n\nimport static com.securityx.web.PasswordUtils.verifyUserPassword;\nimport static com.securityx.web.WebUtils.sendErrors;\nimport static com.securityx.web.WebUtils.sendResponse;\nimport static com.securityx.web.api.WebApiJsonFactory.newJWTPayload;\nimport static com.securityx.web.api.WebApiJsonFactory.newLoginRequest;\nimport static com.securityx.web.domain.ServerJsonFactory.newUserMenu;\nimport static com.securityx.web.domain.ServerJsonFactory.newUserSession;\nimport static io.netty.handler.codec.http.HttpResponseStatus.*;\n\npublic class ~name;format=\"capitalize\"~ extends AbstractVerticle {\n\n\tprotected final static org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(~name;format=\"capitalize\"~.class);\n\n\t@Override\n\tpublic void start(Future<Void> startFuture) throws Exception {\n\t\tlog.info(\"starting\");\n\n\t\tfinal ~name;format=\"capitalize\"~Config config = new ~name;format=\"capitalize\"~Config(config());\n\n\t\tfinal KeyStoreOptions keyStoreOptions = new KeyStoreOptions().\n\t\t\t\t\tsetPath(config.getJwt().getPath()).\n\t\t\t\t\tsetPassword(config.getJwt().getPassword()).\n\t\t\t\t\tsetType(config.getJwt().getType());\n\n\t\tfinal JWTAuthOptions jwtAuthOptions = new JWTAuthOptions().setKeyStore(keyStoreOptions);\n\t\tfinal JWTAuth auth = JWTAuth.create(vertx, jwtAuthOptions);\n\n\t\tfinal Router router = Router.router(vertx);\n\t\trouter.route().handler(BodyHandler.create());\n\t\trouter.route().handler(SessionHandler.create(LocalSessionStore.create(vertx)));\n\t\trouter.post(\"/login\").handler(routingContext -> login(routingContext, auth, config));\n\t\trouter.route(\"/api/*\").handler(JWTAuthHandler.create(auth, \"/login\"));\n\t\trouter.get(\"/user\").handler(routingContext -> getUser(routingContext, config));\n\t\t~routes:{it|router.~it.action~(\"/api/~it.url~\").handler(this::~it.methodName~);};separator=\"\\n\"~\n\t\t\t\tfinal HttpServerOptions serverOptions = new HttpServerOptions();\n\t\tfinal Optional<SSLConfig> ssl = Optional.ofNullable(config.getSsl());\n\n\t\tssl.ifPresent(sslConfig ->\n\t\t\t\tserverOptions\n\t\t\t\t\t\t.setSsl(true)\n\t\t\t\t\t\t.setPemKeyCertOptions(\n\t\t\t\t\t\t\t\tnew PemKeyCertOptions().\n\t\t\t\t\t\t\t\t\t\t\tsetKeyPath(sslConfig.getKey()).\n\t\t\t\t\t\t\t\t\t\t\tsetCertPath(sslConfig.getCert())));\n\n\t\tfinal StaticHandler staticHandler = StaticHandler.create();\n\t\tstaticHandler.setWebRoot(config.getWebRoot());\n\t\tstaticHandler.setCachingEnabled(false);\n\t\tstaticHandler.setIndexPage(\"index.html\");\n\t\trouter.route(\"/*\").handler(staticHandler);\n\n\t\tvertx.createHttpServer(serverOptions).requestHandler(router::accept).listen(config.getPort());\n\n\t\tlog.info(\"server running on \" + (ssl.isPresent() ? \"https\" : \"http\") + \"://\" + config.getTcpHost() + \":\" + config.getPort());\n\t\tlog.info(\"server running on \" + (ssl.isPresent() ? \"https\" : \"http\") + \"://\" + config.getTcpName(\"securityxresidential.info\") + \":\" + config.getPort());\n\n\t\tstartFuture.succeeded();\n\t}\n\n\tprivate void login(RoutingContext routingContext, JWTAuth auth, ~name;format=\"capitalize\"~Config deploymentOptions) {\n\t\tWebUtils.debug(\"login\", routingContext);\n\n\t\tfinal LoginRequest loginRequest = newLoginRequest(routingContext.getBodyAsJson());\n\n\t\tfinal Optional<UserConfig> foundUserConfig = deploymentOptions.getJwt().getUsers()\n\t\t\t\t.filter(userConfig -> userConfig.getUsername() != null && userConfig.getPassword() != null)\n\t\t\t\t.filter(userConfig -> userConfig.getUsername().equals(loginRequest.getUsername()))\n\t\t\t\t.findFirst();\n\n\t\tif (!foundUserConfig.isPresent()) {\n\t\t\tsendErrors(routingContext, UNAUTHORIZED, \"User credentials not found\");\n\t\t\treturn;\n\t\t}\n\n\t\tfinal boolean passwordMatch = verifyUserPassword(loginRequest.getPassword(), foundUserConfig.get().getPassword(), foundUserConfig.get().getSalt());\n\n\t\tif (!passwordMatch) {\n\t\t\tsendErrors(routingContext, UNAUTHORIZED, \"User credentials not found\");\n\t\t\treturn;\n\t\t}\n\n\t\tfinal UserSession userSession = newUserSession()\n\t\t\t.setToken(auth.generateToken(\n\t\t\t\t\tnewJWTPayload()\n\t\t\t\t\t\t\t.setSub(foundUserConfig.get().getUsername())\n\t\t\t\t\t\t\t.getJsonObject(),\n\t\t\t\t\tnew JWTOptions()\n\t\t\t\t\t\t\t.setExpiresInMinutes(deploymentOptions.getJwt().getExpiresInMinutes())\n\t\t\t\t\t\t\t.setSubject(foundUserConfig.get().getUsername())))\n\t\t\t.setUsername(foundUserConfig.get().getUsername());\n\n\t\tfinal AtomicInteger id = new AtomicInteger(0);\n\t\tfoundUserConfig.get().getAccess()\n\t\t\t.forEach(webPageAccessSettings -> userSession.addMenus(newUserMenu()\n\t\t\t\t\t\t.setKey(id.incrementAndGet())\n\t\t\t\t\t\t.setLabel(webPageAccessSettings.getLabel())\n\t\t\t\t\t\t.setUrl(webPageAccessSettings.getUrl())));\n\n\t\tfoundUserConfig.get().setSession(userSession);\n\n\t\tsendResponse(routingContext, OK, new JsonObject().put(\"user\", userSession.getJsonObject()));\n\t}\n\n\tprivate void getUser(RoutingContext routingContext, ~name;format=\"capitalize\"~Config deploymentOptions) {\n\t\tWebUtils.debug(\"getUser\", routingContext);\n\n\t\tfinal String authorization = routingContext.request().getHeader(\"Authorization\");\n\t\tfinal String token = authorization == null ? null : authorization.substring(7).trim();\n\n\t\tfinal Optional<UserSession> userSession = deploymentOptions.getJwt().getUsers()\n\t\t\t\t.filter(userConfig -> userConfig.getSession() != null)\n\t\t\t\t.map(UserConfig::getSession)\n\t\t\t\t.filter(session -> session.getToken().equals(token))\n\t\t\t\t.findFirst();\n\n\t\tif (!userSession.isPresent())\n\t\t\tsendErrors(routingContext, UNAUTHORIZED,\t\"User session not found\");\n\t\telse\n\t\t\tsendResponse(routingContext, OK, new JsonObject().put(\"user\", userSession.get().getJsonObject()));\n\t}\n\n\t~routes:{it|~it.declaration~};separator=\"\\n\\n\"~\n\n\tprivate static void getFromDomainDB(Vertx vertx, RoutingContext routingContext, String action, JsonObject params) {\n\t\tvertx.eventBus().request(\"domain.db\", params, new DeliveryOptions().addHeader(\"action\", action), reply -> {\n\t\t\tif (reply.succeeded()) {\n\t\t\t\tsendResponse(routingContext, OK, (JsonObject) reply.result().body());\n\t\t\t} else {\n\t\t\t\tsendErrors(routingContext, INTERNAL_SERVER_ERROR,\t\"Server Error\");\n\t\t\t}\n\t\t});\n\t}\n} ",
    "parameters" : [ {
      "uuid" : "40f73311-1a48-44c6-84c9-00f292e022c7",
      "name" : "packageName",
      "type" : "SINGLE",
      "argumentType" : "String"
    }, {
      "uuid" : "61df5346-8aeb-4827-8b25-dfa392b3af6d",
      "name" : "name",
      "type" : "SINGLE",
      "argumentType" : "String"
    }, {
      "uuid" : "0381e7bc-95f1-4eeb-a62f-9f3c9a3d71cd",
      "name" : "routes",
      "type" : "KVLIST",
      "argumentType" : "Object",
      "keys" : [ {
        "uuid" : "e0ade6dc-b199-462e-94b8-3e04f642cac7",
        "name" : "action",
        "argumentType" : "String"
      }, {
        "uuid" : "485cf36b-3c6d-49ae-b49c-2dd0cd36af65",
        "name" : "url",
        "argumentType" : "String"
      }, {
        "uuid" : "7ca63ef0-8bcc-4615-a7aa-af8000ba1744",
        "name" : "methodName",
        "argumentType" : "String"
      }, {
        "uuid" : "f6e5c15a-44df-4c0e-af78-ec6b757e353c",
        "name" : "declaration",
        "argumentType" : "RouteHandler"
      } ]
    } ],
    "children" : [ {
      "uuid" : "6b7bd0cc-b106-4da6-8dcf-1076b9dd4ea1",
      "name" : "SendEventBusAction",
      "text" : "getFromDomainDB(vertx, routingContext, \"~actionName~\", new JsonObject()~if(params)~.~params:{it|put(\"~it.name~\", routingContext.request().getParam(\"~it.name~\"))}~~endif~); ",
      "parameters" : [ {
        "uuid" : "0ad76b95-14e9-4edd-8184-331d59576162",
        "name" : "actionName",
        "type" : "SINGLE",
        "argumentType" : "Object"
      }, {
        "uuid" : "03830475-653f-4daa-9348-02b0bbf58342",
        "name" : "params",
        "type" : "KVLIST",
        "argumentType" : "Object",
        "keys" : [ {
          "uuid" : "e38ba308-9540-4e20-a59d-9d7be0a55d34",
          "name" : "name",
          "argumentType" : "Object"
        } ]
      } ]
    }, {
      "uuid" : "4cdbdd18-0766-4344-b2d8-89e89c8d5612",
      "name" : "RouteHandler",
      "text" : "private void ~name~(RoutingContext routingContext) {\n\tWebUtils.debug(\"~name~\", routingContext);\n\t~statements:{it|~it~};separator=\"\\n\"~\n} ",
      "parameters" : [ {
        "uuid" : "e649b7e7-2141-4832-a65f-4e762c5894a9",
        "name" : "name",
        "type" : "SINGLE",
        "argumentType" : "Object"
      }, {
        "uuid" : "0271e395-252b-48de-934d-ced7d7b5a01b",
        "name" : "statements",
        "type" : "LIST",
        "argumentType" : "Object"
      } ]
    } ]
  } ],
  "enums" : [ {
    "uuid" : "6e2148bc-d595-4695-bbdc-4cc674fe3edc",
    "name" : "VertxTypes",
    "values" : [ {
      "uuid" : "d06918c3-0b26-4f1e-a1a6-333d5c9d69ef",
      "name" : "JsonArrayType",
      "lexical" : "io.vertx.core.json.JsonArray"
    }, {
      "uuid" : "9fa45041-3a12-4a5f-a774-6763dcae16d7",
      "name" : "JsonObjectType",
      "lexical" : "io.vertx.core.json.JsonObject"
    } ]
  } ]
}