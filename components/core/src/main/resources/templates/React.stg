delimiters "~","~"

App(components) ::= <<import React, { Component } from 'react';
import { Switch, Route, withRouter } from 'react-router-dom';

import { Provider } from 'mobx-react';
import { inject, observer } from 'mobx-react';

import CssBaseline from '@material-ui/core/CssBaseline';

import NavBar from './components/NavBar.js';
import Login from './components/Login.js';
import LogoutForm from './components/LogoutForm.js';
~components:{it|import ~it.name~ from './~it.directory~/~it.filename~.js';};separator="\n"~

@inject('userStore', 'appStore', 'authStore', 'searchStore', 'currentStore')
@withRouter
@observer
class App extends Component {

    constructor(props) {
        super(props);
        if (!this.props.appStore.token) {
            this.props.appStore.setAppLoaded();
        }
    }

	componentDidMount() {
		if (this.props.appStore.token) {
			this.props.userStore.pullUser().finally(() => this.props.appStore.setAppLoaded());
		}
	}

	render() {

		if (this.props.appStore.appLoaded) {
			return (
				<div>
					<div>
                        <NavBar></NavBar>
                  </div>
					<Switch>
						<Route path="/login" component={Login} />
						~components:{it|<Route path="/~it.path~" component={ ~it.name~ ~eom()~ />};separator="\n"~
						<Route path="/logout" component={LogoutForm} />
					</Switch>
				</div>
			);
		}

		return (
                <React.Fragment>
                      <CssBaseline />
                      <NavBar />
                        <footer className="footer">
                            &copy; Copyright <span>{(new Date().getFullYear())}</span> Real Property Analytics
                        </footer>
                </React.Fragment>
			);
	}
}

export default App; >> 

BlockStmt(stmt,children) ::= <<~stmt~ {
	~children:{it|~it~};separator="\n"~
} >> 

ClassComponent(returnStatements,events,decorators,name,components,methods,state,dependencies,renderConstants) ::= <<// dependencies:
~dependencies:{it|~it~};separator="\n"~

~components:{it|~it~};separator="\n\n"~

~decorators:{it|~it~};separator="\n"~
class ~name~ extends React.Component {

	constructor(props) {
		super(props);
		console.log(this.props);
		
~if(state)~
		this.state = {
			~state:{it|~it~};separator=",\n"~;
		}
~endif~

		~events:{it|this.~it.methodName~ = this.~it.methodName~.bind(this);};separator="\n"~
	}

~if(events)~
	~events:{it|~it.declaration~};separator="\n\n"~
~endif~
	
~if(methods)~
	~methods:{it|~it~};separator="\n\n"~
~endif~

	render() {
~if(renderConstants)~
	const { ~renderConstants:{it|~it~};separator=", "~ } = this.state;~endif~
		~returnStatements:{it|~it~};separator="\n\n"~	
	}
}

export default (~name~); >> 

cssProp(value,name) ::= <<~name~: ~value~ >> 

Decorator(name,parameters) ::= <<@~name~~if(parameters)~(~parameters:{it|~it~};separator=", "~)~endif~ >> 

defaultImport(name) ::= <<~name~ >> 

Dependency(value,packageName) ::= <<import ~value~ from '~packageName~'; >> 

DestructorProp(child,prop) ::= <<const { ~prop:{it|~it~};separator=", "~ } = this.props~if(child)~.~child~~endif~; >> 

Element(name,children,props) ::= <<<~name~~if(props)~ 
	~props:{it|~it~};separator="\n"~~endif~~if(children)~>
	~children:{it|~it~};separator="\n"~
</~name~>~else~ />~endif~ >> 

ForwardRef(name,forward) ::= <<const ~name~ = React.forwardRef( (props, ref) => (
	~forward~
)); >> 

Function(name,parameters,body) ::= <<function ~name~(~parameters:{it|~it~};separator=","~) {
	~body~
} >> 

FunctionalComponent(wrapper,inject,name,element,dependencies,localImports) ::= <<// dependencies:
~dependencies:{it|~it~};separator="\n"~
~if(style)~import { makeStyles } from '@material-ui/core/styles';~endif~

~if(localImports)~
// local imports
~localImports:{it|~it~};separator="\n"~
~endif~


function ~name~(props) {

	return (
		~element~
	)
}
~if(wrapper)~// Wrap the component instead of decorating it
~endif~
export default ~if(inject)~inject(~inject:{it|'~it~'};separator=", "~)~endif~~if(wrapper)~(~wrapper~(~endif~~name~~if(wrapper)~))~endif~ >> 

GlobalStyle(properties,name) ::= <<'@global': {
	~name~: {
		~properties:{it|~it.key~: ~it.value~};separator=",\n"~
	}
} >> 

If(condition,blockStmt) ::= <<if (~condition~) ~blockStmt~ >> 

Inject(values) ::= <<@inject(~values:{it|~it~};separator=", "~) >> 

JsonObject(values) ::= <<{ ~values:{it|~it~};separator=", "~ } >> 

Link(to) ::= <<<Link innerRef={ ref } to="~to~" { ...props } /> >> 

MaterialUI() ::= << >> 

MaterialUIGroup(elements,packageName) ::= <<package ~packageName~;

import java.util.LinkedHashMap;
import java.util.Map;

public class MaterialUI extends ReactGroup {

	public static class BaseElement extends ReactGroup.ElementST {

		protected final MaterialUI group;
		protected final String name;
		private final String importPackage;
		private StyleST styleST;
		protected String styleName;
		private final Map<String, Object> styleMap = new LinkedHashMap<>();

		BaseElement(MaterialUI group, String name, String importPackage) {
			super(group.getSTGroup());
			this.group = group;
			this.name = name;
			this.importPackage = importPackage;
			setName(name);
		}

		public ReactGroup.ImportST asImport() {
			return group.newImport().setValue(name).setPackageName(importPackage);
		}

		public ReactGroup.StyleST asStyle() {
			final String componentStyleName = styleName == null ? lowFirst(name) : styleName;
			final StyleST styleST = group.newStyle().setName(componentStyleName);
			for (Map.Entry<String, Object> entry : styleMap.entrySet())
				styleST.addPropertiesValue(entry.getKey(), entry.getValue());
			return styleST;
		}

		protected void addStyle(String name, Object value) {
			styleMap.put(name,value);
		}

		//addPropsValue(group.newProp().setName("className").setValue(group.newObject().addValuesValue("this.props.classes." + componentStyleName)));

		@Override
		public String toString() {
			return super.toString();
		}
	}

	~elements:{it|~it~};separator="\n\n"~
} >> 

MenuItem(title,name) ::= <<<MenuItem component={ ~name~ } onClick={handleClose}> ~title~ </MenuItem> >> 

MethodDeclaration(parameter,statements,name) ::= <<~if(const)~const ~endif~~name~ = ~if(parameter)~~parameter~~else~()~endif~ => {
	~statements:{it|~it~};separator="\n"~
} >> 

MobX() ::= << >> 

NameArray(values,name) ::= <<~name~ : [ ~values:{it|~it~};separator=", "~ ] >> 

namedImport(names) ::= <<{ ~names:{it|~it~};separator=", "~ } >> 

NameValue(name,value) ::= <<~name~ : ~value~ >> 

Prop(name,value) ::= <<~name~~if(value)~=~value~~endif~ >> 

returnStatement(condition,element) ::= <<~if(condition)~if (~condition~) ~endif~return (
	~element~
	); >> 

SimpleMenu(menuItems,menuComponents) ::= <<import React from 'react';
import Button from '@material-ui/core/Button';
import Menu from '@material-ui/core/Menu';
import MenuItem from '@material-ui/core/MenuItem';
import MenuList from '@material-ui/core/MenuList';
import IconButton from '@material-ui/core/IconButton';
import MenuIcon from '@material-ui/icons/Menu';
import { Link } from 'react-router-dom';

const LoginLink = React.forwardRef( (props, ref) => (
	<Link innerRef={ ref } to="/login" { ...props } />
));

~menuItems:{it|
const ~it.name~ = React.forwardRef( (props, ref) => (
	<Link innerRef={ ref ~eom()~ to="/~it.to~"~if(it.target)~ target="~it.target~" ~endif~ { ...props ~eom()~ />
));
};separator="\n\n"~

const Testing = React.forwardRef( (props, ref) => (
	<Link innerRef={ ref } to="/testing" { ...props } />
));

export default function SimpleMenu(props) {

  const [anchorEl, setAnchorEl] = React.useState(null);

  function handleClick(event) {
    setAnchorEl(event.currentTarget);
  }

  function handleClose() {
    setAnchorEl(null);
  }

    if (!props.currentUser)  {
        return (
            <div>
                <IconButton edge="start" color="inherit" aria-label="Menu" onClick={handleClick}>
                    <MenuIcon />
                </IconButton>
                <Menu id="simple-menu" anchorEl={anchorEl} keepMounted open={Boolean(anchorEl)} onClose={handleClose}>
                    <MenuItem component={ LoginLink } onClick={handleClose}>Login</MenuItem>
                </Menu>
            </div>);
    	}

    else {
         return (
                <div>
                    <IconButton edge="start" color="inherit" aria-label="Menu" onClick={handleClick}>
                        <MenuIcon />
                    </IconButton>
                    <Menu id="simple-menu" anchorEl={anchorEl} keepMounted open={Boolean(anchorEl)} onClose={handleClose}>
                       ~menuItems:{it|~it.element~};separator="\n"~
                       ~menuComponents:{it|~it~};separator="\n"~
                    </Menu>
                </div>);
        }
} >> 

State(values) ::= <<{
	~values:{it|~it.name~: ~it.value~};separator=",\n"~
} >> 

Style(name,properties) ::= <<~name~: {
	~properties:{it|~it.key~: ~it.value~};separator=",\n"~
} >> 

StyleComponent(elements) ::= <<const useStyles = theme => ({
	~elements:{it|~it~};separator=",\n"~
	}); >> 

withStyles() ::= <<@withStyles(useStyles) >> 

eom() ::= "}"

gt() ::= ">"
