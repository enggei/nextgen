{
  "uuid" : "483489b9-c91a-41c8-ad49-1dc7f9f1469f",
  "name" : "Nextgen",
  "delimiter" : "~",
  "templates" : [ {
    "uuid" : "76d29786-6c58-46af-b1bd-9d49ed4bb8a9",
    "name" : "TreeNavigator",
    "text" : "package ~packageName~;\n\n~imports:{it|~it~;};separator=\"\\n\"~\n\nimport javax.swing.*;\nimport javax.swing.tree.*;\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.util.List;\nimport java.util.*;\nimport java.util.function.Consumer;\n\npublic class ~name~ extends JPanel {\n\n\tprivate final JTree tree = new JTree();\n\tprivate final ~name~TreeModel treeModel;\n\n\t~fields:{it|private ~it.type~ ~it.name~;};separator=\"\\n\"~\n\n\tpublic ~name~(~fields:{it|~it.type~ ~it.name~};separator=\", \"~) {\n\t\tsuper(new BorderLayout());\n\n\t\t~fields:{it|this.~it.name~ = ~it.name~;};separator=\"\\n\"~\n\n\t\ttreeModel = new ~name~TreeModel(~rootNodeExpression~);\n\t\ttree.setModel(treeModel);\n\t\tToolTipManager.sharedInstance().registerComponent(tree);\n\n\t\ttree.setCellRenderer(new ~name~.~name~CellRenderer());\n\t\ttree.addKeyListener(new ~name~.~name~KeyListener());\n\t\ttree.addMouseListener(new ~name~.~name~MouseListener());\n\n\t\tsetPreferredSize(new Dimension(~if(preferredWidth)~~preferredWidth~~else~400~endif~, ~if(preferredHeight)~~preferredHeight~~else~600~endif~));\n\t\tadd(new JScrollPane(tree), BorderLayout.CENTER);\n\n\t\t~constructorStatements:{it|~it~};separator=\"\\n\"~\n\t}\n\n\tprivate final class ~name~CellRenderer extends DefaultTreeCellRenderer {\n\t\t@Override\n\t\tpublic Component getTreeCellRendererComponent(JTree tree, Object value, boolean sel, boolean expanded, boolean leaf, int row, boolean hasFocus) {\n\t\t\tfinal BaseTreeNode<?> node = (BaseTreeNode<?>) value;\n\t\t\tfinal ImageIcon icon = node.getIcon();\n\t\t\tsetIcon(icon);\n\t\t\tsetOpenIcon(icon);\n\t\t\tsetClosedIcon(icon);\n\t\t\tsetLeafIcon(icon);\n\t\t\tsetToolTipText(node.getTooltip());\n\t\t\treturn super.getTreeCellRendererComponent(tree, node.getLabel(), sel, expanded, leaf, row, hasFocus);\n\t\t}\n\t}\n\n\tprivate final class ~name~KeyListener extends KeyAdapter {\n\t\t@Override\n\t\tpublic void keyPressed(KeyEvent e) {\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_SPACE) {\n\t\t\t\tfinal TreePath selectionPath = tree.getSelectionPath();\n\t\t\t\tif (selectionPath == null) return;\n\t\t\t\tfinal Object lastPathComponent = selectionPath.getLastPathComponent();\n\t\t\t\tif (!(lastPathComponent instanceof BaseTreeNode<?>)) return;\n\t\t\t\tfinal Rectangle bounds = tree.getPathBounds(selectionPath);\n\t\t\t\tif (bounds == null) return;\n\n\t\t\t\tshowPopup((BaseTreeNode<?>) lastPathComponent, (int) bounds.getX(), (int) bounds.getY());\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate final class ~name~MouseListener extends MouseAdapter {\n      @Override\n      public void mouseClicked(MouseEvent e) {\n         if (SwingUtilities.isRightMouseButton(e)) {\n\n            final TreePath selectionPath = tree.getPathForLocation(e.getX(), e.getY());\n            if (selectionPath == null) return;\n            final Object lastPathComponent = selectionPath.getLastPathComponent();\n            if (!(lastPathComponent instanceof BaseTreeNode<?>)) return;\n\n            showPopup((BaseTreeNode<?>) lastPathComponent, e.getX(), e.getY());\n\n         } else {\n\n            final TreePath selectionPath = tree.getPathForLocation(e.getX(), e.getY());\n            if (selectionPath == null) return;\n            final Object lastPathComponent = selectionPath.getLastPathComponent();\n            if (!(lastPathComponent instanceof BaseTreeNode<?>)) return;\n\n            appModel().doLaterInTransaction(transaction -> {\n\t\t\t\t\t~treeNodesSelected:{it|if (is~it~(lastPathComponent)) \n\ton~it~Selected((~it~) lastPathComponent);\n};separator=\"else \"~~if(treeNodesSelected)~\t\t\t\t\telse \n\t\t~endif~\t\t\t\t\t\tonUnhandledNodeSelected((BaseTreeNode<?>) lastPathComponent);\n            });\n         }\n      }\n   }\n\n   private void onUnhandledNodeSelected(BaseTreeNode<?> selectedNode) {\n   \t~unhandledNodeSelectedStatements:{it|~it~};separator=\"\\n\"~\n   }\n\n\t~events:{it|~it~};separator=\"\\n\\n\"~\n   \n\t~baseTreeNode~\n\n\t~treeNodes:{it|~it~};separator=\"\\n\\n\"~\t\n\n\tprivate Action newAction(String name, Consumer<ActionEvent> actionEventConsumer) {\n\t\treturn new AbstractAction(name) {\n\t\t\t@Override\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\tSwingUtilities.invokeLater(() -> actionEventConsumer.accept(e));\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate Action newTransactionAction(String name, Consumer<ActionEvent> actionEventConsumer) {\n\t\treturn new AbstractAction(name) {\n\t\t\t@Override\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\tSwingUtilities.invokeLater(() -> appModel().doInTransaction(transaction -> actionEventConsumer.accept(e)));\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate void showPopup(BaseTreeNode<?> lastPathComponent, int x, int y) {\n\t\tfinal List<Action> actions = lastPathComponent.getActions();\n\t\tif (actions.isEmpty()) return;\n\n\t\tfinal JPopupMenu pop = new JPopupMenu();\n\t\tfor (Action action : actions)\n\t\t\tpop.add(action);\n\n\t\tSwingUtilities.invokeLater(() -> pop.show(tree, x, y));\n\t}\n\n\tpublic <T> java.util.stream.Stream<T> getSelectedNodes(Class<T> type) {\n\t\tfinal TreePath[] selectionPaths = tree.getSelectionPaths();\n\t\tif (selectionPaths == null || selectionPaths.length == 0) return java.util.stream.Stream.empty();\n\t\treturn Arrays.stream(selectionPaths)\n\t\t\t\t.filter(treePath -> treePath.getLastPathComponent() != null)\n\t\t\t\t.filter(treePath -> treePath.getLastPathComponent().getClass().isAssignableFrom(type))\n\t\t\t\t.map(treePath -> (T) treePath.getLastPathComponent());\n\t}\n\n\tpublic java.util.stream.Stream<BaseTreeNode> getSelectedNodes() {\n\t\tfinal TreePath[] selectionPaths = tree.getSelectionPaths();\n\t\tif (selectionPaths == null || selectionPaths.length == 0) return java.util.stream.Stream.empty();\n\t\treturn Arrays.stream(selectionPaths)\n\t\t\t\t.filter(treePath -> treePath.getLastPathComponent() != null)\n\t\t\t\t.map(treePath -> (BaseTreeNode) treePath.getLastPathComponent());\n\t}\n\n\tprivate STAppPresentationModel appModel() {\n\t\treturn nextgen.swing.AppModel.getInstance().getSTAppPresentationModel();\n\t}\n\n\t~methods:{it|~it~};separator=\"\\n\\n\"~\n\n\tclass ~name~TreeModel extends DefaultTreeModel {\n\n\t\tpublic ~name~TreeModel(BaseTreeNode root) {\n\t\t\tsuper(root);\n\t\t\t~treeModelConstructorStatements:{it|~it~};separator=\"\\n\"~\n\t\t}\n\n\t\tprotected Optional<BaseTreeNode<?>~gt()~ find(java.util.function.Predicate<BaseTreeNode<?>~gt()~ predicate) {\n\t\t\treturn find((BaseTreeNode<?>) getRoot(), predicate);\n\t\t}\n\n\t\tprotected <T extends BaseTreeNode<?>~gt()~ Optional<T> find(Class<T> nodeType) {\n\t\t\tfinal BaseTreeNode<?> root = (BaseTreeNode<?>) getRoot();\n\t\t\tif (root.getClass().isAssignableFrom(nodeType)) return Optional.of((T) root);\n\t\t\treturn find((BaseTreeNode<?>) getRoot(), navigatorTreeNode ->\n\t\t\t\t\tnavigatorTreeNode.getClass().isAssignableFrom(nodeType));\n\t\t}\n\n\t\tprotected <T extends BaseTreeNode<?>~gt()~ Optional<T> find(Class<T> nodeType, java.util.function.Predicate<T> predicate) {\n\t\t\tfinal BaseTreeNode<?> root = (BaseTreeNode<?>) getRoot();\n\t\t\tif (root.getClass().isAssignableFrom(nodeType) && predicate.test((T) root)) return Optional.of((T) root);\n\t\t\treturn find((BaseTreeNode<?>) getRoot(), navigatorTreeNode -> navigatorTreeNode.getClass()\n\t\t\t\t\t.isAssignableFrom(nodeType) && predicate.test((T) navigatorTreeNode));\n\t\t}\n\n\t\tprotected <T extends BaseTreeNode<?>~gt()~ Optional<T> find(BaseTreeNode<?> parent, java.util.function.Predicate<BaseTreeNode<?>~gt()~ predicate) {\n\t\t\tfinal int childCount = parent.getChildCount();\n\t\t\tfor (int i = 0; i < childCount; i++) {\n\t\t\t\tfinal BaseTreeNode<?> childAt = (BaseTreeNode<?>) parent.getChildAt(i);\n\t\t\t\tif (predicate.test(childAt))\n\t\t\t\t\treturn Optional.of((T) new TreePath(childAt.getPath()).getLastPathComponent());\n\t\t\t\telse {\n\t\t\t\t\tfinal Optional<T> node = find(childAt, predicate);\n\t\t\t\t\tif (node.isPresent()) return node;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn Optional.empty();\n\t\t}\n\n\t\tprotected <T extends BaseTreeNode<?>~gt()~ Optional<T> find(BaseTreeNode<?> parent, Class<T> nodeType, java.util.function.Predicate<T> predicate) {\n\t\t\treturn find(parent, navigatorTreeNode -> navigatorTreeNode.getClass()\n\t\t\t\t\t.isAssignableFrom(nodeType) && predicate.test((T) navigatorTreeNode));\n\t\t}\n\n\t\tprivate void addNodeInSortedOrderAndSelect(BaseTreeNode<?> parent, BaseTreeNode<?> child) {\n\t\t\taddNodeInSortedOrder(parent, child);\n\t\t\tselect(child);\n\t\t}\n\n\t\tprivate void addNodeInSortedOrder(BaseTreeNode<?> parent, BaseTreeNode<?> child) {\n\n\t\t\tint n = parent.getChildCount();\n\t\t\tif (n == 0) {\n\t\t\t\tparent.add(child);\n\t\t\t\tnodesWereInserted(parent, new int[]{n});\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tfinal BaseTreeNode<?> node = (BaseTreeNode<?>) parent.getChildAt(i);\n\t\t\t\tif (node.getLabel().compareTo(child.getLabel()) > 0) {\n\t\t\t\t\tparent.insert(child, i);\n\t\t\t\t\tnodesWereInserted(parent, new int[]{i});\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tparent.add(child);\n\t\t\tnodesWereInserted(parent, new int[]{n});\n\t\t}\n\n\t\tpublic void select(BaseTreeNode<?> treeNode) {\n\t\t\ttree.scrollPathToVisible(treeNode.getThisPath());\n\t\t\ttree.setSelectionPath(treeNode.getThisPath());\n\t\t}\n\t}\n} ",
    "parameters" : [ {
      "uuid" : "348d9666-cd87-4081-a94c-a6d719325794",
      "name" : "packageName",
      "type" : "SINGLE",
      "argumentType" : "String"
    }, {
      "uuid" : "832a02d9-62c7-442f-947a-41e92eebe0e3",
      "name" : "imports",
      "type" : "LIST",
      "argumentType" : "Object"
    }, {
      "uuid" : "33901a65-a65f-4e83-940a-305e388da778",
      "name" : "name",
      "type" : "SINGLE",
      "argumentType" : "String"
    }, {
      "uuid" : "f54c61c0-e129-4103-b552-ac6f243c6bcf",
      "name" : "fields",
      "type" : "KVLIST",
      "argumentType" : "Object",
      "keys" : [ {
        "uuid" : "3eab5f17-c24b-4c68-be57-f7f13579fc8f",
        "name" : "type",
        "argumentType" : "Object"
      }, {
        "uuid" : "f82cde2d-7e8f-46f6-b7ba-45bfef6d2995",
        "name" : "name",
        "argumentType" : "String"
      } ]
    }, {
      "uuid" : "f524310c-a048-4e3b-af82-f8fc1371d6a6",
      "name" : "rootNodeExpression",
      "type" : "SINGLE",
      "argumentType" : "Object"
    }, {
      "uuid" : "ae08d437-3fb5-4d23-8740-96ce1bc07507",
      "name" : "preferredWidth",
      "type" : "SINGLE",
      "argumentType" : "String"
    }, {
      "uuid" : "df3d94f5-b725-4a14-99f3-254396a28456",
      "name" : "preferredHeight",
      "type" : "SINGLE",
      "argumentType" : "String"
    }, {
      "uuid" : "07397052-9797-4e19-84a2-43175cbbb861",
      "name" : "constructorStatements",
      "type" : "LIST",
      "argumentType" : "Object"
    }, {
      "uuid" : "7d1098e7-eb98-4a75-9495-852376b7c02f",
      "name" : "treeNodesSelected",
      "type" : "LIST",
      "argumentType" : "Object"
    }, {
      "uuid" : "ff3ac142-8f53-4dc1-bc4c-c0b06adf53bb",
      "name" : "unhandledNodeSelectedStatements",
      "type" : "LIST",
      "argumentType" : "Object"
    }, {
      "uuid" : "4ca3c953-cc57-4d4c-b84d-2dc5c901be6e",
      "name" : "events",
      "type" : "LIST",
      "argumentType" : "Object"
    }, {
      "uuid" : "f7711464-23c4-4958-a1ed-7391fa047792",
      "name" : "baseTreeNode",
      "type" : "SINGLE",
      "argumentType" : "BaseTreeNode"
    }, {
      "uuid" : "04fa15a8-33d0-4360-b026-a168d75bcd18",
      "name" : "treeNodes",
      "type" : "LIST",
      "argumentType" : "TreeNode"
    }, {
      "uuid" : "019c976b-40a6-4366-b639-ff9b33652e74",
      "name" : "methods",
      "type" : "LIST",
      "argumentType" : "Object"
    }, {
      "uuid" : "2707e9b8-09ba-4fdc-9b08-4a2e190a4efc",
      "name" : "treeModelConstructorStatements",
      "type" : "LIST",
      "argumentType" : "Object"
    } ],
    "children" : [ {
      "uuid" : "995d5c9a-e1a3-49a8-998d-81a4a4e9b13c",
      "name" : "BaseTreeNode",
      "text" : "public class BaseTreeNode<T> extends DefaultMutableTreeNode {\n\n\tprotected String label;\n\tprotected ImageIcon icon;\n\tprotected String tooltip;\n\n\tpublic BaseTreeNode(T model, ImageIcon icon) {\n\t\tsetUserObject(model);\n\t\tsetLabel(model.toString());\n\t\tthis.icon = icon;\n\t\tthis.tooltip = \"\";\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic T getModel() {\n\t\treturn (T) getUserObject();\n\t}\n\n\tprotected void setLabel(String label) {\n\t\tthis.label = label;\n\t\tif (this.label == null || this.label.trim().length() == 0) this.label = \"[EMPTY]\";\n\t}\n\n\tpublic String getLabel() {\n\t\treturn label;\n\t}\n\n\tpublic ImageIcon getIcon() {\n\t\treturn icon;\n\t}\n\n\tprotected java.util.List<Action> getActions() {\n\t\tjava.util.List<Action> actions = new ArrayList<>();\n\t\tactions.add(newAction(\"Expand\", actionEvent -> {\n\t\t\tSwingUtilities.invokeLater(() -> expandTreeNodesRecursive(getThisPath(), true));\n\t\t}));\n\t\tactions.add(newAction(\"Collapse\", actionEvent -> {\n\t\t\tSwingUtilities.invokeLater(() -> expandTreeNodesRecursive(getThisPath(), false));\n\t\t}));\n\t\treturn actions;\n\t}\n\n\t@Override\n\tpublic boolean equals(Object obj) {\n\t\tif (!(obj instanceof BaseTreeNode)) return false;\n\t\treturn getModel().equals(((BaseTreeNode<?>) obj).getModel());\n\t}\n\n\t@Override\n\tpublic int hashCode() {\n\t\treturn getModel().hashCode();\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic <T> Optional<T> getParentNode(Class<T> type) {\n\t\tif (getClass().equals(type)) return (Optional<T>) Optional.of(this);\n\n\t\tfinal TreeNode parent = getParent();\n\t\tif (!(parent instanceof BaseTreeNode)) return Optional.empty();\n\n\t\treturn ((BaseTreeNode<?>) parent).getParentNode(type);\n\t}\n\n\tpublic String getTooltip() {\n\t\treturn tooltip;\n\t}\n\n\tpublic void nodeChanged() {\n\t\ttreeModel.nodeChanged(this);\n\t}\n\n\tprotected TreePath addChild(BaseTreeNode<?> child) {\n\n\t\tint n = getChildCount();\n\t\tif (n == 0) {\n\t\t\tadd(child);\n\t\t\treturn new javax.swing.tree.TreePath(child.getPath());\n\t\t}\n\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfinal BaseTreeNode<?> node = (BaseTreeNode<?>) getChildAt(i);\n\t\t\tif (node.getLabel().compareTo(child.getLabel()) > 0) {\n\t\t\t\tinsert(child, i);\n\t\t\t\treturn new javax.swing.tree.TreePath(child.getPath());\n\t\t\t}\n\t\t}\n\n\t\tadd(child);\n\n\t\treturn new javax.swing.tree.TreePath(child.getPath());\n\t}\n\n\tprotected void addAndSelectChild(BaseTreeNode<?> child) {\n\t\tfinal TreePath path = addChild(child);\n\t\ttree.scrollPathToVisible(path);\n\t\ttree.setSelectionPath(path);\n\t}\n\n\tprotected <T> java.util.stream.Stream<T> getChildren(Class<T> type) {\n\t\tfinal java.util.Set<T> set = new java.util.LinkedHashSet<>();\n\t\tfinal int childCount = getChildCount();\n\t\tfor (int i = 0; i < childCount; i++) {\n\t\t\tif (getChildAt(i).getClass().isAssignableFrom(type))\n\t\t\t\tset.add((T) getChildAt(i));\n\t\t}\n\n\t\treturn set.stream();\n\t}\n\n\tprotected TreePath find(java.util.function.Predicate<BaseTreeNode<?>~gt()~ predicate) {\n\t\tfinal int childCount = getChildCount();\n\t\tfor (int i = 0; i < childCount; i++) {\n\t\t\tfinal BaseTreeNode<?> childAt = (BaseTreeNode<?>) getChildAt(i);\n\t\t\tif (predicate.test(childAt))\n\t\t\t\treturn (childAt).getThisPath();\n\t\t\telse {\n\t\t\t\tfinal TreePath treePath = childAt.find(predicate);\n\t\t\t\tif (treePath != null) return treePath;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tprotected TreePath getThisPath() {\n\t\treturn new TreePath(getPath());\n\t}\n\n\tprotected void expandTreeNodesRecursive(TreePath parent, boolean expand) {\n\t\tTreeModel model = tree.getModel();\n\n\t\tObject node = parent.getLastPathComponent();\n\t\tint childCount = model.getChildCount(node);\n\t\tfor (int j = 0; j < childCount; j++) \n\t\t\texpandTreeNodesRecursive(parent.pathByAddingChild(model.getChild(node, j)), expand);\n\n\t\tif (expand) \n\t\t\ttree.expandPath(parent);\n\t\telse \n\t\t\ttree.collapsePath(parent);\n\t}\n} ",
      "parameters" : [ ]
    }, {
      "uuid" : "ecd9b597-6268-415b-9558-40ac8160f4a3",
      "name" : "TreeNode",
      "text" : "// ~name~\npublic class ~name~ extends BaseTreeNode<~modelType~> {\n~if(hasUuid)~\n\n\tprivate String uuid;\n~endif~\n\t~fields:{it|private ~it.type~ ~it.name~;};separator=\"\\n\"~\n\t~privateFields:{it|private ~it.type~ ~it.name~;};separator=\"\\n\"~\n\t\n\t~name~(~modelType~ model~if(fields)~, ~fields:{it|~it.type~ ~it.name~};separator=\", \"~~endif~~if(parameters)~, ~parameters:{it|~it.type~ ~it.name~};separator=\", \"~~endif~) {\n\t\tsuper(model, ~if(icon)~~icon~~else~null~endif~);\n\n\t\t~fields:{it|this.~it.name~ = ~it.name~;};separator=\"\\n\"~\n\t\t~privateFields:{it|this.~it.name~ = ~it.init~;};separator=\"\\n\"~\n\t\t\n\t\tsetLabel(~if(labelExpression)~~labelExpression~~else~model.toString()~endif~);\n\t\tthis.tooltip = ~if(tooltipExpression)~~tooltipExpression~~else~\"\";~endif~\n\t\t~if(hasUuid)~this.uuid = model.getUuid();~endif~\n\n\t\t~constructorStatements:{it|~it~};separator=\"\\n\"~\n\t}\n\n\t~name~ thisNode() {\n\t\treturn this;\n\t}\n\n\t@Override\n\tpublic void nodeChanged() {\n\t\tsetLabel(~if(labelExpression)~~labelExpression~~else~getModel().toString()~endif~);\n\t\tthis.tooltip = ~if(tooltipExpression)~~tooltipExpression~~else~\"\";~endif~\n\t\tsuper.nodeChanged();\n\t}\n\n\t@Override\n\tprotected List<Action> getActions() {\n\t\tfinal List<Action> actions = super.getActions();\n\t\t\n\t\tappModel().doInTransaction(tx -> {\n\t\t\t~getActionsStatements:{it|~it~};separator=\"\\n\"~\n\t\t\t~actions:{it|actions.add(~it~);};separator=\"\\n\"~\n\t\t});\n\t\t\n\t\treturn actions;\n\t}\n\n\t~methods:{it|~it~};separator=\"\\n\\n\"~\n}\n\nprivate boolean is~name;format=\"capitalize\"~(Object treeNode) {\n\treturn treeNode instanceof ~name~;\n}\n\nprivate Optional<~name~> find~name;format=\"capitalize\"~() {\n\treturn treeModel.find(~name~.class, treeNode -> true);\n}\n\nprivate Optional<~name~> find~name;format=\"capitalize\"~(java.util.function.Predicate<~name~> predicate) {\n\treturn treeModel.find(~name~.class, predicate);\n}\n\nprivate Optional<~name~> find~name;format=\"capitalize\"~(BaseTreeNode<?> parent, java.util.function.Predicate<~name~> predicate) {\n\treturn treeModel.find(parent, ~name~.class, predicate);\n}\n\nprivate java.util.stream.Stream<~name~> getSelected~name~s() {\n\treturn getSelectedNodes(~name~.class);\n}\n\nprivate void on~name~Selected(~name~ selectedNode) {\n\t~selectionStatements:{it|~it~};separator=\"\\n\"~\n} ",
      "parameters" : [ {
        "uuid" : "ca9215d3-0be1-4d48-b46f-ab856ba1cdab",
        "name" : "name",
        "type" : "SINGLE",
        "argumentType" : "String"
      }, {
        "uuid" : "2b516acd-1c47-4ed7-80e5-4be497c1328e",
        "name" : "modelType",
        "type" : "SINGLE",
        "argumentType" : "Object"
      }, {
        "uuid" : "51f3c617-c341-4f22-b8aa-5626f30e2d1c",
        "name" : "hasUuid",
        "type" : "SINGLE",
        "argumentType" : "Boolean"
      }, {
        "uuid" : "911980ea-5c02-4952-a2a5-464be92a9a99",
        "name" : "fields",
        "type" : "KVLIST",
        "argumentType" : "Object",
        "keys" : [ {
          "uuid" : "d14b359e-546d-4007-9fda-5202aefc5e1b",
          "name" : "type",
          "argumentType" : "Object"
        }, {
          "uuid" : "53a78064-00ab-44c9-aad2-a20f557b8a78",
          "name" : "name",
          "argumentType" : "Object"
        } ]
      }, {
        "uuid" : "def6fdca-0641-4d81-98e8-dfc55ec445ea",
        "name" : "privateFields",
        "type" : "KVLIST",
        "argumentType" : "Object",
        "keys" : [ {
          "uuid" : "d3bf100c-7820-4a8e-90c6-9ed6306afaf0",
          "name" : "type",
          "argumentType" : "Object"
        }, {
          "uuid" : "76b20387-0f11-4549-9531-8b066b7c360c",
          "name" : "name",
          "argumentType" : "Object"
        }, {
          "uuid" : "0d9dd492-e9a0-4a3c-879c-d3364ea1fd02",
          "name" : "init",
          "argumentType" : "Object"
        } ]
      }, {
        "uuid" : "94c28a8a-5d7c-43e4-9bc3-eeb01fb9d7d8",
        "name" : "parameters",
        "type" : "KVLIST",
        "argumentType" : "Object",
        "keys" : [ {
          "uuid" : "e2eb3f1d-ce8c-4a56-9e2f-4160bdcfef17",
          "name" : "type",
          "argumentType" : "Object"
        }, {
          "uuid" : "883a1a66-5a90-4ae5-afdc-ac2df12e166e",
          "name" : "name",
          "argumentType" : "String"
        } ]
      }, {
        "uuid" : "7561af96-1b15-47ca-a808-588e5bebdabc",
        "name" : "icon",
        "type" : "SINGLE",
        "argumentType" : "Object"
      }, {
        "uuid" : "2eb89bf4-b00a-464a-ab77-5c2fdd1d7095",
        "name" : "labelExpression",
        "type" : "SINGLE",
        "argumentType" : "Object"
      }, {
        "uuid" : "b7c6e1c2-b875-4765-9422-aa12ffd99202",
        "name" : "tooltipExpression",
        "type" : "SINGLE",
        "argumentType" : "Object"
      }, {
        "uuid" : "36f95ca6-4eb8-4191-a869-da86548d44ad",
        "name" : "constructorStatements",
        "type" : "LIST",
        "argumentType" : "Object"
      }, {
        "uuid" : "f5220002-8c7d-4d46-9070-3a56921bc5d4",
        "name" : "getActionsStatements",
        "type" : "LIST",
        "argumentType" : "Object"
      }, {
        "uuid" : "706f675d-c5e2-4683-9c1e-682bd6391efa",
        "name" : "actions",
        "type" : "LIST",
        "argumentType" : "Object"
      }, {
        "uuid" : "6fcc71e8-ffb9-43e0-a1cf-347a0dfd5189",
        "name" : "methods",
        "type" : "LIST",
        "argumentType" : "Object"
      }, {
        "uuid" : "17575689-5fe1-4ff2-9473-af3913bebfc7",
        "name" : "selectionStatements",
        "type" : "LIST",
        "argumentType" : "Object"
      } ],
      "children" : [ {
        "uuid" : "a6c5217a-625b-477c-bb58-cc5fe0e708fb",
        "name" : "TreeNodeAction",
        "text" : "new~if(isTransactional)~Transaction~endif~Action(\"~title~\", actionEvent -> {\n\t~statements:{it|~it~};separator=\"\\n\"~\n}) ",
        "parameters" : [ {
          "uuid" : "cf781c02-1cd0-4d2b-bed1-eb8716afcd0a",
          "name" : "isTransactional",
          "type" : "SINGLE",
          "argumentType" : "Boolean"
        }, {
          "uuid" : "12d3f5d1-df43-4cb5-a933-8a8bb9906f3d",
          "name" : "title",
          "type" : "SINGLE",
          "argumentType" : "Object"
        }, {
          "uuid" : "f1f82c21-b9ae-471e-8fa5-d53da216f21a",
          "name" : "statements",
          "type" : "LIST",
          "argumentType" : "Object"
        } ]
      } ]
    }, {
      "uuid" : "9cd0b58c-de3a-4156-9ab3-4da3a36a766f",
      "name" : "EventSubscription",
      "text" : "@org.greenrobot.eventbus.Subscribe(~if(threadMode)~threadMode = org.greenrobot.eventbus.ThreadMode.~threadMode~~endif~)\npublic void on~eventName;format=\"capitalize\"~(nextgen.events.~eventName~ event) {\n\t~statements:{it|~it~};separator=\"\\n\"~\n} ",
      "parameters" : [ {
        "uuid" : "6aa301b9-6718-4763-81be-4724ec122a11",
        "name" : "threadMode",
        "type" : "SINGLE",
        "argumentType" : "Object"
      }, {
        "uuid" : "7e43929d-2fdd-493d-92da-9d6667bb4124",
        "name" : "eventName",
        "type" : "SINGLE",
        "argumentType" : "Object"
      }, {
        "uuid" : "7eed867d-d74d-41e8-8af9-5daa7b740edf",
        "name" : "statements",
        "type" : "LIST",
        "argumentType" : "Object"
      } ]
    } ]
  }, {
    "uuid" : "ddde208a-2415-4367-a5f7-35e5e3ea0c9a",
    "name" : "Canvas",
    "text" : "package ~packageName~;\n\nimport org.piccolo2d.PCamera;\nimport org.piccolo2d.PCanvas;\nimport org.piccolo2d.PLayer;\nimport org.piccolo2d.PNode;\nimport org.piccolo2d.event.*;\nimport org.piccolo2d.nodes.PPath;\nimport org.piccolo2d.nodes.PText;\nimport org.piccolo2d.util.PBounds;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.KeyEvent;\nimport java.awt.geom.AffineTransform;\nimport java.awt.geom.Point2D;\nimport java.awt.geom.Rectangle2D;\nimport java.beans.PropertyChangeEvent;\nimport java.beans.PropertyChangeListener;\nimport java.util.*;\nimport java.util.List;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.function.Consumer;\nimport java.util.function.Predicate;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\nimport java.util.stream.StreamSupport;\n\nimport static java.awt.event.KeyEvent.*;\n\n~imports:{it|~it~};separator=\"\\n\"~\n\npublic class ~name~ extends PCanvas implements PInputEventListener {\n\n\tprivate final static org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(~name~.class);\n\n\tprivate final PLayer nodeLayer;\n\tprivate final PLayer relationLayer = new PLayer();\n\n\tfinal Map<String, BaseCanvasNode<?~gt()~> nodeMap = new ConcurrentHashMap<>();\n\tfinal Map<String, BaseCanvasRelation> relationMap = new ConcurrentHashMap<>();\n\n\tprivate final SelectEventsHandler selectEventHandler = new SelectEventsHandler();\n\tprivate final CanvasInputEventsHandler canvasInputEventsHandler = new CanvasInputEventsHandler();\n\tfinal CanvasZoomHandler canvasZoomHandler = new CanvasZoomHandler();\n\n\t~fields:{it|private ~it.type~ ~it.name~;};separator=\"\\n\"~\n\t~finalFields:{it|private final ~it.type~ ~it.name~ = ~it.init~;};separator=\"\\n\"~\n\n\tpublic ~name~(~fields:{it|~it.type~ ~it.name~};separator=\", \"~) {\n\t\tthis(UIManager.getColor(\"Panel.background\"), new Dimension(1024, 1024)~if(fields)~, ~fields:{it|~it.name~};separator=\", \"~~endif~);\n\t}\n\t\n\tpublic ~name~(Color background, Dimension preferredSize~if(fields)~, ~fields:{it|~it.type~ ~it.name~};separator=\", \"~~endif~) {\n\t\tsuper();\n\n\t\t~fields:{it|this.~it.name~ = ~it.name~;};separator=\"\\n\"~\n\n\t\tsetBackground(background);\n\t\tsetPreferredSize(preferredSize);\n\t\tnodeLayer = getLayer();\n\t\tgetCamera().addLayer(0, relationLayer);\n\n\t\tremoveInputEventListener(getZoomEventHandler());\n\t\taddInputEventListener(canvasZoomHandler);\n\t\taddInputEventListener(canvasInputEventsHandler);\n\t\t~constructorStatements:{it|~it~};separator=\"\\n\"~\n\t}\n\n\tpublic ~name~ thisCanvas() {\n\t\treturn this;\n\t}\n\n\t~methods:{it|~it~};separator=\"\\n\\n\"~\n\n\t@Override\n\tpublic void processEvent(PInputEvent pInputEvent, int i) {\n\t\tcanvasInputEventsHandler.processEvent(pInputEvent, i);\n\t}\n\n\tpublic Point getCenterPosition() {\n\t\tfinal java.awt.geom.Point2D center2D = getCamera().getViewBounds().getCenter2D();\n\t\treturn new Point((int) center2D.getX(), (int) center2D.getY());\n\t}\n\n\tpublic Point getCurrentMousePosition() {\n\t\tfinal Point mousePosition = getMousePosition();\n\t\tif (mousePosition == null) return getCenterPosition();\n\t\tfinal java.awt.geom.Point2D localToView = getCamera().localToView(mousePosition);\n\t\treturn new Point((int) localToView.getX(), (int) localToView.getY());\n\t}\n\n\tpublic void centerNode(BaseCanvasNode<?> node) {\n\t\tSwingUtilities.invokeLater(() -> getCamera().animateViewToCenterBounds(node.getGlobalFullBounds(), false, 500));\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic Stream<BaseCanvasNode<?~gt()~> getAllNodes() {\n\t\treturn nodeLayer.getAllNodes().stream().filter((Predicate<PNode>) node -> node instanceof BaseCanvasNode);\n\t}\n\n\tpublic Stream<BaseCanvasNode<?~gt()~> getSelectedNodes() {\n\t\treturn getAllNodes().filter(BaseCanvasNode::isSelected);\n\t}\n\n\tpublic Stream<BaseCanvasNode<?~gt()~> getUnselectedNodes() {\n\t\treturn getAllNodes().filter(stNode -> !stNode.isSelected());\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic <R extends BaseCanvasRelation> Stream<R> getAllRelations() {\n\t\treturn relationLayer.getAllNodes().stream().filter((Predicate<PNode>) node -> node instanceof BaseCanvasRelation);\n\t}\n\n\tpublic <R extends BaseCanvasRelation> Stream<R> getSelectedRelations() {\n\t\treturn (Stream<R>) getAllRelations().filter(BaseCanvasRelation::isSelected);\n\t}\n\n\tpublic <N extends BaseCanvasNode<?~gt()~> N addNode(N node) {\n\t\treturn addNode(node.getUuid(), () -> node);\n\t}\n\n\tpublic <N extends BaseCanvasNode<?~gt()~> N addNode(String uuid, java.util.function.Supplier<N> supplier) {\n\t\treturn addNode(uuid, supplier, true);\n\t}\n\n\tpublic <N extends BaseCanvasNode<?~gt()~> N addNode(String uuid, java.util.function.Supplier<N> supplier, boolean centerNode) {\n\n\t\tfinal N existing = getNode(uuid);\n\t\tif (existing != null) {\n\t\t\tlog.debug(\"N-\" + uuid + \" exists in canvas\");\n\t\t\texisting.refresh();\n\t\t\texisting.select();\n\t\t\treturn existing;\n\t\t}\n\t\tlog.debug(\"N-\" + uuid + \" added to canvas\");\n\n\t\tfinal N node= supplier.get();\n\t\tnode.select();\n\t\tnode.setOffset(getCenterPosition());\n\t\tnodeMap.put(node.getUuid(), node);\n\t\tnodeLayer.addChild(node);\n\n\t\t//nextgen.st.STAppEvents.postNodeAddedToCanvas(this, node);\n\n\t\tnode.addedToCanvas();\n\n\t\tgetAllNodes()\n\t\t\t\t.filter(stNode -> !stNode.getUuid().equals(node.getUuid()))\n\t\t\t\t.forEach(stNode -> stNode.newNodeAdded(node));\n\n\t\tSwingUtilities.invokeLater(() -> {\n\t\t\tnode.refresh();\n\t\t\tif(centerNode) centerNode(node);\n\t\t});\n\n\t\treturn node;\n\t}\n\n\tpublic <N extends BaseCanvasNode<?~gt()~> N getNode(String uuid) {\n\t\treturn (N) nodeMap.get(uuid);\n\t}\n\n\t<N extends BaseCanvasNode<?~gt()~> N removeNode(String uuid) {\n\t\tfinal BaseCanvasNode remove = nodeMap.remove(uuid);\n\t\tfinal N old = (N) nodeLayer.removeChild(remove);\n\t\tlog.debug(\"\\tN-\"+ uuid + \" removed from canvas : \" + (old == null ? \"null\" : old.getUuid()));\n\t\treturn (N) remove;\n\t}\n\n\tpublic <R extends BaseCanvasRelation> R addRelation(String uuid, java.util.function.Supplier<R> supplier) {\n\n\t\tfinal R existing = getRelation(uuid);\n\t\tif (existing != null) {\n\t\t\tlog.debug(\"R-\"+ uuid + \" exists in canvas\");\n\t\t\treturn existing;\n\t\t}\n\t\tlog.debug(\"R-\"+ uuid + \" added to canvas\");\n\n\t\tfinal R relation = supplier.get();\n\t\trelationMap.put(relation.getUuid(), relation);\n\t\trelationLayer.addChild(relation);\n\t\treturn relation;\n\t}\n\n\t<R extends BaseCanvasRelation> R removeRelation(String uuid) {\n\t\tfinal BaseCanvasRelation remove = relationMap.remove(uuid);\n\t\tif (remove == null) return null;\n\n\t\tremove.close();\n\t\tfinal R old = (R) relationLayer.removeChild(remove);\n\t\tlog.debug(\"\\tR-\"+ uuid + \" removed from canvas : \" + (old == null ? \"null\" : old.getUuid()));\n\t\treturn (R) remove;\n\t}\n\n\tpublic <R extends BaseCanvasRelation> R getRelation(String uuid) {\n\t\treturn (R) relationMap.get(uuid);\n\t}\n\n\tprotected void onCanvasRightClick(JPopupMenu pop, PInputEvent event) {\n\n\t\t~rightClickStatements:{it|~it~};separator=\"\\n\"~\n\n\t\t~rightClickActions:{it|pop.add(new ~it.name~(event));};separator=\"\\n\"~\n\t\tpop.addSeparator();\n\t\tpop.add(new SelectAllNodes(event));\n\t\tpop.add(new UnselectAllNodes(event));\n\t\tpop.add(new RetainSelectedNodes(event));\n\t\tpop.add(new CloseSelectedNodes(event));\n\t\tpop.add(new CloseAllAction(event));\n\t\tpop.addSeparator();\n\t\tpop.add(new LayoutVerticallyAction(event, getCurrentMousePosition(), 20));\n\t}\n\n\tprotected void onCanvasLeftClick(PInputEvent event) {\n\t\tSwingUtilities.invokeLater(() -> getSelectedNodes().forEach(BaseCanvasNode::unselect));\n\t}\n\n\tprotected void onCanvasKeyPressed(PInputEvent event) {\n\t\tswitch (event.getKeyCode()) {\n~keyPressActions:{it|\n\t\t\tcase VK_~it.key~:\n\t\t\t\tnew ~it.name~(this, event).actionPerformed(null);\n\t\t\t\tbreak;\n};separator=\"\\n\"~\n\t\t\tcase VK_A:\n\t\t\t\tnew SelectAllNodes(event).actionPerformed(null);\n\t\t\t\tbreak;\n\n\t\t\tcase VK_ESCAPE:\n\t\t\t\tnew UnselectAllNodes(event).actionPerformed(null);\n\t\t\t\tbreak;\n\n\t\t\tcase VK_R:\n\t\t\t\tnew RetainSelectedNodes(event).actionPerformed(null);\n\t\t\t\tbreak;\n\n\t\t\tcase VK_C:\n\t\t\t\tif (event.isControlDown())\n\t\t\t\t\tnew CloseAllAction(event).actionPerformed(null);\n\t\t\t\telse\n\t\t\t\t\tnew CloseSelectedNodes(event).actionPerformed(null);\n\t\t\t\tbreak;\n\n\t\t\tcase VK_1:\n\t\t\t\tnew LayoutVerticallyAction(event, getCurrentMousePosition(), 20).actionPerformed(null);\n\t\t\t\tbreak;\n\n\t\t\tcase VK_SPACE:\n\t\t\t\tnew PopupAction(event).actionPerformed(null);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tprivate final class CanvasInputEventsHandler extends PBasicInputEventHandler {\n\n\t\t@Override\n\t\tpublic void mouseEntered(PInputEvent event) {\n\t\t\tif (!this.equals(event.getInputManager().getKeyboardFocus())) {\n\t\t\t\tevent.getInputManager().setKeyboardFocus(this);\n\t\t\t\trequestFocusInWindow();\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic void mouseExited(PInputEvent event) {\n\t\t\tevent.getInputManager().setKeyboardFocus(null);\n\t\t}\n\n\t\t@Override\n\t\tpublic void mouseClicked(PInputEvent event) {\n\t\t\tremoveInputEventListener(selectEventHandler);\n\t\t\tif (!this.equals(event.getInputManager().getKeyboardFocus())) event.getInputManager().setKeyboardFocus(this);\n\t\t\tif (event.isRightMouseButton()) {\n\t\t\t\tSwingUtilities.invokeLater(() -> {\n\t\t\t\t\tfinal JPopupMenu pop = new JPopupMenu();\n\t\t\t\t\tsetCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));\n\t\t\t\t\tonCanvasRightClick(pop, event);\n\t\t\t\t\tsetCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));\n\t\t\t\t\tpop.show(thisCanvas(), (int) event.getCanvasPosition().getX(), (int) event.getCanvasPosition().getY());\n\t\t\t\t});\n\t\t\t} else if (event.isLeftMouseButton()) SwingUtilities.invokeLater(() -> onCanvasLeftClick(event));\n\t\t}\n\n\t\t@Override\n\t\tpublic void keyPressed(PInputEvent event) {\n\t\t\tif (event.isControlDown()) {\n\t\t\t\tremoveInputEventListener(selectEventHandler);\n\t\t\t\taddInputEventListener(selectEventHandler.init(event));\n\t\t\t} else {\n\t\t\t\tonCanvasKeyPressed(event);\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic void keyReleased(PInputEvent event) {\n\t\t\tif (event.getKeyCode() == KeyEvent.VK_CONTROL) removeInputEventListener(selectEventHandler.end());\n\t\t}\n\n\t\t@Override\n\t\tpublic void mouseMoved(PInputEvent event) {\n\t\t\tif (!event.isControlDown()) removeInputEventListener(selectEventHandler.end());\n\t\t\tinvalidate();\n\t\t\trepaint();\n\t\t}\n\t}  \n\n\tprivate final class SelectEventsHandler extends PBasicInputEventHandler {\n\n\t\tprivate PPath selectionRectangle;\n\t\tprivate boolean isDragging = true;\n\t\tprivate double startX;\n\t\tprivate double startY;\n\n\t\tPInputEventListener init(PInputEvent event) {\n\t\t\tisDragging = event.isControlDown();\n\t\t\tif (selectionRectangle != null) nodeLayer.removeChild(selectionRectangle);\n\t\t\tstartX = getCamera().localToView(event.getCanvasPosition()).getX();\n\t\t\tstartY = getCamera().localToView(event.getCanvasPosition()).getY();\n\t\t\tselectionRectangle = PPath.createRectangle(startX, startY, 1, 1);\n\t\t\tselectionRectangle.setTransparency(.5f);\n\t\t\tnodeLayer.addChild(selectionRectangle);\n\t\t\treturn this;\n\t\t}\n\n\t\t@Override\n\t\tpublic void mouseMoved(PInputEvent event) {\n\t\t\tif (isDragging) {\n\t\t\t\tfinal double eventX = getCamera().localToView(event.getCanvasPosition()).getX();\n\t\t\t\tfinal double eventY = getCamera().localToView(event.getCanvasPosition()).getY();\n\t\t\t\tfinal boolean left = eventX < startX;\n\t\t\t\tselectionRectangle.setX(left ? eventX : startX);\n\t\t\t\tselectionRectangle.setWidth(left ? (startX - eventX) : (eventX - startX));\n\t\t\t\tfinal boolean top = eventY < startY;\n\t\t\t\tselectionRectangle.setY(top ? eventY : startY);\n\t\t\t\tselectionRectangle.setHeight(top ? (startY - eventY) : (eventY - startY));\n\t\t\t\tfinal PBounds fullBounds = selectionRectangle.getFullBounds();\n\t\t\t\tSwingUtilities.invokeLater(() -> getAllNodes()\n\t\t\t\t\t.filter(node -> !node.isSelected())\n\t\t\t\t\t.forEach(node -> {\n\t\t\t\t\t\tif (fullBounds.contains(node.getFullBounds())) node.select();\n\t\t\t\t\t}));\n\t\t\t}\n\t\t}\n\n\t\tpublic PInputEventListener end() {\n\t\t\tisDragging = false;\n\t\t\tif (selectionRectangle != null) nodeLayer.removeChild(selectionRectangle);\n\t\t\treturn this;\n\t\t}\n\t}  \n\n\tprivate static class CanvasZoomHandler extends PBasicInputEventHandler {\n\n\t\tfinal private static double maxZoomScale = 2.0d;\n\t\tfinal private static double minZomScale = 0.025d;\n\t\tprivate double scaleFactor = 0.05d;\n\n\t\tCanvasZoomHandler() {\n\t\t\tsuper();\n\t\t\tfinal PInputEventFilter eventFilter = new PInputEventFilter();\n\t\t\teventFilter.rejectAllEventTypes();\n\t\t\teventFilter.setAcceptsMouseWheelRotated(true);\n\t\t\tsetEventFilter(eventFilter);\n\t\t}\n\n\t\tpublic void mouseWheelRotated(final PInputEvent event) {\n\t\t\tfinal PCamera camera = event.getCamera();\n\t\t\tif ((camera.getViewScale() < minZomScale && event.getWheelRotation() < 0) || (camera.getViewScale() > maxZoomScale && event.getWheelRotation() > 0)) return;\n\t\t\tfinal double scale = 1.0d + event.getWheelRotation() * scaleFactor;\n\t\t\tfinal java.awt.geom.Point2D viewAboutPoint = event.getPosition();\n\t\t\tcamera.scaleViewAboutPoint(scale, viewAboutPoint.getX(), viewAboutPoint.getY());\n\t\t}\n\t}  \n\n\tabstract class CanvasAction extends AbstractAction {\n\n\t\tfinal PInputEvent event;\n\n\t\tCanvasAction(String name, PInputEvent event) {\n\t\t\tsuper(name);\n\t\t\tthis.event = event;\n\t\t}\n\n\t\t@Override\n\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\tactionPerformed(event, e);\n\t\t}\n\n\t\tabstract void actionPerformed(PInputEvent event, ActionEvent e);\n\t}\n\n\t~BaseCanvasNode()~\n\n\t~BaseCanvasRelation()~\n\n\t~actions:{it|~it~};separator=\"\\n\\n\"~\n\tfinal class PopupAction extends CanvasAction {\n\n\t\tPopupAction(PInputEvent event) {\n\t\t\tsuper(\"Popup\", event);\n\t\t}\n\n\t\t@Override\n\t\tvoid actionPerformed(PInputEvent event, ActionEvent e) {\n\t\t\tjavax.swing.SwingUtilities.invokeLater(() -> { \n\t\t\t\tfinal javax.swing.JPopupMenu pop = new javax.swing.JPopupMenu();\n\t\t\t\tsetCursor(java.awt.Cursor.getPredefinedCursor(java.awt.Cursor.WAIT_CURSOR));\n\t\t\t\tonCanvasRightClick(pop, event);\n\t\t\t\tsetCursor(java.awt.Cursor.getPredefinedCursor(java.awt.Cursor.DEFAULT_CURSOR));\n\t\t\t\tpop.show(thisCanvas(), (int) event.getCanvasPosition().getX(), (int) event.getCanvasPosition().getY());\n\t\t\t});\n\t\t}\n\t}\n\t\n\tfinal class SelectAllNodes extends CanvasAction {\n\n\t\tSelectAllNodes(PInputEvent event) {\n\t\t\tsuper(\"Select all nodes\", event);\n\t\t}\n\n\t\t@Override\n\t\tvoid actionPerformed(PInputEvent event, ActionEvent e) {\n\t\t\tjavax.swing.SwingUtilities.invokeLater(() -> getAllNodes().forEach(BaseCanvasNode::select));\n\t\t}\n\t}\n\n\tfinal class RetainSelectedNodes extends CanvasAction {\n\n\t\tRetainSelectedNodes(PInputEvent event) {\n\t\t\tsuper(\"Retain selected nodes\", event);\n\t\t}\n\n\t\t@Override\n\t\tvoid actionPerformed(PInputEvent event, ActionEvent e) {\n\t\t\tjavax.swing.SwingUtilities.invokeLater(() -> getUnselectedNodes().forEach(BaseCanvasNode::close));\n\t\t}\n\t}\n\n\tfinal class UnselectAllNodes extends CanvasAction {\n\n\t\tUnselectAllNodes(PInputEvent event) {\n\t\t\tsuper(\"Unselect all nodes\", event);\n\t\t}\n\n\t\t@Override\n\t\tvoid actionPerformed(PInputEvent event, ActionEvent e) {\n\t\t\tjavax.swing.SwingUtilities.invokeLater(() -> getSelectedNodes().forEach(BaseCanvasNode::unselect));\n\t\t}\n\t}\n\n\tfinal class CloseSelectedNodes extends CanvasAction {\n\n\t\tCloseSelectedNodes(PInputEvent event) {\n\t\t\tsuper(\"Close selected nodes\", event);\n\t\t}\n\n\t\t@Override\n\t\tvoid actionPerformed(PInputEvent event, ActionEvent e) {\n\t\t\tjavax.swing.SwingUtilities.invokeLater(() -> getSelectedNodes().forEach(BaseCanvasNode::close));\n\t\t}\n\t}\n\n\tfinal class CloseAllAction extends CanvasAction {\n\n\t\tCloseAllAction(PInputEvent event) {\n\t\t\tsuper(\"Close all\", event);\n\t\t}\n\n\t\t@Override\n\t\tvoid actionPerformed(PInputEvent event, ActionEvent e) {\n\t\t\tgetAllRelations().forEach(relation -> removeRelation(relation.getUuid()));\n\t\t\tgetAllNodes().forEach(node -> removeNode(node.getUuid()));\n\t\t\trelationLayer.removeAllChildren();\n\t\t\tSwingUtilities.invokeLater(() -> {\n\t\t\t\tinvalidate();\n\t\t\t\trepaint();\n\t\t\t});\n\t\t}\n\t}\n\t\n\tfinal class LayoutVerticallyAction extends CanvasAction {\n\n\t\tprivate java.awt.Point position;\n\t\tprivate int heightPadding;\n\n\t\tLayoutVerticallyAction(PInputEvent event, java.awt.Point position,int heightPadding) {\n\t\t\tsuper(\"Layout selected nodes vertically\", event);\n\t\t\tthis.position = position;\n\t\t\tthis.heightPadding = heightPadding;\n\t\t}\n\n\t\t@Override\n\t\tvoid actionPerformed(PInputEvent event, ActionEvent e) {\n\t\t\tSwingUtilities.invokeLater(() -> getSelectedNodes().forEach(new Consumer<BaseCanvasNode>() {\n\n\t\t\t\tdouble x = position.getX();\n\t\t\t\tdouble y = position.getY();\n\t\t\t\tdouble height = -1d;\n\n\t\t\t\t@Override\n\t\t\t\tpublic void accept(BaseCanvasNode abstractNode) {\n\t\t\t\t\tif (height == -1) {\n\t\t\t\t\t\tabstractNode.setOffset(x, y);\n\t\t\t\t\t\theight = abstractNode.getHeight();\n\t\t\t\t\t} else {\n\t\t\t\t\t\ty += height + heightPadding;\n\t\t\t\t\t\tabstractNode.setOffset(x, y);\n\t\t\t\t\t\theight = abstractNode.getHeight();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}));\n\t\t}\n\t}\n\n\t~canvasNodes:{it|~it~};separator=\"\\n\\n\"~\n\n\t~canvasRelations:{it|~it~};separator=\"\\n\\n\"~\n} ",
    "children" : [ {
      "uuid" : "e1ea54f2-0ecd-41cc-9904-1a06be717f12",
      "name" : "BaseCanvasNode",
      "text" : "protected class BaseCanvasNode<T> extends PNode {\n\n\tprotected PText child;\n\tprotected final Set<String> outgoing = new LinkedHashSet<>();\n\tprotected final Set<String> incoming = new LinkedHashSet<>();\n\n\tprivate PPath rectangle;\n\n\tpublic BaseCanvasNode(T model, String uuid, String label) {\n\t\tthis.addAttribute(\"_defaultColor\", UIManager.getColor(\"TextField.foreground\"));\n\t\tthis.addAttribute(\"_selectedColor\", Color.decode(\"#2b8cbe\"));\n\t\tthis.addAttribute(\"_highlightedColor\", Color.decode(\"#e66101\"));\n\t\tthis.addAttribute(\"_rectangleColor\", new Color(253, 141, 60, 50));\n\t\tthis.addAttribute(\"_model\", model);\n\t\tthis.addAttribute(\"_uuid\", uuid);\n\t\tthis.addAttribute(\"_text\", label);\n\t\tthis.child = new PText(getText() == null ? getUuid() : getText());\n\t\tthis.addChild(this.child);\n\n\t\tfinal NodeInputEventHandler nodeInputEventHandler = new NodeInputEventHandler();\n\t\tnodeInputEventHandler.getEventFilter().setMarksAcceptedEventsAsHandled(true);\n\t\taddInputEventListener(nodeInputEventHandler);\n\t\taddInputEventListener(canvasZoomHandler);\n\n\t\t//org.greenrobot.eventbus.EventBus.getDefault().register(this);\n\t}\n\n\tprotected BaseCanvasNode<T> thisNode() {\n\t\treturn this;\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic T getModel() {\n\t\treturn (T) getAttribute(\"_model\");\n\t}\n\n\tpublic void addedToCanvas() {\n\n\t}\n\n\tpublic void newNodeAdded(BaseCanvasNode<?> node) {\n\n\t}\n\n\t@Override\n\tpublic double getHeight() {\n\t\treturn child.getHeight();\n\t}\n\n\t@Override\n\tpublic double getWidth() {\n\t\treturn child.getWidth();\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn getUuid() + \" \" + getText();\n\t}\n\n\t@Override\n\tpublic boolean equals(Object o) {\n\t\tif (this == o) return true;\n\t\tif (o == null || getClass() != o.getClass()) return false;\n\n\t\tBaseCanvasNode<?> other = (BaseCanvasNode<?>) o;\n\n\t\treturn getUuid().equals(other.getUuid());\n\t}\n\n\t@Override\n\tpublic int hashCode() {\n\t\treturn getUuid().hashCode();\n\t}\n\n\tpublic String getUuid() {\n\t\treturn (String) getAttribute(\"_uuid\");\n\t}\n\n\tpublic String getText() {\n\t\treturn (String) getAttribute(\"_text\");\n\t}\n\n\tpublic void setText(String text) {\n\t\taddAttribute(\"_text\", text == null || text.trim().length() == 0 ? getUuid().toString() : text);\n\t\tchild.setText(getText());\n\t\trefresh();\n\t}\n\n\tpublic void refresh() {\n\t\tSwingUtilities.invokeLater(() -> {\n\t\t\tsetPaintInvalid(true);\n\t\t\trepaint();\n\t\t});\n\t}\n\n\tpublic void addOutgoingRelation(String relation) {\n\t\tthis.outgoing.add(relation);\n\t}\n\n\tpublic void addIncomingRelation(String relation) {\n\t\tthis.incoming.add(relation);\n\t}\n\n\tpublic java.util.stream.Stream<String> outgoing() {\n\t\treturn this.outgoing.stream();\n\t}\n\n\tpublic java.util.stream.Stream<String> incoming() {\n\t\treturn this.incoming.stream();\n\t}\n\n\tpublic void unselect() {\n\t\taddAttribute(\"_selected\", Boolean.FALSE);\n\t\tSwingUtilities.invokeLater(() -> child.setTextPaint((Color) getAttribute(\"_defaultColor\")));\n\t}\n\n\tpublic void select() {\n\t\taddAttribute(\"_selected\", Boolean.TRUE);\n\t\tSwingUtilities.invokeLater(() -> child.setTextPaint((Color) getAttribute(\"_selectedColor\")));\n\t}\n\n\tpublic boolean isSelected() {\n\t\treturn getBooleanAttribute(\"_selected\", false);\n\t}\n\n\tpublic void unhighlight() {\n\t\taddAttribute(\"_highlight\", Boolean.FALSE);\n\t\tSwingUtilities.invokeLater(() -> {\n\t\t\tchild.setTextPaint(isSelected() ? (Color) getAttribute(\"_selectedColor\") : (Color) getAttribute(\"_defaultColor\"));\n\t\t\tif (rectangle != null) BaseCanvasNode.this.removeChild(rectangle);\t\n\t\t});\n\t}\n\n\tpublic void highlight() {\n\t\taddAttribute(\"_highlight\", Boolean.TRUE);\n\t\tSwingUtilities.invokeLater(() -> {\n\t\t\tfinal PBounds fullBounds = child.getFullBoundsReference();\n\t\t\trectangle = PPath.createRectangle(fullBounds.getX(), fullBounds.getY(), fullBounds.getWidth(), fullBounds.getHeight());\n\t\t\trectangle.setPaint((Color) getAttribute(\"_rectangleColor\"));\n\t\t\trectangle.setStroke(new BasicStroke());\n\t\t\tBaseCanvasNode.this.addChild(rectangle);\n\n\t\t\tchild.setTextPaint((Color) getAttribute(\"_highlightedColor\"));\n\t\t});\n\t}\n\n\tpublic void close() {\n\t\tSwingUtilities.invokeLater(() -> {\n\t\t\tfor (String uuid : incoming) removeRelation(uuid);\n\t\t\tfor (String uuid : outgoing) removeRelation(uuid);\n\t\t\torg.greenrobot.eventbus.EventBus.getDefault().unregister(BaseCanvasNode.this);\n\t\t\tremoveNode(getUuid());\t\t\t\n\t\t});\n\t}\n\n\tprotected void onNodeKeyPressed(PInputEvent event) {\n\t\tswitch (event.getKeyCode()) {\n\t\t\tcase VK_1:\n\t\t\t\tnew LayoutTreeAction(BaseCanvasNode.this, event).actionPerformed(null);\n\t\t\t\tbreak;\n\n\t\t\tcase VK_2:\n\t\t\t\tnew LayoutCircleAction(BaseCanvasNode.this, event).actionPerformed(null);\n\t\t\t\tbreak;\n\n\t\t\tcase VK_C:\n\t\t\t\tnew CloseNode(event).actionPerformed(null);\n\t\t\t\tbreak;\n\n\t\t\tcase VK_R:\n\t\t\t\tnew RetainNode(event).actionPerformed(null);\n\t\t\t\tbreak;\n\n\t\t\tcase VK_F:\n\t\t\t\tnew PopupAction(event).actionPerformed(null);\n\t\t\t\tbreak;\n\n\t\t\tcase VK_B:\n\t\t\t\tnew DebugAction(event).actionPerformed(null);\n\t\t\t\tbreak;\n\n\t\t}\n\t}\n\n\tprotected void onNodeLeftClick(PInputEvent event) {\n\t\tif (isSelected()) unselect();\n\t\telse select();\n\t}\n\n\tprotected void onNodeRightClick(PInputEvent event, JPopupMenu pop) {\n\n\t\tpop.add(new LayoutTreeAction(BaseCanvasNode.this, event));\n\t\tpop.add(new LayoutCircleAction(BaseCanvasNode.this, event));\n\t\tpop.add(new RetainNode(event));\n\t\tpop.add(new CloseNode(event));\n\t\tpop.add(new DebugAction(event));\n\n\t}\n\n\tprivate final class NodeInputEventHandler extends PDragSequenceEventHandler {\n\n\t\t@Override\n\t\tfinal protected void startDrag(PInputEvent event) {\n\t\t\tsuper.startDrag(event);\n\t\t}\n\n\t\t@Override\n\t\tfinal protected void drag(PInputEvent event) {\n\t\t\tsuper.drag(event);\n\t\t\ttranslate(event.getDelta().width, event.getDelta().height);\n\t\t}\n\n\t\t@Override\n\t\tfinal protected void endDrag(PInputEvent event) {\n\t\t\tsuper.endDrag(event);\n\t\t}\n\n\t\t@Override\n\t\tfinal protected boolean shouldStartDragInteraction(PInputEvent event) {\n\t\t\treturn super.shouldStartDragInteraction(event);\n\t\t}\n\n\t\t@Override\n\t\tpublic void mouseEntered(PInputEvent event) {\n\t\t\tif (!event.isControlDown()) \n\t\t\t\tevent.getInputManager().setKeyboardFocus(this);\n\t\t\thighlight();\n\t\t}\n\n\t\t@Override\n\t\tpublic void mouseExited(PInputEvent event) {\n\t\t\tunhighlight();\n\t\t\tif (!event.isControlDown()) \n\t\t\t\tevent.getInputManager().setKeyboardFocus(thisCanvas());\n\t\t}\n\n\t\t@Override\n\t\tpublic void mouseClicked(PInputEvent event) {\n\t\t\tif (event.isRightMouseButton()) {\n\t\t\t\tfinal JPopupMenu pop = new JPopupMenu();\n\t\t\t\tthisCanvas().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));\n\t\t\t\tonNodeRightClick(event, pop);\n\t\t\t\tthisCanvas().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));\n\t\t\t\tpop.show(thisCanvas(), (int) event.getCanvasPosition().getX(), (int) event.getCanvasPosition().getY());\n\t\t\t} else if (event.isLeftMouseButton()) {\n\t\t\t\tSwingUtilities.invokeLater(() -> onNodeLeftClick(event));\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic void keyPressed(PInputEvent event) {\n\t\t\tonNodeKeyPressed(event);\n\t\t}\n\t}  \t\n\n\tabstract class NodeAction extends AbstractAction {\n\n\t\tfinal PInputEvent event;\n\n\t\tNodeAction(String name, PInputEvent event) {\n\t\t\tsuper(name);\n\t\t\tthis.event = event;\n\t\t}\n\n\t\tprotected void setName(String name) {\n\t\t\tputValue(Action.NAME, name);\n\t\t}\n\n\t\t@Override\n\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\tactionPerformed(event, e);\n\t\t}\n\n\t\tabstract void actionPerformed(PInputEvent event, ActionEvent e);\n\n\t}\n\n\tprotected final class LayoutTreeAction extends NodeAction {\n\n\t\tprivate final Map<String, BaseCanvasNode<?>~gt()~ parentsMap = new LinkedHashMap<>();\n\t\tprivate final Map<String, java.util.List<BaseCanvasNode<?>~gt()~~gt()~ childrensMap = new LinkedHashMap<>();\n\t\tprivate final org.abego.treelayout.util.DefaultConfiguration<BaseCanvasNode<?~gt()~> configuration;\n\n\t\tprotected LayoutTreeAction(BaseCanvasNode<?> root, PInputEvent event) {\n\t\t\tthis(root, event, org.abego.treelayout.Configuration.Location.Left, org.abego.treelayout.Configuration.AlignmentInLevel.TowardsRoot);\n\t\t}\n\n\t\tprotected LayoutTreeAction(BaseCanvasNode<?> root, PInputEvent event, org.abego.treelayout.Configuration.Location location, org.abego.treelayout.Configuration.AlignmentInLevel alignmentInLevel) {\n\t\t\tsuper(\"Layout Tree\", event);\n\t\t\tthis.configuration = new org.abego.treelayout.util.DefaultConfiguration<>(100, 15, location, alignmentInLevel);\n\t\t}\n\n\t\t@Override\n\t\tvoid actionPerformed(PInputEvent event, ActionEvent e) {\n\n\t\t\tnew Thread(() -> {\n\n\t\t\t\tfindChildren(BaseCanvasNode.this);\n\n\t\t\t\tfinal org.abego.treelayout.TreeForTreeLayout<BaseCanvasNode<?>~gt()~ tree = new org.abego.treelayout.util.AbstractTreeForTreeLayout<BaseCanvasNode<?>~gt()~(BaseCanvasNode.this) {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic BaseCanvasNode<?> getParent(BaseCanvasNode<?> node) {\n\t\t\t\t\t\treturn parentsMap.get(node.getUuid());\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic java.util.List<BaseCanvasNode<?>~gt()~ getChildrenList(BaseCanvasNode<?> node) {\n\t\t\t\t\t\tif (node == null) return Collections.emptyList();\n\t\t\t\t\t\treturn childrensMap.get(node.getUuid());\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tfinal org.abego.treelayout.NodeExtentProvider<BaseCanvasNode<?>~gt()~ nodeExtendProvider = new org.abego.treelayout.NodeExtentProvider<BaseCanvasNode<?>~gt()~() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic double getWidth(BaseCanvasNode<?> node) {\n\t\t\t\t\t\treturn node.getFullBounds().getWidth();\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic double getHeight(BaseCanvasNode<?> node) {\n\t\t\t\t\t\treturn node.getFullBounds().getHeight();\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tfinal org.abego.treelayout.TreeLayout<BaseCanvasNode<?>~gt()~ layout = new org.abego.treelayout.TreeLayout<>(tree, nodeExtendProvider, configuration);\n\n\t\t\t\t// apply coordinate transforms in relation to root-node\n\t\t\t\tfinal java.awt.geom.Rectangle2D.Double rootBounds = layout.getNodeBounds().get(BaseCanvasNode.this);\n\t\t\t\tfinal double deltaX = getFullBounds().getX() - rootBounds.getX();\n\t\t\t\tfinal double deltaY = getFullBounds().getY() - rootBounds.getY();\n\n\t\t\t\tSwingUtilities.invokeLater(() -> {\n\t\t\t\t\tfor (Map.Entry<BaseCanvasNode<?>, java.awt.geom.Rectangle2D.Double> nodeBound : layout.getNodeBounds().entrySet()) {\n\t\t\t\t\t\tif (nodeBound.getKey().equals(BaseCanvasNode.this)) continue;\t// root-node is transformation-root\n\t\t\t\t\t\tnodeBound.getKey().setOffset(nodeBound.getValue().getX() + deltaX, nodeBound.getValue().getY() + deltaY);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t}).start();\n\t\t}\n\n\t\tprivate void findChildren(BaseCanvasNode<?> node) {\n\n\t\t\tif (childrensMap.containsKey(node.getUuid())) return;\n\n\t\t\tchildrensMap.put(node.getUuid(), new ArrayList<>());\n\n\t\t\tnode.outgoing()\n\t\t\t\t\t.filter(thisCanvas().relationMap::containsKey)\n\t\t\t\t\t.map(uuid -> thisCanvas().relationMap.get(uuid).getDst())\n\t\t\t\t\t.filter(abstractNode -> !childrensMap.containsKey(abstractNode.getUuid()))\n\t\t\t\t\t.forEach(abstractNode -> {\n\t\t\t\t\t\t\tchildrensMap.get(node.getUuid()).add(abstractNode);\n\t\t\t\t\t\t\tparentsMap.put(abstractNode.getUuid(), node);\n\t\t\t\t\t});\n\n\t\t\tchildrensMap.get(node.getUuid()).forEach(this::findChildren);\n\t\t}\n\t}\n\n\tprotected final class LayoutCircleAction extends NodeAction {\n\n\t\tprivate final Map<String, BaseCanvasNode<?>~gt()~ parentsMap = new LinkedHashMap<>();\n\t\tprivate final Map<String, java.util.List<BaseCanvasNode<?>~gt()~~gt()~ childrensMap = new LinkedHashMap<>();\n\n\t\tprotected LayoutCircleAction(BaseCanvasNode<?> root, PInputEvent event) {\n\t\t\tsuper(\"Layout Circle\", event);\n\t\t}\n\n\t\t@Override\n\t\tvoid actionPerformed(PInputEvent event, ActionEvent e) {\n\n\t\t\tnew Thread(() -> {\n\n\t\t\t\tfindChildren(BaseCanvasNode.this);\n\n\t\t\t\tfinal org.abego.treelayout.TreeForTreeLayout<BaseCanvasNode<?>~gt()~ tree = new org.abego.treelayout.util.AbstractTreeForTreeLayout<BaseCanvasNode<?>~gt()~(BaseCanvasNode.this) {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic BaseCanvasNode<?> getParent(BaseCanvasNode<?> node) {\n\t\t\t\t\t\treturn parentsMap.get(node.getUuid());\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic java.util.List<BaseCanvasNode<?>~gt()~ getChildrenList(BaseCanvasNode<?> node) {\n\t\t\t\t\t\tif (node == null) return Collections.emptyList();\n\t\t\t\t\t\treturn childrensMap.get(node.getUuid());\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tfinal org.abego.treelayout.NodeExtentProvider<BaseCanvasNode<?>~gt()~ nodeExtendProvider = new org.abego.treelayout.NodeExtentProvider<BaseCanvasNode<?>~gt()~() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic double getWidth(BaseCanvasNode<?> node) {\n\t\t\t\t\t\treturn node.getFullBounds().getWidth();\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic double getHeight(BaseCanvasNode<?> node) {\n\t\t\t\t\t\treturn node.getFullBounds().getHeight();\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tfinal CircleLayout<BaseCanvasNode<?>~gt()~ layout = new CircleLayout<>(tree, nodeExtendProvider);\n\n\t\t\t\t// apply coordinate transforms in relation to root-node\n\t\t\t\tfinal java.awt.geom.Rectangle2D.Double rootBounds = layout.getNodeBounds().get(BaseCanvasNode.this);\n\t\t\t\tfinal double deltaX = getFullBounds().getX() - rootBounds.getX();\n\t\t\t\tfinal double deltaY = getFullBounds().getY() - rootBounds.getY();\n\n\t\t\t\tSwingUtilities.invokeLater(() -> {\n\t\t\t\t\tfor (Map.Entry<BaseCanvasNode<?>, java.awt.geom.Rectangle2D.Double> nodeBound : layout.getNodeBounds()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.entrySet()) {\n\t\t\t\t\t\tif (nodeBound.getKey().equals(BaseCanvasNode.this)) continue;\t// root-node is transformation-root\n\t\t\t\t\t\tnodeBound.getKey()\n\t\t\t\t\t\t\t\t\t.setOffset(nodeBound.getValue().getX() + deltaX, nodeBound.getValue().getY() + deltaY);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t}).start();\n\t\t}\n\n\t\tprivate void findChildren(BaseCanvasNode<?> node) {\n\n\t\t\tif (childrensMap.containsKey(node.getUuid())) return;\n\n\t\t\tchildrensMap.put(node.getUuid(), new ArrayList<>());\n\n\t\t\tnode.outgoing()\n\t\t\t\t.filter(thisCanvas().relationMap::containsKey)\n\t\t\t\t.map(uuid -> thisCanvas().relationMap.get(uuid).getDst())\n\t\t\t\t.filter(abstractNode -> !childrensMap.containsKey(abstractNode.getUuid()))\n\t\t\t\t.forEach(abstractNode -> {\n\t\t\t\t\tchildrensMap.get(node.getUuid()).add(abstractNode);\n\t\t\t\t\tparentsMap.put(abstractNode.getUuid(), node);\n\t\t\t\t});\n\n\t\t\tchildrensMap.get(node.getUuid()).forEach(this::findChildren);\n\t\t}\n\n\t\tprivate class CircleLayout<T> {\n\n\t\t   private final Map<T, java.awt.geom.Rectangle2D.Double> nodeBounds = new LinkedHashMap<>();\n\n\t\t   public CircleLayout(org.abego.treelayout.TreeForTreeLayout<T> tree, org.abego.treelayout.NodeExtentProvider<T> nodeExtendProvider) {\n\n\t\t      final int centerX = 0;\n\t\t      final int centerY = 0;\n\t\t      final int radiusPerLevel = 1200;\n\n\t\t      final T root = tree.getRoot();\n\t\t      nodeBounds.put(root, new Rectangle2D.Double(centerX, centerY, nodeExtendProvider.getWidth(root), nodeExtendProvider.getHeight(root)));\n\n\t\t      layout(root, centerX, centerY, radiusPerLevel, 2 * Math.PI, 2 * Math.PI, 1, tree, nodeExtendProvider);\n\t\t   }\n\n\t\t   private void layout(T node, int centerX, int centerY, int radius, double startAngle, double arcLength, int level, org.abego.treelayout.TreeForTreeLayout<T> tree, org.abego.treelayout.NodeExtentProvider<T> nodeExtendProvider) {\n\n\t\t      int totalChildren = 0;\n\t\t      for (int i = 0; i < children(node, tree).size(); i++)\n\t\t         totalChildren += children(children(node, tree).get(i), tree).size() + 1;\n\n\t\t      double currentArc = startAngle;\n\t\t      for (int i = 0; i < children(node, tree).size(); i++) {\n\t\t         final T child = children(node, tree).get(i);\n\t\t         final double childProportion = (double) (children(child,tree).size() + 1) / (double) totalChildren;\n\t\t         double childRadians = (arcLength * childProportion);\n\t\t         final double sin = Math.sin(currentArc + (childRadians / 2));\n\t\t         final double cos = Math.cos(currentArc + (childRadians / 2));\n\n\t\t         double x = centerX + (int) (radius * sin);\n\t\t         double y = centerY + (int) (radius * cos);\n\n\t\t         nodeBounds.put(child, new Rectangle2D.Double(x, y, nodeExtendProvider.getWidth(child), nodeExtendProvider\n\t\t               .getHeight(child)));\n\n\t\t         layout(child, centerX, centerY, radius + (radius / level), currentArc, childRadians, level + 1, tree, nodeExtendProvider);\n\n\t\t         currentArc += childRadians;\n\t\t      }\n\t\t   }\n\n\t\t   private List<T> children(T node, org.abego.treelayout.TreeForTreeLayout<T> tree) {\n\t\t      return StreamSupport\n\t\t            .stream(tree.getChildren(node).spliterator(), false)\n\t\t            .collect(Collectors.toList());\n\t\t   }\n\n\t\t   public Map<T, java.awt.geom.Rectangle2D.Double> getNodeBounds() {\n\t\t      return nodeBounds;\n\t\t   }\n\t\t}\n\t}\n\n\tprivate final class RetainNode extends NodeAction {\n\n\t\tRetainNode(PInputEvent event) {\n\t\t\tsuper(\"Retain\", event);\n\t\t}\n\n\t\t@Override\n\t\tvoid actionPerformed(PInputEvent event, ActionEvent e) {\n\t\t\tjavax.swing.SwingUtilities.invokeLater(() -> {\n\t\t\t\tthisCanvas().getAllRelations().forEach(relation -> thisCanvas().removeRelation(relation.getUuid()));\n\t\t\t\tthisCanvas().relationLayer.removeAllChildren();\n\t\t\t\tthisCanvas().getAllNodes().filter(canvasNode -> !canvasNode.getUuid().equals(getUuid())).forEach(BaseCanvasNode::close);\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate final class CloseNode extends NodeAction {\n\n\t\tCloseNode(PInputEvent event) {\n\t\t\tsuper(\"Close\", event);\n\t\t}\n\n\t\t@Override\n\t\tvoid actionPerformed(PInputEvent event, ActionEvent e) {\n\t\t\tjavax.swing.SwingUtilities.invokeLater(() -> thisNode().close());\n\t\t}\n\t}\n\n\tprivate final class PopupAction extends NodeAction {\n\n\t\tPopupAction(PInputEvent event) {\n\t\t\tsuper(\"Popup\", event);\n\t\t}\n\n\t\t@Override\n\t\tvoid actionPerformed( PInputEvent event, ActionEvent e) {\n\t\t\tjavax.swing.SwingUtilities.invokeLater(() -> {\n\t\t\t\tfinal javax.swing.JPopupMenu pop = new javax.swing.JPopupMenu();\n\t\t\t\tsetCursor(java.awt.Cursor.getPredefinedCursor(java.awt.Cursor.WAIT_CURSOR));\n\t\t\t\tonNodeRightClick(event, pop);\n\t\t\t\tsetCursor(java.awt.Cursor.getPredefinedCursor(java.awt.Cursor.DEFAULT_CURSOR));\n\t\t\t\tpop.show(thisCanvas(), (int) event.getCanvasPosition().getX(), (int) event.getCanvasPosition().getY());\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate final class DebugAction extends NodeAction {\n\n\t\tDebugAction(PInputEvent event) {\n\t\t\tsuper(\"Debug\", event);\n\t\t}\n\n\t\t@Override\n\t\tvoid actionPerformed(PInputEvent event, ActionEvent e) {\n\t\t\tjavax.swing.SwingUtilities.invokeLater(() -> {\n\t\t\t\tfinal PBounds fullBounds = getFullBoundsReference();\n\t\t\t\tlog.info(getUuid() + \" : \" + getText());\n\t\t\t\tlog.info(fullBounds.getX() + \",\" + fullBounds.getY() + \", [\" + fullBounds.getWidth() + \",\" + fullBounds.getHeight() + \"]\");\n\t\t\t\toutgoing().forEach(uuid -> log.info(\" -> \" + uuid));\n\t\t\t\tincoming().forEach(uuid -> log.info(\" <- \" + uuid));\n\t\t\t});\n\t\t}\n\t}\n} ",
      "parameters" : [ ],
      "children" : [ {
        "uuid" : "e1bdb5a6-e400-4975-8082-138672753225",
        "name" : "CanvasNode",
        "text" : "final class ~name~ extends BaseCanvasNode<~modelType~> {\n\n\t~fields:{it|private ~it.type~ ~it.name~;};separator=\"\\n\"~\n\n\tpublic ~name~(~modelType~ model~if(uuidExpression)~~else~, String uuid~endif~~if(labelExpression)~~else~, String label~endif~~if(fields)~, ~fields:{it|~it.type~ ~it.name~};separator=\", \"~~endif~) {\n\t\tsuper(model, ~if(uuidExpression)~~uuidExpression~~else~uuid~endif~, ~if(labelExpression)~~labelExpression~~else~label~endif~);\n\t\t~fields:{it|this.~it.name~ = ~it.name~;};separator=\"\\n\"~\n\t}\n~if(addedToCanvasStatements)~\n\t\n\t@Override\n\tpublic void addedToCanvas() {\n\t\t~addedToCanvasStatements:{it|~it~};separator=\"\\n\"~\n\t}\n\t\n~endif~\n~if(newNodeAddedStatements)~\n\t\n\t@Override\n\tpublic void newNodeAdded(BaseCanvasNode<?> node) {\n\t\t~newNodeAddedStatements:{it|~it~};separator=\"\\n\"~\n\t}\n\t\n~endif~\n\t@Override\n\tprotected void onNodeRightClick(PInputEvent event, JPopupMenu pop) {\n\t\t~rightClickStatements:{it|~it~};separator=\"\\n\"~\n\t\t~rightClickActions:{it|pop.add(new ~it.name~(event));};separator=\"\\n\"~\n\t\tsuper.onNodeRightClick(event, pop);\n\t}\n~if(leftClickStatements)~\n\n\t@Override\n\tprotected void onNodeLeftClick(PInputEvent event) {\n\t\tsuper.onNodeLeftClick(event);\n\t\t~leftClickStatements:{it|~it~};separator=\"\\n\"~\n\t}\n\t\n~endif~\n~if(keyPressActions)~\n\n\t@Override\n\tprotected void onNodeKeyPressed(PInputEvent event) {\n\t\tswitch (event.getKeyCode()) {\n~keyPressActions:{it|\n\t\t\tcase VK_~it.key~:\n\t\t\t\t~it.name~;\n\t\t\t\tbreak;\n};separator=\"\\n\"~\n\t\t}\n\t\tsuper.onNodeKeyPressed(event);\n\t}\n\t\n~endif~\n\t\n\t~actions:{it|~it~};separator=\"\\n\\n\"~\n\n\t~methods:{it|~it~};separator=\"\\n\\n\"~\n}\n\nprivate void add~name~(~modelType~ model~if(uuidExpression)~~else~, String uuid~endif~~if(labelExpression)~~else~, String label~endif~~if(fields)~, ~fields:{it|~it.type~ ~it.name~};separator=\", \"~~endif~) {\n\taddNode(~if(uuidExpression)~~uuidExpression~~else~uuid~endif~, new~name~(model~if(uuidExpression)~~else~, uuid~endif~~if(labelExpression)~~else~, label~endif~~if(fields)~, ~fields:{it|~it.name~};separator=\", \"~~endif~));\n}\n\npublic java.util.function.Supplier<~name~> new~name~(~modelType~ model~if(uuidExpression)~~else~, String uuid~endif~~if(labelExpression)~~else~, String label~endif~~if(fields)~, ~fields:{it|~it.type~ ~it.name~};separator=\", \"~~endif~) {\n\treturn () -> new ~name~(model~if(uuidExpression)~~else~, uuid~endif~~if(labelExpression)~~else~, label~endif~~if(fields)~, ~fields:{it|~it.name~};separator=\", \"~~endif~);\n}\n\npublic Stream<~name~> getAll~name;format=\"capitalize\"~() {\n\treturn getAllNodes()\n\t\t\t\t.filter(baseCanvasNode -> baseCanvasNode instanceof ~name~)\n\t\t\t\t.map(baseCanvasNode -> (~name~) baseCanvasNode);\n}\n\npublic void forEach~name;format=\"capitalize\"~(java.util.function.Consumer<~name~> consumer) {\n\tgetAllNodes()\n\t\t\t.filter(baseCanvasNode -> baseCanvasNode instanceof ~name~)\n\t\t\t.map(baseCanvasNode -> (~name~) baseCanvasNode)\n\t\t\t.forEach(consumer);\n}\n\npublic Optional<~name~> isInstanceOf~name~(BaseCanvasNode<?> canvasNode) {\n\treturn Optional.ofNullable((canvasNode instanceof ~name~) ? (~name~) canvasNode : null);\n} ",
        "parameters" : [ {
          "uuid" : "38f5c0c1-de25-46c6-a69a-88f3fb1d2315",
          "name" : "name",
          "type" : "SINGLE",
          "argumentType" : "String"
        }, {
          "uuid" : "3c99f2b6-2b36-4e74-99c8-bfea0cc6fda5",
          "name" : "modelType",
          "type" : "SINGLE",
          "argumentType" : "Object"
        }, {
          "uuid" : "640d3e1d-4b6e-4c05-a15c-90c7eed1e01e",
          "name" : "fields",
          "type" : "KVLIST",
          "argumentType" : "Object",
          "keys" : [ {
            "uuid" : "4781e22d-027c-481a-ad34-b3593f3ce2b6",
            "name" : "type",
            "argumentType" : "Object"
          }, {
            "uuid" : "a43f0d9d-ab57-420b-be23-c4c8e6bf9f24",
            "name" : "name",
            "argumentType" : "Object"
          } ]
        }, {
          "uuid" : "29249231-ea5e-4528-9992-9ec4089fcfdc",
          "name" : "uuidExpression",
          "type" : "SINGLE",
          "argumentType" : "Object"
        }, {
          "uuid" : "9a1c5b6c-30ad-474f-9d96-c81d868660bf",
          "name" : "labelExpression",
          "type" : "SINGLE",
          "argumentType" : "Object"
        }, {
          "uuid" : "8e0daa13-5d03-458c-bb7c-3ad1bff49c31",
          "name" : "addedToCanvasStatements",
          "type" : "LIST",
          "argumentType" : "Object"
        }, {
          "uuid" : "1e7d5082-15f0-4b8c-96e5-8e149d0b4b62",
          "name" : "newNodeAddedStatements",
          "type" : "LIST",
          "argumentType" : "Object"
        }, {
          "uuid" : "44c0b439-ed0a-4032-8488-6cc59d782f60",
          "name" : "rightClickStatements",
          "type" : "LIST",
          "argumentType" : "Object"
        }, {
          "uuid" : "5d86bfec-abac-4921-b03e-6a4808ab570a",
          "name" : "rightClickActions",
          "type" : "KVLIST",
          "argumentType" : "Object",
          "keys" : [ {
            "uuid" : "4cec3db2-04e5-4942-8dd5-45723a095d8a",
            "name" : "name",
            "argumentType" : "Object"
          } ]
        }, {
          "uuid" : "f41b877c-6535-411a-a37c-b0e68dc61d6c",
          "name" : "leftClickStatements",
          "type" : "LIST",
          "argumentType" : "Object"
        }, {
          "uuid" : "c4ce5ef7-fdcb-4bd5-a956-c6334dd8e609",
          "name" : "keyPressActions",
          "type" : "KVLIST",
          "argumentType" : "Object",
          "keys" : [ {
            "uuid" : "505592d6-5248-45ca-b269-46e1d755e82c",
            "name" : "key",
            "argumentType" : "Object"
          }, {
            "uuid" : "5e94cbbf-7948-4c50-af8e-19bcc42f40ca",
            "name" : "name",
            "argumentType" : "Object"
          } ]
        }, {
          "uuid" : "dd6c238b-22d5-4db2-9ed4-e36f5871c9db",
          "name" : "actions",
          "type" : "LIST",
          "argumentType" : "CanvasNodeAction"
        }, {
          "uuid" : "9ff6dac3-4713-42d1-aab5-749b263b1763",
          "name" : "methods",
          "type" : "LIST",
          "argumentType" : "Object"
        } ],
        "children" : [ {
          "uuid" : "52c2813f-bfb6-4c98-838b-66d558bb0e76",
          "name" : "CanvasNodeAction",
          "text" : "final class ~name~ extends NodeAction {\n\n\t~fields:{it|private ~it.type~ ~it.name~;};separator=\"\\n\"~\n\n\t~name~(PInputEvent event~if(fields)~, ~fields:{it|~it.type~ ~it.name~};separator=\", \"~~endif~) {\n\t\tsuper(~if(titleExpression)~~titleExpression~~else~\"~title~\"~endif~, event);\n\t\t~fields:{it|this.~it.name~ = ~it.name~;};separator=\"\\n\"~\n\t}\n\n\t@Override\n\tvoid actionPerformed(PInputEvent event, ActionEvent e) {\n~if(transactional)~\n\t\tappModel().doLaterInTransaction(transaction -> {\n\t\t\t~statements:{it|~it~};separator=\"\\n\"~\n\t\t});\n~else~\n\t\t~statements:{it|~it~};separator=\"\\n\"~\n~endif~\n\t}\n} ",
          "parameters" : [ {
            "uuid" : "61eb0282-c019-447c-acda-67e9d84a66c9",
            "name" : "name",
            "type" : "SINGLE",
            "argumentType" : "Object"
          }, {
            "uuid" : "8ddd81cd-6717-453f-a1cf-7b5c08c8f2a5",
            "name" : "fields",
            "type" : "KVLIST",
            "argumentType" : "Object",
            "keys" : [ {
              "uuid" : "6000e9cb-801d-466f-80bb-e672bf9751a4",
              "name" : "type",
              "argumentType" : "Object"
            }, {
              "uuid" : "adfc6b8e-b7bc-48b4-9a60-10fc7f861013",
              "name" : "name",
              "argumentType" : "Object"
            } ]
          }, {
            "uuid" : "98fa7150-1966-43fd-a2cb-fa2d60b11ebd",
            "name" : "titleExpression",
            "type" : "SINGLE",
            "argumentType" : "Object"
          }, {
            "uuid" : "9323ee26-1eed-4fbe-bee3-731787174087",
            "name" : "title",
            "type" : "SINGLE",
            "argumentType" : "Object"
          }, {
            "uuid" : "1653bf7e-458c-4432-b2c5-fe6dc076a0e0",
            "name" : "transactional",
            "type" : "SINGLE",
            "argumentType" : "Object"
          }, {
            "uuid" : "c2708b39-71e5-4703-80e2-672158ca3ff0",
            "name" : "statements",
            "type" : "LIST",
            "argumentType" : "Object"
          } ]
        } ]
      } ]
    }, {
      "uuid" : "2aa604b1-91a9-4cc7-9bd9-34898b0c2dc7",
      "name" : "BaseCanvasRelation",
      "text" : "protected class BaseCanvasRelation extends PPath.Double implements Comparator<BaseCanvasRelation> {\n\n\tfinal protected PText child;\n\tprivate final PNodeChangeListener nodeChangeListener = new PNodeChangeListener();\n\n\tpublic BaseCanvasRelation(BaseCanvasNode<?> src, BaseCanvasNode<?> dst, String uuid, String type) {\n\t\tthis.addAttribute(\"_defaultColor\", Color.decode(\"#bababa\"));\n\t\tthis.addAttribute(\"_selectedColor\", Color.decode(\"#b2182b\"));\n\t\tthis.addAttribute(\"_highlightedColor\", Color.decode(\"#f4a582\"));\n\t\tthis.addAttribute(\"_uuid\", uuid);\n\t\tthis.addAttribute(\"_type\", type);\n\t\tthis.addAttribute(\"_src\", src);\n\t\tthis.addAttribute(\"_dst\", dst);\n\n\t\tsrc.addOutgoingRelation(getUuid());\n\t\tdst.addIncomingRelation(getUuid());\n\n\t\tthis.child = new PText(type);\n\n\t\tsetPaint((Color) getAttribute(\"_defaultColor\"));\n\t\tchild.setTextPaint((Color) getAttribute(\"_defaultColor\"));\n\n\t\tfinal RelationInputEventHandler relationInputEventHandler = new RelationInputEventHandler();\n\t\trelationInputEventHandler.getEventFilter().setMarksAcceptedEventsAsHandled(true);\n\t\taddInputEventListener(relationInputEventHandler);\n\t\taddInputEventListener(canvasZoomHandler);\n\n\t\tsrc.addPropertyChangeListener(nodeChangeListener);\n\t\tdst.addPropertyChangeListener(nodeChangeListener);\n\t\taddChild(this.child);\n\n\t\tSwingUtilities.invokeLater(() -> updatePath((getSrc()), getDst()));\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn getUuid() + \" \" + getSrc() + \" -> \" + getType() + \" -> \" + getDst();\n\t}\n\n\tpublic void close() {\n\t\tSwingUtilities.invokeLater(() -> {\n\t\t\tlog.info(\"R-\" + getUuid() + \" closed\");\n\t\t\tgetSrc().outgoing.remove(getUuid());\n\t\t\tgetDst().incoming.remove(getUuid());\n\t\t\tgetSrc().removePropertyChangeListener(nodeChangeListener);\n\t\t\tgetDst().removePropertyChangeListener(nodeChangeListener);\n\t\t});\n\t}\n\n\t@Override\n\tpublic boolean equals(Object o) {\n\t\tif (this == o) return true;\n\t\tif (o == null || getClass() != o.getClass()) return false;\n\n\t\tBaseCanvasRelation other = (BaseCanvasRelation) o;\n\n\t\treturn getUuid().equals(other.getUuid());\n\t}\n\n\t@Override\n\tpublic int hashCode() {\n\t\treturn getUuid().hashCode();\n\t}\n\n\tpublic String getUuid() {\n\t\treturn (String) getAttribute(\"_uuid\");\n\t}\n\n\tpublic String getType() {\n\t\treturn (String) getAttribute(\"_type\");\n\t}\n\n\tpublic void unselect() {\n\t\taddAttribute(\"_selected\", Boolean.FALSE);\n\t\tSwingUtilities.invokeLater(() -> updatePath((Color) getAttribute(\"_defaultColor\")));\n\t}\n\n\tpublic void select() {\n\t\taddAttribute(\"_selected\", Boolean.TRUE);\n\t\tSwingUtilities.invokeLater(() -> updatePath((Color) getAttribute(\"_selectedColor\")));\n\t}\n\n\tpublic boolean isSelected() {\n\t\treturn getBooleanAttribute(\"_selected\", false);\n\t}\n\n\tprotected void unhighlight() {\n\t\taddAttribute(\"_highlight\", Boolean.FALSE);\n\t\tSwingUtilities.invokeLater(() -> updatePath(isSelected() ? (Color) getAttribute(\"_selectedColor\") : (Color) getAttribute(\"_defaultColor\")));\n\t}\n\n\tprotected void highlight() {\n\t\taddAttribute(\"_highlight\", Boolean.TRUE);\n\t\tSwingUtilities.invokeLater(() -> updatePath((Color) getAttribute(\"_highlightedColor\")));\n\t}\n\n\tprotected BaseCanvasNode<?> getSrc() {\n\t\treturn (BaseCanvasNode<?>) getAttribute(\"_src\");\n\t}\n\n\tprotected BaseCanvasNode<?> getDst() {\n\t\treturn (BaseCanvasNode<?>) getAttribute(\"_dst\");\n\t}\n\n\tpublic Long getOrder() {\n\t\treturn (Long) getAttribute(\"_order\");\n\t}\n\n\tprivate void updatePath(Color color) {\n\t\tchild.setTextPaint(color);\n\t\tsetPaint(color);\n\t\tsetStrokePaint(color);\n\t\tsetPaintInvalid(true);\n\t\tvalidateFullPaint();\n\t}\n\n\tprivate void updatePath(BaseCanvasNode<?> source, BaseCanvasNode<?> target) {\n\t\t//log.info(getUuid() + \" updatePath\");\n\t\tfinal PBounds src = source.getFullBoundsReference();\n\t\tfinal PBounds dst = target.getFullBoundsReference();\n\t\tfinal boolean horizontalOverlap = !(src.getMaxX() < dst.getMinX() || src.getMinX() > dst.getMaxX());\n\t\tfinal Point2D.Double startCenterBottom = new Point2D.Double(src.getCenterX(), src.getMaxY());\n\t\tfinal Point2D.Double endCenterTop = new Point2D.Double(dst.getCenterX(), dst.getMinY());\n\t\tfinal Point2D.Double startCenterTop = new Point2D.Double(src.getCenterX(), src.getMinY());\n\t\tfinal Point2D.Double endCenterBottom = new Point2D.Double(dst.getCenterX(), dst.getMaxY());\n\t\tif (src.getCenterX() < dst.getCenterX()) {\n\t\t\tfinal Point2D.Double startRightCenter = new Point2D.Double(src.getMaxX(), src.getCenterY());\n\t\t\tfinal Point2D.Double endRightCenter = new Point2D.Double(dst.getMinX(), dst.getCenterY());\n\t\t\tif (src.getCenterY() < dst.getCenterY()) {\n\t\t\t\tif (!horizontalOverlap) {\n\t\t\t\t\tdrawStraightPath(startRightCenter, endRightCenter);\n\t\t\t\t} else {\n\t\t\t\t\tdrawStraightPath(startCenterBottom, endCenterTop);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (!horizontalOverlap) {\n\t\t\t\t\tdrawStraightPath(startRightCenter, endRightCenter);\n\t\t\t\t} else {\n\t\t\t\t\tdrawStraightPath(startCenterTop, endCenterBottom);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfinal Point2D.Double startLeftCenter = new Point2D.Double(src.getMinX(), src.getCenterY());\n\t\t\tfinal Point2D.Double endLeftCenter = new Point2D.Double(dst.getMaxX(), dst.getCenterY());\n\t\t\tif (src.getCenterY() < dst.getCenterY()) {\n\t\t\t\tif (!horizontalOverlap) {\n\t\t\t\t\tdrawStraightPath(startLeftCenter, endLeftCenter);\n\t\t\t\t} else {\n\t\t\t\t\tdrawStraightPath(startCenterBottom, endCenterTop);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (!horizontalOverlap) {\n\t\t\t\t\tdrawStraightPath(startLeftCenter, endLeftCenter);\n\t\t\t\t} else {\n\t\t\t\t\tdrawStraightPath(startCenterTop, endCenterBottom);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate void drawStraightPath(Point2D start, Point2D end) {\n\t\treset();\n\t\tsetStrokePaint(child.getTextPaint());\n\t\tmoveTo(start.getX(), start.getY());\n\t\tlineTo(end.getX(), end.getY());\n\t\tchild.setOffset(getBounds().getCenter2D());\n\t\tfinal int ARR_SIZE = 4;\n\t\tfinal double dx = end.getX() - start.getX();\n\t\tfinal double dy = end.getY() - start.getY();\n\t\tfinal double angle = Math.atan2(dy, dx);\n\t\tfinal int len = (int) (Math.sqrt(dx * dx + dy * dy) - 10);\n\t\tfinal AffineTransform at = AffineTransform.getTranslateInstance(start.getX(), start.getY());\n\t\tat.concatenate(AffineTransform.getRotateInstance(angle));\n\t\tappend(new Polygon(new int[]{len,\n\t\t\t\t\tlen - ARR_SIZE,\n\t\t\t\t\tlen - ARR_SIZE,\n\t\t\t\t\tlen}, new int[]{0,\n\t\t\t\t\t-ARR_SIZE,\n\t\t\t\t\tARR_SIZE,\n\t\t\t\t\t0}, 4).getPathIterator(at), false);\n\t\tsetPaintInvalid(true);\n\t\tvalidateFullPaint();\n\t}\n\n\t@Override\n\tpublic int compare(BaseCanvasRelation o1, BaseCanvasRelation o2) {\n\t\treturn o1.getOrder().compareTo(o2.getOrder());\n\t}\n\n\tprivate final class PNodeChangeListener implements PropertyChangeListener {\n\n\t\tprivate final java.util.UUID uuid = java.util.UUID.randomUUID();\n\n\t\t@Override\n\t\tpublic boolean equals(Object o) {\n\t\t\tif (this == o) return true;\n\t\t\tif (o == null || getClass() != o.getClass()) return false;\n\t\t\tPNodeChangeListener that = (PNodeChangeListener) o;\n\t\t\treturn uuid.equals(that.uuid);\n\t\t}\n\n\t\t@Override\n\t\tpublic int hashCode() {\n\t\t\treturn java.util.Objects.hash(uuid);\n\t\t}\n\n\t\t@Override\n\t\tpublic void propertyChange(PropertyChangeEvent evt) {\n\t\t\tswitch (evt.getPropertyName()) {\n\t\t\t\tcase PNode.PROPERTY_FULL_BOUNDS:\n\t\t\t\t\tbreak;\n\t\t\t\tcase PNode.PROPERTY_TRANSFORM:\n\t\t\t\t\tSwingUtilities.invokeLater(() -> updatePath((getSrc()), getDst()));\n\t\t\t\t\tbreak;\n\t\t\t\tcase PNode.PROPERTY_PARENT:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}  \n\n\tprivate final class RelationInputEventHandler extends PBasicInputEventHandler {\n\n\t\t@Override\n\t\tpublic void mouseEntered(PInputEvent event) {\n\t\t\tevent.getInputManager().setKeyboardFocus(this);\n\t\t\thighlight();\n\t\t}\n\n\t\t@Override\n\t\tpublic void mouseExited(PInputEvent event) {\n\t\t\tunhighlight();\n\t\t\tevent.getInputManager().setKeyboardFocus(thisCanvas());\n\t\t}\n\n\t\t@Override\n\t\tpublic void mouseClicked(PInputEvent event) {\n\t\t\tif (event.isRightMouseButton()) {\n\t\t\t\tfinal JPopupMenu pop = new JPopupMenu();\n\t\t\t\tthisCanvas().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));\n\t\t\t\tonRelationRightClick(event, pop);\n\t\t\t\tthisCanvas().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));\n\t\t\t\tpop.show(thisCanvas(), (int) event.getCanvasPosition().getX(), (int) event.getCanvasPosition().getY());\n\t\t\t} else if (event.isLeftMouseButton()) {\n\t\t\t\tSwingUtilities.invokeLater(() -> onRelationLeftClick(event));\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic void keyPressed(PInputEvent event) {\n\t\t\tonRelationKeyPressed(event);\n\t\t}\n\t}  \n\n\tprotected void onRelationRightClick(PInputEvent event, JPopupMenu pop) {\n\t}\n\n\tprotected void onRelationLeftClick(PInputEvent event) {\n\t\tif (isSelected()) unselect();\n\t\telse select();\n\t}\n\n\tprotected void onRelationKeyPressed(PInputEvent event) {\n\t}\n\n\tabstract class RelationAction extends AbstractAction {\n\n\t\tfinal PInputEvent event;\n\n\t\tRelationAction(String name, PInputEvent event) {\n\t\t\tsuper(name);\n\t\t\tthis.event = event;\n\t\t}\n\n\t\t@Override\n\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\tactionPerformed(event, e);\n\t\t}\n\n\t\tabstract void actionPerformed(PInputEvent event, ActionEvent e);\n\t}\n} ",
      "parameters" : [ ],
      "children" : [ {
        "uuid" : "1bff4c6f-bd1a-4660-8235-5339fd7107e3",
        "name" : "CanvasRelation",
        "text" : "public java.util.function.Supplier<STModelCanvas.~name~> new~name~(BaseCanvasNode<?> src, BaseCanvasNode<?> dst~if(uuidExpression)~~else~, String uuid~endif~~if(labelExpression)~~else~, String label~endif~~if(fields)~, ~fields:{it|~it.type~ ~it.name~};separator=\", \"~~endif~) {\n\treturn () -> new STModelCanvas.~name~(src, dst~if(uuidExpression)~~else~, uuid~endif~~if(labelExpression)~~else~, label~endif~~if(fields)~, ~fields:{it|~it.name~};separator=\", \"~~endif~);\n}\n\npublic void add~name~(BaseCanvasNode<?> src, BaseCanvasNode<?> dst~if(labelExpression)~~else~, String label~endif~~if(fields)~, ~fields:{it|~it.type~ ~it.name~};separator=\", \"~~endif~) {\n\taddRelation(~if(uuidExpression)~~uuidExpression~~else~src.getUuid() + dst.getUuid()~endif~, new~name~(src, dst~if(uuidExpression)~~else~, src.getUuid() + dst.getUuid()~endif~~if(labelExpression)~~else~, label~endif~~if(fields)~, ~fields:{it|~it.name~};separator=\", \"~~endif~));\n}\n\nfinal class ~name~ extends BaseCanvasRelation {\n\n\t~fields:{it|private ~it.type~ ~it.name~;};separator=\"\\n\"~\n\n\tpublic ~name~(BaseCanvasNode<?> src, BaseCanvasNode<?> dst~if(uuidExpression)~~else~, String uuid~endif~~if(labelExpression)~~else~, String label~endif~~if(fields)~, ~fields:{it|~it.type~ ~it.name~};separator=\", \"~~endif~) {\n\t\tsuper(src, dst, ~if(uuidExpression)~~uuidExpression~~else~uuid~endif~, ~if(labelExpression)~~labelExpression~~else~label~endif~);\n\t\t~fields:{it|this.~it.name~ = ~it.name~;};separator=\"\\n\"~\n\t}\n\n\t@Override\n\tprotected void onRelationRightClick(PInputEvent event, JPopupMenu pop) {\n\t\t~rightClickStatements:{it|~it~};separator=\"\\n\"~\n\n\t\t~rightClickActions:{it|pop.add(new ~it.name~(event));};separator=\"\\n\"~\n\t}\n~if(keyPressActions)~\n\t\n\t@Override\n\tprotected void onRelationKeyPressed(PInputEvent event) {\n\t\tswitch (event.getKeyCode()) {\n~keyPressActions:{it|\n\t\t\tcase VK_~it.key~:\n\t\t\t\tnew ~it.name~(event).actionPerformed(null);\n\t\t\t\tbreak;\n};separator=\"\\n\"~\n\t\t}\n\t\tsuper.onRelationKeyPressed(event);\n\t}\n~endif~\n\n\t~actions:{it|~it~};separator=\"\\n\\n\"~\n} ",
        "parameters" : [ {
          "uuid" : "9f928eac-60ce-461f-bf41-8f0345cabd59",
          "name" : "name",
          "type" : "SINGLE",
          "argumentType" : "Object"
        }, {
          "uuid" : "d1a977c0-e290-4e62-be03-002fb8be240b",
          "name" : "uuidExpression",
          "type" : "SINGLE",
          "argumentType" : "Object"
        }, {
          "uuid" : "039eb802-da45-485c-bc33-9b0e1e9bc7d9",
          "name" : "labelExpression",
          "type" : "SINGLE",
          "argumentType" : "Object"
        }, {
          "uuid" : "0162d414-75c9-4749-be20-d0ccd312e4d2",
          "name" : "fields",
          "type" : "KVLIST",
          "argumentType" : "Object",
          "keys" : [ {
            "uuid" : "81711c46-b16c-4446-abeb-17e486ea782b",
            "name" : "type",
            "argumentType" : "Object"
          }, {
            "uuid" : "dac42f4e-8c5c-4de1-9bc4-b2e6207d7884",
            "name" : "name",
            "argumentType" : "Object"
          } ]
        }, {
          "uuid" : "35ab009f-0994-4ab8-8d3b-8720a076b2b2",
          "name" : "rightClickStatements",
          "type" : "LIST",
          "argumentType" : "Object"
        }, {
          "uuid" : "53121434-9821-4880-89ec-0465b568e59a",
          "name" : "rightClickActions",
          "type" : "KVLIST",
          "argumentType" : "Object",
          "keys" : [ {
            "uuid" : "dbded870-ff8c-436a-afde-bd5d15e5d3fc",
            "name" : "name",
            "argumentType" : "Object"
          } ]
        }, {
          "uuid" : "333682e0-1124-4f7d-974b-ce8b4b49ee46",
          "name" : "keyPressActions",
          "type" : "KVLIST",
          "argumentType" : "Object",
          "keys" : [ {
            "uuid" : "4fc55a11-6c15-40d8-aee7-99d4e2357de3",
            "name" : "key",
            "argumentType" : "Object"
          }, {
            "uuid" : "c86cf623-1d06-4fc8-a2f4-86e3c54739f8",
            "name" : "name",
            "argumentType" : "Object"
          } ]
        }, {
          "uuid" : "a0f50747-d6a7-46eb-9de5-5a25841a56e8",
          "name" : "actions",
          "type" : "LIST",
          "argumentType" : "Object"
        } ],
        "children" : [ {
          "uuid" : "a87ce0f5-8f3b-4393-aa77-7f873f2307ca",
          "name" : "CanvasRelationAction",
          "text" : "final class ~name~ extends RelationAction {\n\n\t~fields:{it|private ~it.type~ ~it.name~;};separator=\"\\n\"~\n\t\n\t~name~(PInputEvent event~if(fields)~, ~fields:{it|~it.type~ ~it.name~};separator=\",\"~~endif~) {\n\t\tsuper(\"~title~\", event);\n\t\t~fields:{it|this.~it.name~ = ~it.name~;};separator=\"\\n\"~\n\t}\n\n\t@Override\n\tvoid actionPerformed(PInputEvent event, ActionEvent e) {\n\t\t~statements:{it|~it~};separator=\"\\n\"~\n\t}\n} ",
          "parameters" : [ {
            "uuid" : "12ffdff2-3ef3-4b61-8904-2aa9ed78607b",
            "name" : "name",
            "type" : "SINGLE",
            "argumentType" : "Object"
          }, {
            "uuid" : "75125b24-08e2-4017-9dfd-29b2127848dd",
            "name" : "fields",
            "type" : "KVLIST",
            "argumentType" : "Object",
            "keys" : [ {
              "uuid" : "b867ffd1-2b4e-493b-a94b-ab8addd83fe9",
              "name" : "type",
              "argumentType" : "Object"
            }, {
              "uuid" : "cb2e7bef-0fac-4160-9371-5f186d21a090",
              "name" : "name",
              "argumentType" : "Object"
            } ]
          }, {
            "uuid" : "9d4f1d28-9562-4d2b-9039-ab9537c2e89d",
            "name" : "title",
            "type" : "SINGLE",
            "argumentType" : "Object"
          }, {
            "uuid" : "ae7d6b78-3021-42cc-a936-18eb0eefde6f",
            "name" : "statements",
            "type" : "LIST",
            "argumentType" : "Object"
          } ]
        } ]
      } ]
    }, {
      "uuid" : "f69bdee4-69a3-4533-b2ac-866366709929",
      "name" : "CanvasAction",
      "text" : "final class ~name~ extends CanvasAction {\n~if(fields)~\n\n\t~fields:{it|private ~it.type~ ~it.name~;};separator=\"\\n\"~\n~endif~\n\t\n\t~name~(PInputEvent event~if(fields)~, ~fields:{it|~it.type~ ~it.name~};separator=\",\"~~endif~) {\n\t\tsuper(\"~title~\", event);\n\t\t~fields:{it|this.~it.name~ = ~it.name~;};separator=\"\\n\"~\n\t}\n\n\t@Override\n\tvoid actionPerformed(PInputEvent event, ActionEvent e) {\n\t\t~statements:{it|~it~};separator=\"\\n\"~\n\t}\n} ",
      "parameters" : [ {
        "uuid" : "0b662aab-d912-4d1d-9f68-b1b50077880e",
        "name" : "name",
        "type" : "SINGLE",
        "argumentType" : "Object"
      }, {
        "uuid" : "09d4fe5c-9940-402a-b542-2ecfe8f65b2c",
        "name" : "fields",
        "type" : "KVLIST",
        "argumentType" : "Object",
        "keys" : [ {
          "uuid" : "b344f2f6-b880-402e-ae4f-60bf2b2c922b",
          "name" : "type",
          "argumentType" : "Object"
        }, {
          "uuid" : "cab1f9fb-ff2d-41cf-b817-32d7ac2b964d",
          "name" : "name",
          "argumentType" : "Object"
        } ]
      }, {
        "uuid" : "24e452af-aac4-4067-837e-65007504aa79",
        "name" : "title",
        "type" : "SINGLE",
        "argumentType" : "Object"
      }, {
        "uuid" : "ac0a74cc-98e3-4594-afca-09fd30ba2f68",
        "name" : "statements",
        "type" : "LIST",
        "argumentType" : "Object"
      } ]
    } ],
    "parameters" : [ {
      "uuid" : "d0dd3b08-90ce-4d37-81a3-de4b86c459b0",
      "name" : "packageName",
      "type" : "SINGLE",
      "argumentType" : "String"
    }, {
      "uuid" : "e24b7d36-642e-4fe3-81d5-f1090db67940",
      "name" : "imports",
      "type" : "LIST",
      "argumentType" : "Object"
    }, {
      "uuid" : "acada939-b17e-43ba-b04b-5959a2ee87e2",
      "name" : "name",
      "type" : "SINGLE",
      "argumentType" : "String"
    }, {
      "uuid" : "db17ae63-3ab0-4891-91b7-bfa86c6cc02f",
      "name" : "fields",
      "type" : "KVLIST",
      "argumentType" : "Object",
      "keys" : [ {
        "uuid" : "5b10fb48-3030-498f-94f9-20067db3219c",
        "name" : "type",
        "argumentType" : "Object"
      }, {
        "uuid" : "9dfd9623-ed2a-464a-a092-705afe41299f",
        "name" : "name",
        "argumentType" : "Object"
      } ]
    }, {
      "uuid" : "0e6dca18-2d13-4220-913a-b7afaeede841",
      "name" : "finalFields",
      "type" : "KVLIST",
      "argumentType" : "Object",
      "keys" : [ {
        "uuid" : "e1770090-be54-452b-9aa9-bbf5e3dd703b",
        "name" : "type",
        "argumentType" : "Object"
      }, {
        "uuid" : "eca42e99-65f9-4b00-90b4-ddbaa9d6e2a2",
        "name" : "name",
        "argumentType" : "Object"
      }, {
        "uuid" : "2d0f29f2-06d7-4b51-8d9d-955bcc9fb891",
        "name" : "init",
        "argumentType" : "Object"
      } ]
    }, {
      "uuid" : "589f229b-6fff-492d-bafb-6dc6d868a533",
      "name" : "constructorStatements",
      "type" : "LIST",
      "argumentType" : "Object"
    }, {
      "uuid" : "20338374-f634-43c4-9b42-9ce4435c4230",
      "name" : "methods",
      "type" : "LIST",
      "argumentType" : "Object"
    }, {
      "uuid" : "d15f511f-67e9-409d-913f-23180ba7e377",
      "name" : "rightClickStatements",
      "type" : "LIST",
      "argumentType" : "Object"
    }, {
      "uuid" : "5a52afe5-f879-40e4-b914-0744172ac6ea",
      "name" : "rightClickActions",
      "type" : "KVLIST",
      "argumentType" : "Object",
      "keys" : [ {
        "uuid" : "6e3cf74d-b0c7-4dda-abbb-20a6f8a34145",
        "name" : "name",
        "argumentType" : "Object"
      } ]
    }, {
      "uuid" : "e58039b9-f0d0-4b35-9663-d7fd3d496e25",
      "name" : "keyPressActions",
      "type" : "KVLIST",
      "argumentType" : "Object",
      "keys" : [ {
        "uuid" : "6acf524f-8caf-4e64-bbea-6e4a5c0e5421",
        "name" : "key",
        "argumentType" : "Object"
      }, {
        "uuid" : "2bf415ce-ea2a-43e2-90ef-499e2a8252fe",
        "name" : "name",
        "argumentType" : "Object"
      } ]
    }, {
      "uuid" : "861bd43b-e6cb-4d7f-8cf3-c3ba6f0d68a8",
      "name" : "actions",
      "type" : "LIST",
      "argumentType" : "Object"
    }, {
      "uuid" : "341e65f0-5582-40cb-b8cb-f403ef9add83",
      "name" : "canvasNodes",
      "type" : "LIST",
      "argumentType" : "CanvasNode"
    }, {
      "uuid" : "0516d809-8083-440d-b34d-a27c7609198d",
      "name" : "canvasRelations",
      "type" : "LIST",
      "argumentType" : "CanvasRelation"
    } ]
  }, {
    "uuid" : "94abec9f-6ef2-4d9b-995f-44a09d457c18",
    "name" : "AppEvents",
    "text" : "// deprecated ",
    "parameters" : [ ],
    "children" : [ {
      "uuid" : "1940b970-5991-484f-8fa3-e5b061b65b85",
      "name" : "EventSubscriber",
      "text" : "@org.greenrobot.eventbus.Subscribe()\npublic void on~eventName~(~eventType~ event) {\n\t~statements:{it|~it~};separator=\"\\n\"~\n} ",
      "parameters" : [ {
        "uuid" : "ecff85b3-05ab-464e-8c16-eaa629241d25",
        "name" : "eventName",
        "type" : "SINGLE",
        "argumentType" : "Object"
      }, {
        "uuid" : "9088b2bd-46a0-454d-b021-9cf1e6d32047",
        "name" : "eventType",
        "type" : "SINGLE",
        "argumentType" : "Object"
      }, {
        "uuid" : "d31feb12-38de-4730-903d-12cddfac2d7a",
        "name" : "statements",
        "type" : "LIST",
        "argumentType" : "Object"
      } ]
    } ]
  }, {
    "uuid" : "52c4cf0f-c4dc-451e-b9a2-80222561d727",
    "name" : "STWorkspace",
    "text" : "package ~packageName~;\n\nimport nextgen.st.domain.STGroupModel;\nimport nextgen.st.domain.STTemplate;\nimport nextgen.st.model.STModel;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.util.Optional;\nimport java.util.function.Predicate;\n\npublic class ~name~ extends JTabbedPane {\n\n\t~fields:{it|private ~it.type~ ~it.name~~if(it.init)~ = ~it.init~~endif~;};separator=\"\\n\"~\n\n\tpublic ~name~() {\n\t\tsetPreferredSize(new Dimension(1200, 1024));\n\t\tsetMinimumSize(new Dimension(100, 100));\n\t\t~constructorParameters:{it|~it~};separator=\"\\n\"~\n\t}\n\n\t~fields:{it|public ~it.type~ get~it.name;format=\"capitalize\"~() {\n\t\treturn ~it.name~;\n\t~eom()~\n\t};separator=\"\\n\\n\"~\n\n\t~methods:{it|~it~};separator=\"\\n\\n\"~\n\n\tprivate STAppPresentationModel appModel() {\n\t\treturn nextgen.swing.AppModel.getInstance().getSTAppPresentationModel();\n\t}\n\n\tpublic STRenderPanel findRenderer() {\n\t\treturn (STRenderPanel) find(component -> component instanceof STRenderPanel)\n\t\t\t\t.orElseGet(() -> {\n\t\t\t\t\tfinal STRenderPanel stRenderPanel = new STRenderPanel();\n\t\t\t\t\taddPane(\"Renderer\", stRenderPanel);\n\t\t\t\t\treturn stRenderPanel;\n\t\t\t\t});\n\t}\n\n\tpublic <T extends Component> Optional<T> find(Predicate<Component> predicate) {\n\t\tfor (int i = 0; i < getTabCount(); i++)\n\t\t\tif (predicate.test(getComponentAt(i)))\n\t\t\t\treturn Optional.of((T) getComponentAt(i));\n\t\treturn Optional.empty();\n\t}\n\n\tpublic STModelCanvas findCanvas() {\n\t\treturn (STModelCanvas) find(component -> component instanceof STModelCanvas)\n\t\t\t\t.orElseGet(() -> {\n\t\t\t\t\tfinal STModelCanvas stModelCanvas = new STModelCanvas(UIManager.getColor(\"Panel.background\"), new Dimension(800, 600));\n\t\t\t\t\taddPane(\"Canvas\", stModelCanvas);\n\t\t\t\t\treturn stModelCanvas;\n\t\t\t\t});\n\t}\n\n\tpublic STModelGrid getModelGrid(STTemplate stTemplate) {\n\t\tfor (int i = 0; i < getTabCount(); i++) {\n\t\t\t\tfinal Component tabComponentAt = getComponentAt(i);\n\t\t\t\tif (tabComponentAt instanceof STModelGrid) {\n\t\t\t\t\tif (((STModelGrid) tabComponentAt).getModel().equals(stTemplate))\n\t\t\t\t\t\treturn (STModelGrid) tabComponentAt;\n\t\t\t\t}\n\t\t}\n\n\t\tfinal STModelGrid stModelGrid = new STModelGrid(stTemplate);\n\t\taddPane(stTemplate.getName() + \"-Models\", stModelGrid);\n\t\treturn stModelGrid;\n\t}\n\n\tpublic STModelEditor findModelEditor(STModel stModel, java.util.function.Supplier<STTemplate> stTemplateSupplier) {\n\t\tfor (int i = 0; i < getTabCount(); i++) {\n\t\t\t\tfinal Component tabComponentAt = getComponentAt(i);\n\t\t\t\tif (tabComponentAt instanceof STModelEditor) {\n\t\t\t\t\tif (((STModelEditor) tabComponentAt).getModel().equals(stModel))\n\t\t\t\t\t\treturn (STModelEditor) tabComponentAt;\n\t\t\t\t}\n\t\t}\n\n\t\tfinal STModelEditor component = new STModelEditor(stModel);\n\t\taddPane(appModel().tryToFindArgument(stModel, \"name\", () -> stTemplateSupplier.get().getName() + \"Model\"), component);\n\t\treturn component;\n\t}\n\n\tpublic void removeModelEditor(String uuid) {\n\t\tfor (int i = 0; i < getTabCount(); i++) {\n\t\t\tfinal Component tabComponentAt = getComponentAt(i);\n\t\t\tif (tabComponentAt instanceof STModelEditor) {\n\t\t\t\tif (((STModelEditor) tabComponentAt).getUuid().equals(uuid)) {\n\t\t\t\t\tremove(i);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic STModelEditor getModelEditor(STTemplate stTemplate, STModel stModel) {\n\t\tfor (int i = 0; i < getTabCount(); i++) {\n\t\t\t\tfinal Component tabComponentAt = getComponentAt(i);\n\t\t\t\tif (tabComponentAt instanceof STModelEditor) {\n\t\t\t\t\tif (((STModelEditor) tabComponentAt).getModel().equals(stModel)) {\n\t\t\t\t\t\tfinal nextgen.st.STModelEditor editor = (nextgen.st.STModelEditor) tabComponentAt;\n\t\t\t\t\t\tsetSelectedComponent(editor);\n\t\t\t\t\t\treturn editor;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\n\t\tfinal STModelEditor component = new STModelEditor(stModel);\n\t\taddPane(appModel().tryToFindArgument(stModel, \"name\", () -> stTemplate.getName() + \"Model\"), component);\n\t\tsetSelectedComponent(component);\n\t\treturn component;\n\t}\n\n\tpublic void removeSTEditor(STGroupModel stGroup) {\n\t\tfor (int i = 0; i < getTabCount(); i++) {\n\t\t\t\tfinal Component tabComponentAt = getComponentAt(i);\n\t\t\t\tif (tabComponentAt instanceof STEditor) {\n\t\t\t\t\tif (((STEditor) tabComponentAt).getModel().equals(stGroup)) {\n\t\t\t\t\t\tremove(i);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\t}\n\n\tpublic STEditor getSTEditor(STGroupModel stGroup) {\n\t\tfor (int i = 0; i < getTabCount(); i++) {\n\t\t\t\tfinal Component tabComponentAt = getComponentAt(i);\n\t\t\t\tif (tabComponentAt instanceof STEditor) {\n\t\t\t\t\tif (((STEditor) tabComponentAt).getModel().equals(stGroup)) {\n\t\t\t\t\t\tfinal STEditor stEditor = (STEditor) tabComponentAt;\n\t\t\t\t\t\tstEditor.setSTTemplate(null);\n\t\t\t\t\t\tsetSelectedComponent(stEditor);\n\t\t\t\t\t\treturn stEditor;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\n\t\tfinal STEditor component = new STEditor(stGroup);\n\t\tcomponent.setSTTemplate(null);\n\t\taddPane(stGroup.getName(), component);\n\t\tsetSelectedComponent(component);\n\t\treturn component;\n\t}\n\n\tprivate nextgen.st.STFileEditor getSTFileEditor(nextgen.st.model.STFile stFile) {\n\t\tfor (int i = 0; i < getTabCount(); i++) {\n\t\t\tfinal Component tabComponentAt = getComponentAt(i);\n\t\t\tif (tabComponentAt instanceof STFileEditor) {\n\t\t\t\tif (((STFileEditor) tabComponentAt).getSTFile().equals(stFile)) {\n\t\t\t\t\tfinal nextgen.st.STFileEditor editor = (nextgen.st.STFileEditor) tabComponentAt;\n\t\t\t\t\tsetSelectedComponent(editor);\n\t\t\t\t\treturn editor;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfinal STFileEditor component = new STFileEditor(stFile);\n\t\taddPane(\"FileSink\", component);\n\t\tsetSelectedComponent(component);\n\t\treturn component;\n\t}\n\n\tpublic void removeSTValueEditor(String uuid) {\n\t\tfor (int i = 0; i < getTabCount(); i++) {\n\t\t\tfinal Component tabComponentAt = getComponentAt(i);\n\t\t\tif (tabComponentAt instanceof STValueEditor) {\n\t\t\t\tif (((STValueEditor) tabComponentAt).getUuid().equals(uuid)) {\n\t\t\t\t\tremove(i);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tpublic STValueEditor getSTValueEditor() {\n\t\tfor (int i = 0; i < getTabCount(); i++) {\n\t\t\t\tfinal Component tabComponentAt = getComponentAt(i);\n\t\t\t\tif (tabComponentAt instanceof STValueEditor) {\n\t\t\t\t\treturn (STValueEditor) tabComponentAt;\n\t\t\t\t}\n\t\t}\n\t\n\t\tfinal STValueEditor component = new STValueEditor();\n\t\taddPane(\"STValue\", component);\n\t\tsetSelectedComponent(component);\n\t\treturn component;\n\t}\n\n\tpublic STValueGrid getValueGrid() {\n\t\tfor (int i = 0; i < getTabCount(); i++) {\n\t\t\t\tfinal Component tabComponentAt = getComponentAt(i);\n\t\t\t\tif (tabComponentAt instanceof STValueGrid)\n\t\t\t\t\treturn (STValueGrid) tabComponentAt;\n\t\t}\n\n\t\tfinal STValueGrid component = new STValueGrid();\n\t\taddPane(\"Values\", component);\n\t\treturn component;\n\t}\n\n\tprivate void addPane(String title, JComponent component) {\n\t\taddTab(title, component);\n\t\tsetTabComponentAt(indexOfComponent(component), new ButtonTabComponent(this, title, component));\n\t}\n\n\tpublic void showCanvas() {\n\t\tSwingUtilities.invokeLater(() -> setSelectedComponent(findCanvas()));\n\t}\n\n\tclass ButtonTabComponent extends JPanel {\n\n\t\tButtonTabComponent(final JTabbedPane pane, String title, JComponent component) {\n\t\t\tsuper(new FlowLayout(FlowLayout.LEFT, 0, 0));\n\t\t\tsetOpaque(false);\n\n\t\t\tfinal JLabel label = new JLabel(title);\n\t\t\tlabel.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 5));\n\t\t\tadd(label);\n\n\t\t\taddMouseListener(new MouseAdapter() {\n\t\t\t\t@Override\n\t\t\t\tpublic void mouseClicked(MouseEvent e) {\n\t\t\t\t\tif (SwingUtilities.isRightMouseButton(e))\n\t\t\t\t\t\tSwingUtilities.invokeLater(() -> {\n\t\t\t\t\t\t\tfinal JPopupMenu pop = new JPopupMenu();\n\n\t\t\t\t\t\t\tpop.add(new AbstractAction(\"Close\") {\n\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\tpublic void actionPerformed(ActionEvent actionEvent) {\n\t\t\t\t\t\t\t\t\tpane.remove(component);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tpop.add(new AbstractAction(\"Close Others\") {\n\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\tpublic void actionPerformed(ActionEvent actionEvent) {\n\t\t\t\t\t\t\t\t\tappModel().getWorkspace().closeAllExcept(component);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tpop.add(new AbstractAction(\"Close All\") {\n\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\tpublic void actionPerformed(ActionEvent actionEvent) {\n\t\t\t\t\t\t\t\t\tappModel().getWorkspace().closeAll();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tpop.show(ButtonTabComponent.this, e.getX(), e.getY());\n\t\t\t\t\t\t});\n\t\t\t\t\telse {\n\t\t\t\t\t\tSwingUtilities.invokeLater(() -> pane.setSelectedComponent(component));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate void closeAllExcept(JComponent component) {\n\t\tSwingUtilities.invokeLater(() -> {\n\t\t\tfor (int i = getTabCount() - 1; i >= 0; i--) {\n\t\t\t\tfinal Component componentAt = getComponentAt(i);\n\t\t\t\tif (componentAt.equals(component)) continue;\n\t\t\t\tremove(i);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate void closeAll() {\n\t\tSwingUtilities.invokeLater(() -> {\n\t\t\tfor (int i = getTabCount() - 1; i >= 0; i--) {\n\t\t\t\tremove(i);\n\t\t\t}\n\t\t});\n\t}\n} ",
    "parameters" : [ {
      "uuid" : "5b0e673c-eab4-47d7-aa7d-449e8d1d5ca5",
      "name" : "packageName",
      "type" : "SINGLE",
      "argumentType" : "Object"
    }, {
      "uuid" : "ca917e95-5e41-49b1-b3c7-ef6d548e4a78",
      "name" : "name",
      "type" : "SINGLE",
      "argumentType" : "Object"
    }, {
      "uuid" : "7a1f1121-5540-46be-8f7f-a3747be6ea52",
      "name" : "fields",
      "type" : "KVLIST",
      "argumentType" : "Object",
      "keys" : [ {
        "uuid" : "eefd75ea-2ad9-448f-be26-38931b91ace8",
        "name" : "type",
        "argumentType" : "Object"
      }, {
        "uuid" : "22cbb1a1-9ea5-4091-b39b-1c506748bbf5",
        "name" : "name",
        "argumentType" : "Object"
      }, {
        "uuid" : "623fbc04-61a0-41d1-98f9-7d2c654b2900",
        "name" : "init",
        "argumentType" : "Object"
      } ]
    }, {
      "uuid" : "9867b8fa-5b23-424f-bfc1-773c4a2c3bbe",
      "name" : "constructorParameters",
      "type" : "LIST",
      "argumentType" : "Object"
    }, {
      "uuid" : "d7662e19-ff6c-4d3e-9b6b-45c5a7e3c941",
      "name" : "methods",
      "type" : "LIST",
      "argumentType" : "Object"
    } ]
  }, {
    "uuid" : "34214e8e-b594-487c-ab28-5951b8aa4b45",
    "name" : "STTemplateEditor",
    "text" : "package ~packageName~;\n\nimport nextgen.DomainFacade;\nimport nextgen.stparser.*;\nimport nextgen.swing.AppModel;\nimport nextgen.swing.SwingUtil;\nimport org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;\nimport org.fife.ui.rtextarea.*;\n\nimport javax.swing.*;\nimport javax.swing.border.Border;\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.util.function.Consumer;\nimport java.util.stream.Stream;\n\npublic class ~name~ extends javax.swing.JPanel {\n\n\tprivate RSyntaxTextArea textArea;\n\tprivate nextgen.domain.STTemplate model;\n\tprivate String startText;\n\tprivate String delim;\n\tprivate Color uneditedColor = UIManager.getColor(\"Panel.background\");\n\tprivate Color editedColor = UIManager.getColor(\"Panel.background\").brighter();\n\tprivate Color errorColor = Color.decode(\"#e66101\");\n\tprivate Border defaultBorder;\n\tprivate STEditorCommandPanel commandPanel = new STEditorCommandPanel();\n\tprivate STEditorInfoPanel infoPanel = new STEditorInfoPanel();\n\n\tpublic ~name~(nextgen.domain.STTemplate model) {\n\t\tsuper(new java.awt.BorderLayout());\n\n\t\ttextArea = new RSyntaxTextArea(80, 40);\n\t\ttextArea.setTabSize(3);\n\t\ttextArea.setHighlightCurrentLine(false);\n\t\ttextArea.setSelectionColor(Color.decode(\"#2b8cbe\"));\n\t\ttextArea.setBackground(UIManager.getColor(\"Panel.background\"));\n\t\ttextArea.setForeground(UIManager.getColor(\"Tree.foreground\"));\n\t\ttextArea.setFont(UIManager.getFont(\"TextField.font\"));\n\n\t\tstartText = model.getText();\n\t\tdelim = DomainFacade.getSTGroup(model).getDelimiter();\n\t\tdefaultBorder = textArea.getBorder();\n\t\ttextArea.setText(startText);\n\n\t\tfinal JPopupMenu pop = textArea.getPopupMenu();\n\t\tpop.addSeparator();\n\t\tpop.add(newAction(\"Insert Single\", actionEvent -> insertSingle()));\n\t\tpop.add(newAction(\"Insert Single Capitalized\", actionEvent -> insertCapitalized()));\n\t\tpop.add(newAction(\"Insert List\", actionEvent -> insertList()));\n\t\tpop.add(newAction(\"Insert If\", actionEvent -> insertIf()));\n\t\tpop.add(newAction(\"Insert If-else\", actionEvent -> insertIfElse()));\n\t\tpop.add(newAction(\"Replace text and insert Single\", actionEvent -> replaceAndInsertSingle()));\n\t\tpop.add(newAction(\"Replace text\", actionEvent -> replace()));\n\t\tpop.add(newAction(\"Save\", actionEvent -> commit()));\n\t\tpop.add(newAction(\"Generate\", actionEvent -> generate()));\n\n\t\tfinal RTextScrollPane scrollPane = new RTextScrollPane(textArea);\n\t\tscrollPane.setBackground(UIManager.getColor(\"Panel.background\"));\n\t\tscrollPane.getGutter().setBackground(scrollPane.getBackground());\n\t\tscrollPane.getGutter().setForeground(UIManager.getColor(\"TextField.foreground\"));\n\t\tscrollPane.getGutter().setFont(UIManager.getFont(\"TextField.font\").deriveFont(29f));\n\t\tadd(scrollPane, BorderLayout.CENTER);\n\t\tadd(commandPanel, BorderLayout.NORTH);\n\t\tadd(infoPanel, BorderLayout.SOUTH);\n\t}\n\n\tprivate Action newAction(String name, Consumer<ActionEvent> consumer) {\n\t\treturn new AbstractAction(name) {\n\t\t\t@Override\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\tconsumer.accept(e);\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate void insertSingle() {\n\t\tSwingUtilities.invokeLater(() -> {\n\t\t\tremoveSelectedTextIfAny();\n\t\t\tfinal int caretPosition = textArea.getCaretPosition();\n\t\t\ttextArea.insert(delim(\"\"), caretPosition);\n\t\t\ttextArea.setCaretPosition(caretPosition + 1);\n\t\t\ttextArea.setBackground(startText.trim().equals(textArea.getText().trim()) ? uneditedColor : editedColor);\n\t\t});\n\t}\n\n\tprivate void insertCapitalized() {\n\t\tSwingUtilities.invokeLater(() -> {\n\t\t\tremoveSelectedTextIfAny();\n\t\t\tfinal int caretPosition = textArea.getCaretPosition();\n\t\t\ttextArea.insert(delim(\";format=\\\"capitalize\\\"\"), caretPosition);\n\t\t\ttextArea.setCaretPosition(caretPosition + 1);\n\t\t\ttextArea.setBackground(startText.trim().equals(textArea.getText().trim()) ? uneditedColor : editedColor);\n\t\t});\n\t}\n\n\tprivate void insertList() {\n\t\tfinal String input = SwingUtil.showInputDialog(\"name\", textArea);\n\t\tif (input == null) return;\n\t\tfinal String name = input.contains(\" \") ? input.split(\" \")[0] : input;\n\t\tfinal String separator = input.contains(\" \") ? input.split(\" \")[1] : null;\n\t\tSwingUtilities.invokeLater(() -> {\n\t\t\tremoveSelectedTextIfAny();\n\t\t\tfinal int caretPosition = textArea.getCaretPosition();\n\t\t\tfinal String pre = name + \":{it|\";\n\t\t\tfinal String sep = separator == null ? \"\" : \";separator=\\\"\" + separator + \"\\\"\";\n\t\t\tfinal String list = pre + \"}\" + sep;\n\t\t\ttextArea.insert(delim(list), caretPosition);\n\t\t\ttextArea.setCaretPosition(caretPosition + pre.length() + 1);\n\t\t\ttextArea.setBackground(startText.trim().equals(textArea.getText().trim()) ? uneditedColor : editedColor);\n\t\t});\n\t}\n\n\tprivate void insertIf() {\n\t\tfinal String input = SwingUtil.showInputDialog(\"condition\", textArea);\n\t\tif (input == null) return;\n\t\tfinal String name = input.trim();\n\t\tSwingUtilities.invokeLater(() -> {\n\t\t\tremoveSelectedTextIfAny();\n\t\t\tfinal int caretPosition = textArea.getCaretPosition();\n\t\t\tfinal String pre = delim(\"if(\" + name + \")\");\n\t\t\tfinal String list = pre + delim(\"endif\");\n\t\t\ttextArea.insert(list, caretPosition);\n\t\t\ttextArea.setCaretPosition(caretPosition + pre.length());\n\t\t\ttextArea.setBackground(startText.trim().equals(textArea.getText().trim()) ? uneditedColor : editedColor);\n\t\t});\n\t}\n\n\tprivate void insertIfElse() {\n\t\tfinal String input = SwingUtil.showInputDialog(\"condition\", textArea);\n\t\tif (input == null) return;\n\t\tfinal String name = input.trim();\n\t\tSwingUtilities.invokeLater(() -> {\n\t\t\tremoveSelectedTextIfAny();\n\t\t\tfinal int caretPosition = textArea.getCaretPosition();\n\t\t\tfinal String pre = delim(\"if(\" + name + \")\");\n\t\t\tfinal String list = pre + delim(\"else\") + delim(\"endif\");\n\t\t\ttextArea.insert(list, caretPosition);\n\t\t\ttextArea.setCaretPosition(caretPosition + pre.length());\n\t\t\ttextArea.setBackground(startText.trim().equals(textArea.getText().trim()) ? uneditedColor : editedColor);\n\t\t});\n\t}\n\n\tprivate void replaceAndInsertSingle() {\n\t\tfinal String selected = textArea.getSelectedText();\n\t\tif (selected == null || selected.length() < 1) return;\n\t\tfinal String propertyName = SwingUtil.showInputDialog(\"name\", textArea);\n\t\tif (propertyName == null || propertyName.trim().length() == 0) return;\n\n\t\tSwingUtilities.invokeLater(() -> {\n\t\t\tfinal String replacement = delim(propertyName);\n\t\t\tfinal SearchContext context = new SearchContext();\n\t\t\tcontext.setSearchFor(selected);\n\t\t\tcontext.setReplaceWith(replacement);\n\t\t\tcontext.setMatchCase(true);\n\t\t\tcontext.setSearchForward(true);\n\t\t\tcontext.setWholeWord(false);\n\t\t\tSearchEngine.replaceAll(textArea, context);\n\t\t\ttextArea.setBackground(startText.trim().equals(textArea.getText().trim()) ? uneditedColor : editedColor);\n\t\t});\n\t}\n\n\tprivate void replace() {\n\t\tfinal String selected = textArea.getSelectedText();\n\t\tif (selected == null || selected.length() < 1) return;\n\t\tfinal String replaceWith = SwingUtil.showInputDialog(\"value\", textArea);\n\t\tif (replaceWith == null || replaceWith.trim().length() == 0) return;\n\n\t\tSwingUtilities.invokeLater(() -> {\n\t\t\tfinal SearchContext context = new SearchContext();\n\t\t\tcontext.setSearchFor(selected);\n\t\t\tcontext.setReplaceWith(replaceWith);\n\t\t\tcontext.setMatchCase(true);\n\t\t\tcontext.setSearchForward(true);\n\t\t\tcontext.setWholeWord(false);\n\t\t\tSearchEngine.replaceAll(textArea, context);\n\t\t\ttextArea.setBackground(startText.trim().equals(textArea.getText().trim()) ? uneditedColor : editedColor);\n\t\t});\n\t}\n\n\tprivate void commit() {\n\t\tSwingUtilities.invokeLater(() -> {\n\t\t\ttextArea.setBorder(defaultBorder);\n\t\t\tfinal String text = textArea.getText().trim();\n\t\t\tfinal STGParseResult parseResult = STParser.parseTemplate(text);\n\t\t\tif (parseResult.getErrors().isEmpty()) {\n\t\t\t\tAppModel.getInstance().getDomain().mergeTemplate(parseResult, model);\n\t\t\t\tstartText = text.trim();\n\t\t\t\ttextArea.setBackground(startText.trim().equals(textArea.getText().trim()) ? uneditedColor : editedColor);\n\t\t\t\tinfoPanel.clear();\n\t\t\t} else {\n\t\t\t\ttextArea.setBorder(BorderFactory.createLineBorder(errorColor));\n\t\t\t\tinfoPanel.showParseErrors(parseResult.getErrors());\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate void generate() {\n\t\tcommit();\n\t\tAppModel.getInstance().getDomain().generateSTGroup(DomainFacade.getSTGroup(model));\n\t}\n\n\tprivate void removeSelectedTextIfAny() {\n\t\tif (textArea.getSelectedText() != null) {\n\t\t\tfinal int selectionStart = textArea.getSelectionStart();\n\t\t\ttextArea.replaceRange(\"\", selectionStart, textArea.getSelectionEnd());\n\t\t\ttextArea.setCaretPosition(selectionStart);\n\t\t\ttextArea.setBackground(startText.trim().equals(textArea.getText().trim()) ? uneditedColor : editedColor);\n\t\t}\n\t}\n\n\tprivate String delim(String expression) {\n\t\treturn delim + expression + delim;\n\t}\n\n\tprivate class STEditorCommandPanel extends JPanel {\n\n\t\tpublic STEditorCommandPanel() {\n\t\t\tsuper(new FlowLayout(FlowLayout.LEFT));\n\n\t\t\tadd(new JButton(newAction(\"Insert Single\", actionEvent -> {\n\t\t\t\tinsertSingle();\n\t\t\t\ttextArea.requestFocusInWindow();\n\t\t\t})));\n\n\t\t\tadd(new JButton(newAction(\"Insert Single Capitalized\", actionEvent -> {\n\t\t\t\tinsertCapitalized();\n\t\t\t\ttextArea.requestFocusInWindow();\n\t\t\t})));\n\t\t\tadd(new JButton(newAction(\"Insert List\", actionEvent -> {\n\t\t\t\tinsertList();\n\t\t\t\ttextArea.requestFocusInWindow();\n\t\t\t})));\n\t\t\tadd(new JButton(newAction(\"Insert If\", actionEvent -> {\n\t\t\t\tinsertIf();\n\t\t\t\ttextArea.requestFocusInWindow();\n\t\t\t})));\n\t\t\tadd(new JButton(newAction(\"Insert If-else\", actionEvent -> {\n\t\t\t\tinsertIfElse();\n\t\t\t\ttextArea.requestFocusInWindow();\n\t\t\t})));\n\t\t\tadd(new JButton(newAction(\"Replace text and insert Single\", actionEvent -> {\n\t\t\t\treplaceAndInsertSingle();\n\t\t\t\ttextArea.requestFocusInWindow();\n\t\t\t})));\n\t\t\tadd(new JButton(newAction(\"Save\", actionEvent -> {\n\t\t\t\tcommit();\n\t\t\t\ttextArea.requestFocusInWindow();\n\t\t\t})));\n\t\t\tadd(new JButton(newAction(\"Generate\", actionEvent -> {\n\t\t\t\tgenerate();\n\t\t\t\ttextArea.requestFocusInWindow();\n\t\t\t})));\n\t\t}\n\t}\n\n\tprivate class STEditorInfoPanel extends JPanel {\n\n\t\tprivate final JTextArea textArea = new JTextArea();\n\n\t\tpublic STEditorInfoPanel() {\n\t\t\tsuper(new BorderLayout());\n\n\t\t\tthis.textArea.setTabSize(3);\n\t\t\tthis.textArea.setBorder(BorderFactory.createEmptyBorder(4, 4, 4, 4));\n\n\t\t\tadd(new JScrollPane(textArea), BorderLayout.CENTER);\n\t\t\tsetPreferredSize(new Dimension(800, 200));\n\t\t}\n\n\t\tpublic void clear() {\n\t\t\tSwingUtilities.invokeLater(() -> {\n\t\t\t\ttextArea.setText(\"\");\n\t\t\t\ttextArea.setToolTipText(\"\");\n\t\t\t});\n\t\t}\n\n\t\tpublic void showParseErrors(java.util.List<STGError> errors) {\n\t\t\tfinal StringBuilder info = new StringBuilder(\"Parsing errors:\");\n\n\t\t\terrors.forEach(stgError -> {\n\n\t\t\t\tinfo.append(\"\\n\").append(stgError.getType());\n\n\t\t\t\tswitch (stgError.getType()) {\n\t\t\t\t\tcase COMPILE: {\n\t\t\t\t\t\tinfo.append(\"\\n\\tline\t\t\t\t\t\").append(stgError.getLine());\n\t\t\t\t\t\tinfo.append(\"\\n\\tpos\t\t\t\t\t \").append(stgError.getCharPosition());\n\t\t\t\t\t\tinfo.append(\"\\n\\tmessage\t\t\t\t\").append(stgError.getMessage());\n\n\t\t\t\t\t\tif (stgError.getMessage().contains(\"expecting RDELIM\")) {\n\t\t\t\t\t\t\tinfo.append(\"\\n\\tpossible cause\t  \")\n\t\t\t\t\t\t\t\t\t.append(\"This is probably a '}' being interpreted as end-of a kv-iteration.\");\n\t\t\t\t\t\t\tinfo.append(\"\\n\\tpossible solution  \")\n\t\t\t\t\t\t\t\t\t.append(\"Try escaping the previous '}' (i.e from '}' to '\\\\\\\\}')\");\n\t\t\t\t\t\t} else if (stgError.getMessage().contains(\"invalid character '>'\")) {\n\t\t\t\t\t\t\tinfo.append(\"\\n\\tpossible cause\t  \")\n\t\t\t\t\t\t\t\t\t.append(\"This is probably a '>' being interpreted as end-of template.\");\n\t\t\t\t\t\t\tinfo.append(\"\\n\\tpossible solution  \")\n\t\t\t\t\t\t\t\t\t.append(\"Try changing the last '>' to '\")\n\t\t\t\t\t\t\t\t\t.append(delim)\n\t\t\t\t\t\t\t\t\t.append(\"gt()\")\n\t\t\t\t\t\t\t\t\t.append(delim)\n\t\t\t\t\t\t\t\t\t.append(\"'\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase RUNTIME:\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase IO:\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase INTERNAL:\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\ttextArea.setText(info.toString().trim());\n\t\t\ttextArea.setCaretPosition(0);\n\t\t}\n\t}\n} ",
    "parameters" : [ {
      "uuid" : "da44998e-b97c-4914-a278-606667fa4bbc",
      "name" : "packageName",
      "type" : "SINGLE",
      "argumentType" : "Object"
    }, {
      "uuid" : "aee880d4-0b80-4427-ad96-df933b857d0f",
      "name" : "name",
      "type" : "SINGLE",
      "argumentType" : "Object"
    } ]
  }, {
    "uuid" : "648c531a-a73f-434a-92c9-d9ebab34459c",
    "name" : "DomainFacade",
    "text" : "package ~packageName~;\n\nimport net.openhft.compiler.CompilerUtils;\nimport org.jeasy.flows.work.WorkReportPredicate;\nimport org.neo4j.graphdb.GraphDatabaseService;\n\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Optional;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\nimport java.util.concurrent.ExecutorService;\n\n~imports:{it|~it~};separator=\"\\n\"~\n\npublic class ~name~ extends ~factory~ {\n\n\tpublic ~name~(String dir) {\n\t\tsuper(dir);\n\t}\n\n\tpublic ~name~(GraphDatabaseService db) {\n\t\tsuper(db);\n\t}\n\n\t~methods:{it|~it~};separator=\"\\n\"~\n\n\tpublic static List<STTemplate> aggregateTemplates(STGroupModel stGroup) {\n\t\tfinal List<STTemplate> stTemplates = new ArrayList<>();\n\t\tstGroup.getTemplates().forEach(stTemplate -> {\n\t\t\tstTemplates.add(stTemplate);\n\t\t\taddChildren(stTemplate.getChildren().collect(Collectors.toList()), stTemplates);\n\t\t});\n\t\treturn stTemplates;\n\t}\n\n\tpublic static List<STTemplate> aggregateTemplates(Stream<STGroupModel> stream) {\n\t\tfinal List<STTemplate> stTemplates = new ArrayList<>();\n\t\tstream.forEach(stGroupModel -> stTemplates.addAll(aggregateTemplates(stGroupModel)));\n\t\treturn stTemplates;\n\t}\n\n\tprivate static void addChildren(List<STTemplate> collect, List<STTemplate> stTemplates) {\n\t\tstTemplates.addAll(collect);\n\t\tfor (STTemplate stTemplate : collect)\n\t\t\taddChildren(stTemplate.getChildren().collect(Collectors.toList()), stTemplates);\n\t}\n\n\tpublic Stream<STGroupModel> getAllSTGroups() {\n\t\treturn findAllSTGroupModel()\n\t\t\t\t.sorted((g1, g2) -> g1.getName().compareToIgnoreCase(g2.getName()));\n\t}\n\n\tpublic static Stream<STTemplate> getTemplates(STGroupModel stGroupModel) {\n\t\treturn stGroupModel.getTemplates()\n\t\t\t\t.sorted((t1, t2) -> t1.getName().compareToIgnoreCase(t2.getName()));\n\t}\n\n\tpublic static Stream<STTemplate> getTemplates(STTemplate stTemplate) {\n\t\treturn stTemplate.getChildren()\n\t\t\t\t.sorted((t1, t2) -> t1.getName().compareToIgnoreCase(t2.getName()));\n\t}\n\n\tpublic static Stream<STTemplate> getTemplates(Stream<STGroupModel> stGroupModel) {\n\t\tfinal Optional<STGroupModel> first = stGroupModel.findFirst();\n\t\tif (!first.isPresent()) return Stream.empty();\n\t\treturn getTemplates(first.get());\n\t}\n\n\tpublic static STGroupModel getSTGroup(STTemplate stTemplate) {\n\n\t\tfinal Optional<STGroupModel> stGroupModel = stTemplate.getIncomingTemplatesSTGroupModel().findAny();\n\t\tif (stGroupModel.isPresent()) return stGroupModel.get();\n\n\t\tfinal Optional<STTemplate> parent = stTemplate.getIncomingChildrenSTTemplate().findAny();\n\t\tif (parent.isPresent()) return getSTGroup(parent.get());\n\n\t\tthrow new RuntimeException(stTemplate.getName() + \" has no STGroup. This is an error.\");\n\t}\n\n\tpublic Stream<Project> getAllProjects() {\n\t\treturn findAllProject()\n\t\t\t\t.sorted((p1, p2) -> p1.getName().compareToIgnoreCase(p2.getName()));\n\t}\n\n\tpublic STGroupModel newSTGroupModel(String name, String delimiter) {\n\t\treturn newSTGroupModel()\n\t\t\t\t.setName(name)\n\t\t\t\t.setDelimiter(delimiter);\n\t}\n\n\tpublic STTemplate newSTTemplate(String name, STGroupModel stGroup) {\n\t\tfinal STTemplate stTemplate = newSTTemplate()\n\t\t\t\t.setName(name)\n\t\t\t\t.setText(\"\");\n\t\tstGroup.addTemplates(stTemplate);\n\t\treturn stTemplate;\n\t}\n\n\tpublic STTemplate newSTTemplate(String name, STTemplate parent) {\n\t\tfinal STTemplate stTemplate = newSTTemplate()\n\t\t\t\t.setName(name)\n\t\t\t\t.setText(\"\");\n\t\tparent.addChildren(stTemplate);\n\t\treturn stTemplate;\n\t}\n\n\tpublic org.jeasy.flows.work.Work newInstance(Work work) {\n\t\tfinal templates.javaeasyflows.Work javaCode = toCode(work);\n\t\tfinal String className = javaCode.getPackageName() + \".\" + javaCode.getName().toString();\n\t\ttry {\n\t\t\tfinal Class<?> workClass = CompilerUtils.CACHED_COMPILER.loadFromJava(className, javaCode.toString());\n\t\t\treturn (org.jeasy.flows.work.Work) workClass.getDeclaredConstructor().newInstance();\n\t\t} catch (Throwable e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}\n\n\tpublic org.jeasy.flows.workflow.ConditionalFlow toFlow(ConditionalFlow flow, ExecutorService executorService) {\n\n\t\tfinal org.jeasy.flows.workflow.ConditionalFlow.Builder f = org.jeasy.flows.workflow.ConditionalFlow.Builder.aNewConditionalFlow()\n\t\t\t\t.named(flow.getName())\n\t\t\t\t.execute(toWork(flow.getExecute(), executorService));\n\n\t\tfinal WorkInstance then = flow.getThen();\n\t\tif (then != null) f.then(toWork(then, executorService));\n\n\t\tfinal WorkInstance otherwise = flow.getOtherwise();\n\t\tif (otherwise != null) f.otherwise(toWork(otherwise, executorService));\n\n\t\treturn f.build();\n\t}\n\n\tpublic org.jeasy.flows.workflow.SequentialFlow toFlow(SequentialFlow flow, ExecutorService executorService) {\n\n\t\tfinal org.jeasy.flows.workflow.SequentialFlow.Builder f = org.jeasy.flows.workflow.SequentialFlow.Builder.aNewSequentialFlow()\n\t\t\t\t.named(flow.getName())\n\t\t\t\t.execute(toWork(flow.getExecute(), executorService));\n\n\t\tflow.getThen().forEach(workType -> f.then(toWork(workType, executorService)));\n\n\t\treturn f.build();\n\t}\n\n\tpublic org.jeasy.flows.workflow.ParallelFlow toFlow(ParallelFlow flow, ExecutorService executorService) {\n\n\t\tfinal org.jeasy.flows.workflow.ParallelFlow.Builder f = org.jeasy.flows.workflow.ParallelFlow.Builder.aNewParallelFlow(executorService)\n\t\t\t\t.named(flow.getName())\n\t\t\t\t.execute(toWork(flow.getExecute(), executorService));\n\n\t\treturn f.build();\n\t}\n\n\tpublic org.jeasy.flows.workflow.RepeatFlow toFlow(RepeatFlow flow, ExecutorService executorService) {\n\n\t\tfinal org.jeasy.flows.workflow.RepeatFlow.Builder f = org.jeasy.flows.workflow.RepeatFlow.Builder.aNewRepeatFlow()\n\t\t\t\t.named(flow.getName())\n\t\t\t\t.repeat(toWork(flow.getRepeat(), executorService));\n\n\t\tif (flow.getTimes() != null)\n\t\t\tf.times(flow.getTimes());\n\t\telse if (flow.getUntil() != null)\n\t\t\tf.until(toWorkReportPredicate(flow.getUntil()));\n\n\t\treturn f.build();\n\t}\n\n\tpublic WorkInstance newWorkInstance(nextgen.domain.Work work) {\n\t\treturn newWorkInstance().setType(WorkType.WORK).setWork(work);\n\t}\n\n\tpublic WorkInstance newWorkInstance(nextgen.domain.SequentialFlow work) {\n\t\treturn newWorkInstance().setType(WorkType.SEQUENTIAL).setSequential(work);\n\t}\n\n\tpublic WorkInstance newWorkInstance(nextgen.domain.ParallelFlow work) {\n\t\treturn newWorkInstance().setType(WorkType.PARALLEL).setParallel(work);\n\t}\n\n\tpublic WorkInstance newWorkInstance(nextgen.domain.ConditionalFlow work) {\n\t\treturn newWorkInstance().setType(WorkType.CONDITIONAL).setConditional(work);\n\t}\n\n\tpublic WorkInstance newWorkInstance(nextgen.domain.RepeatFlow work) {\n\t\treturn newWorkInstance().setType(WorkType.REPEAT).setRepeat(work);\n\t}\n\n\tprivate org.jeasy.flows.work.Work[] toWork(Stream<WorkInstance> stream, ExecutorService executorService) {\n\t\tfinal List<WorkInstance> workTypes = stream.collect(Collectors.toList());\n\t\tfinal org.jeasy.flows.work.Work[] works = new org.jeasy.flows.work.Work[workTypes.size()];\n\t\tfor (int i = 0; i < workTypes.size(); i++)\n\t\t\tworks[i] = toWork(workTypes.get(i), executorService);\n\t\treturn works;\n\t}\n\n\tprivate org.jeasy.flows.work.Work toWork(WorkInstance workInstance, ExecutorService executorService) {\n\n\t\tswitch (workInstance.getType()) {\n\t\t\tcase WORK:\n\t\t\t\treturn newInstance(workInstance.getWork());\n\t\t\tcase CONDITIONAL:\n\t\t\t\treturn toFlow(workInstance.getConditional(), executorService);\n\t\t\tcase SEQUENTIAL:\n\t\t\t\treturn toFlow(workInstance.getSequential(), executorService);\n\t\t\tcase PARALLEL:\n\t\t\t\treturn toFlow(workInstance.getParallel(), executorService);\n\t\t\tcase REPEAT:\n\t\t\t\treturn toFlow(workInstance.getRepeat(), executorService);\n\t\t}\n\n\t\tthrow new RuntimeException(\"unsupported type \" + workInstance.getType());\n\t}\n\n\tprivate templates.javaeasyflows.Work toCode(Work work) {\n\t\tfinal templates.javaeasyflows.Work w = templates.JavaEasyFlowsPatterns.newWork();\n\t\tw.setName(work.getName());\n\t\tw.setPackageName(work.getPackage());\n\t\twork.getInputs().forEach(workInput -> w.addInputs(workInput.getType(), workInput.getName()));\n\t\twork.getStatements().forEach(workStatement -> w.addStatements(workStatement.getStatement()));\n\t\tSystem.out.println(w.toString());\n\t\treturn w;\n\t}\n\n\tprivate WorkReportPredicate toWorkReportPredicate(UntilPredicate until) {\n\t\tswitch (until) {\n\t\t\tcase ALWAYS_TRUE:\n\t\t\t\treturn WorkReportPredicate.ALWAYS_TRUE;\n\t\t\tcase ALWAYS_FALSE:\n\t\t\t\treturn WorkReportPredicate.ALWAYS_FALSE;\n\t\t\tcase COMPLETED:\n\t\t\t\treturn WorkReportPredicate.COMPLETED;\n\t\t\tcase FAILED:\n\t\t\t\treturn WorkReportPredicate.FAILED;\n\t\t}\n\t\tthrow new RuntimeException(\"unsupported untilPredicate \" + until);\n\t}\n\n\tpublic Work newWork(String name, Project project) {\n\t\tfinal Work work = newWork()\n\t\t\t\t.setName(name)\n\t\t\t\t.setPackage(\"projects.\" + project.getName().toLowerCase());\n\t\tproject.addWork(work);\n\t\treturn work;\n\t}\n\n\tpublic SequentialFlow newSequentialFlow(String name, Project project) {\n\t\tfinal SequentialFlow flow = newSequentialFlow()\n\t\t\t\t.setName(name);\n\t\tproject.addFlows(newWorkInstance(flow));\n\t\treturn flow;\n\t}\n\n\tpublic ConditionalFlow newConditionalFlow(String name, Project project) {\n\t\tfinal ConditionalFlow flow = newConditionalFlow()\n\t\t\t\t.setName(name);\n\t\tproject.addFlows(newWorkInstance(flow));\n\t\treturn flow;\n\t}\n\n\tpublic ParallelFlow newParallelFlow(String name, Project project) {\n\t\tfinal ParallelFlow flow = newParallelFlow()\n\t\t\t\t.setName(name);\n\t\tproject.addFlows(newWorkInstance(flow));\n\t\treturn flow;\n\t}\n\n\tpublic RepeatFlow newRepeatFlow(String name, Project project) {\n\t\tfinal RepeatFlow flow = newRepeatFlow()\n\t\t\t\t.setName(name);\n\t\tproject.addFlows(newWorkInstance(flow));\n\t\treturn flow;\n\t}\n\n\tpublic void mergeTemplate(STGParseResult parseResult, STTemplate model) {\n\n\t}\n\n\tpublic void generateSTGroup(STGroupModel stGroup) {\n\n\t}\n} ",
    "parameters" : [ {
      "uuid" : "44bbb4ef-db9b-4c4f-832e-5bf471593cd8",
      "name" : "packageName",
      "type" : "SINGLE",
      "argumentType" : "Object"
    }, {
      "uuid" : "94e4dc1a-662a-437f-9a53-32c1dc19867c",
      "name" : "imports",
      "type" : "LIST",
      "argumentType" : "Object"
    }, {
      "uuid" : "df216cd6-0b88-4f02-a2c4-8b0b7b72de61",
      "name" : "name",
      "type" : "SINGLE",
      "argumentType" : "Object"
    }, {
      "uuid" : "2464e297-9383-49b1-b1eb-592bdb690c8b",
      "name" : "factory",
      "type" : "SINGLE",
      "argumentType" : "Object"
    }, {
      "uuid" : "c8a19f0e-b1fa-41f6-a177-bf1be9346e41",
      "name" : "methods",
      "type" : "LIST",
      "argumentType" : "Object"
    } ],
    "children" : [ {
      "uuid" : "48a56644-7dc7-4330-bae0-3013f1f546b7",
      "name" : "EntityConstraints",
      "text" : "public static String canDelete(~entity~ entity) {\n\tfinal StringBuilder constraints = new StringBuilder(\"\");\n\t~constraints:{it|~it~};separator=\"\\n\"~\n\treturn constraints.toString().trim();\n}\n\npublic static String delete(~entity~ entity) {\n\t~deleteStatements:{it|~it~};separator=\"\\n\"~\n\treturn entity.getUuid();\n} ",
      "parameters" : [ {
        "uuid" : "881ffee1-c84e-4e2c-b9fc-f68ca9333afe",
        "name" : "entity",
        "type" : "SINGLE",
        "argumentType" : "Object"
      }, {
        "uuid" : "a58bfb43-471a-48de-9f3a-034a66b20993",
        "name" : "constraints",
        "type" : "LIST",
        "argumentType" : "Object"
      }, {
        "uuid" : "48239c00-f674-43ce-8aa4-ac4a7e41cdd9",
        "name" : "deleteStatements",
        "type" : "LIST",
        "argumentType" : "Object"
      } ]
    } ]
  }, {
    "uuid" : "54b49221-8a58-44a5-9ba6-2a75cbe9357f",
    "name" : "TransactionAction",
    "text" : "package nextgen.actions;\n\npublic class ~name~ extends TransactionAction {\n\n   ~staticFields:{it|private static final ~it.type~ ~it.name~ = ~it.init~;};separator=\"\\n\"~\n   \n   ~fields:{it|private final ~it.type~ ~it.name~;};separator=\"\\n\"~\n~if(title)~\n\n\tpublic ~name~(~fields:{it|~it.type~ ~it.name~};separator=\", \"~) {\n\t\tsuper(\"~title~\");\n\t\t~fields:{it|this.~it.name~ = ~it.name~;};separator=\"\\n\"~\n\t}\n\n~elseif(titleExpression)~\n\n\tpublic ~name~(~fields:{it|~it.type~ ~it.name~};separator=\", \"~) {\n\t\tsuper(~titleExpression~);\n\t\t~fields:{it|this.~it.name~ = ~it.name~;};separator=\"\\n\"~\n\t}\n\n~else~\n\n\tpublic ~name~(String name~if(fields)~, ~endif~~fields:{it|~it.type~ ~it.name~};separator=\", \"~) {\n      super(name);\n      ~fields:{it|this.~it.name~ = ~it.name~;};separator=\"\\n\"~\n   }\n\n~endif~\n   @Override\n   protected void actionPerformed(java.awt.event.ActionEvent actionEvent, org.neo4j.graphdb.Transaction transaction) {\n      ~statements:{it|~it~};separator=\"\\n\"~\n   }\n\n   ~methods:{it|~it~};separator=\"\\n\\n\"~\n} ",
    "parameters" : [ {
      "uuid" : "11537742-fe8c-4f04-adee-3fa4fcb58e5e",
      "name" : "name",
      "type" : "SINGLE",
      "argumentType" : "Object"
    }, {
      "uuid" : "c57938c2-8f40-4d67-9058-3518075f0c92",
      "name" : "staticFields",
      "type" : "KVLIST",
      "argumentType" : "Object",
      "keys" : [ {
        "uuid" : "92e1303e-a4a0-4169-9963-8cde340e1fba",
        "name" : "type",
        "argumentType" : "Object"
      }, {
        "uuid" : "bdac0bd6-c49e-44c5-93c7-af33e0e32266",
        "name" : "name",
        "argumentType" : "Object"
      }, {
        "uuid" : "ef74cc4e-0a6d-4fac-84e1-506bc86f01db",
        "name" : "init",
        "argumentType" : "Object"
      } ]
    }, {
      "uuid" : "d7f4e8a6-1236-4e4e-8d8b-2466f0cd5f6a",
      "name" : "fields",
      "type" : "KVLIST",
      "argumentType" : "Object",
      "keys" : [ {
        "uuid" : "f7b8af2b-1124-4219-be8d-d65b2046e9d6",
        "name" : "type",
        "argumentType" : "Object"
      }, {
        "uuid" : "a977fb37-bdef-46ed-ad32-2055fe39fcd0",
        "name" : "name",
        "argumentType" : "Object"
      } ]
    }, {
      "uuid" : "ce732d7d-50d7-4b9f-9347-005f4cc5a66e",
      "name" : "title",
      "type" : "SINGLE",
      "argumentType" : "Object"
    }, {
      "uuid" : "de029cf4-eda1-4457-8381-db1d58843064",
      "name" : "titleExpression",
      "type" : "SINGLE",
      "argumentType" : "Object"
    }, {
      "uuid" : "1aaaae33-8f1f-4fbf-b202-60e7240ca5b5",
      "name" : "statements",
      "type" : "LIST",
      "argumentType" : "Object"
    }, {
      "uuid" : "08b4a7ed-20c5-48f5-8a7f-9a2f97b4ed86",
      "name" : "methods",
      "type" : "LIST",
      "argumentType" : "Object"
    } ]
  }, {
    "uuid" : "117ee1c4-d82c-41b5-ba96-87bb79dcfa40",
    "name" : "ActionCall",
    "text" : ""
  } ]
}