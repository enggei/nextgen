delimiters "~", "~"


packageJson(author,bugsUrl,dependencies,description,devDependencies,homepage,license,main,name,repositoryType,repositoryUrl,scripts,version) ::= <<{
  "name": "~name~",
  "version": "~version~",
  "description": "~description~",
  "main": "~main~",
  "scripts": {
    ~scripts:{it|~it~};separator=",\n"~
  },
  "repository": {
    "type": "~repositoryType~",
    "url": "~repositoryUrl~"
  },
  "author": "~author~",
  "license": "~license~",
  "bugs": {
    "url": "~bugsUrl~"
  },
  "homepage": "~homepage~",
  "dependencies": {
    ~dependencies:{it|~it~};separator=",\n"~
  },
  "devDependencies": {
    ~devDependencies:{it|~it~};separator=",\n"~
  }
} >>

script(command,name) ::= <<"~name~": "~command~" >>

dependency(name,version) ::= <<"~name~": "^~version~" >>

babelrc() ::= <<{
	"presets": [
		"@babel/preset-env", 
		"@babel/preset-react"
	],
	"plugins": [
		["module:@babel/plugin-proposal-decorators", { "legacy": true }],
		["module:@babel/plugin-proposal-class-properties", { "loose": true }]
	]
} >>

WebpackConfig(mainEntry,outputFilename) ::= <<const path = require('path');

module.exports = {
	entry: { 
		main: '~mainEntry~' 
	},
	output: {
		path: __dirname,
		filename: '~outputFilename~'
	},
	module: {
		rules: [
			{
				test: path.join(__dirname, '.'),
				exclude: /(node_modules)/,
				use: [
					{
						loader: 'babel-loader',
						options: {
			    			presets: ["@babel/preset-env", "@babel/preset-react"]
						}
					}
				]
			}
		]
	}
}; >>eom() ::= <<}>>
gt() ::= <<> >>
