delimiters "~","~"

STDomain(packageName,name,entities,template) ::= <<package ~packageName~;

public class ~name~ {

	private final org.stringtemplate.v4.STGroupFile stGroupFile;

	public ~name~() {
		this(new java.io.File("templates/~template~.stg"));
	}
	
	public ~name~(final java.io.File stgFile) {
		this(stgFile, '\~');
	}

	public ~name~(final java.io.File stgFile, char delimiter) {
		this.stGroupFile = new org.stringtemplate.v4.STGroupFile(stgFile.getAbsolutePath(), delimiter, delimiter);
		this.stGroupFile.registerRenderer(Object.class, new DefaultAttributeRenderer());
	}

	~entities:{it|~it~};separator="\n\n"~

	private static final class DefaultAttributeRenderer implements org.stringtemplate.v4.AttributeRenderer {

		@Override
		public String toString(Object o, String formatString, java.util.Locale locale) {

			final String text = o.toString();
			if (formatString == null) return text;

			final String s = text.length() > 1 ? text.substring(1) : "";
			
			switch (formatString) {
				case "capitalize":
					return Character.toUpperCase(text.charAt(0)) + s;
				case "toUpper":
					return text.toUpperCase();
				case "lowFirst":
					return Character.toLowerCase(text.charAt(0)) + s;
				case "toLower":
					return text.toLowerCase();
				default:
					return o.toString();
			}
		}
	}	
} >>

newEntityInstance(entityName,template) ::= <<public ~entityName~ new~entityName~() {
	return new ~entityName~(stGroupFile, "~template~");
} >>

STDomainTests(testcases,domainName,packageName,name) ::= <<package ~packageName~;

public class ~name~ {

	private static ~domainName~ domain;

	@org.junit.BeforeClass
	public static void loadSTGFile() {
		domain = new ~domainName~();
	}

	@org.junit.Test
	public void testAll() {
		~testcases:{it|test~it.name;format="capitalize"~();};separator="\n"~
	}

	~testcases:{it|~it.impl~};separator="\n\n"~
} >>

templateTestMethod(template) ::= <<@org.junit.Test
public void test~template;format="capitalize"~() {
	System.out.println("~template~ ---\n");
	System.out.println(domain.new~template;format="capitalize"~());
	System.out.println("\n--- ~template~");
} >>

STEntity(kvListFields,name,singleFields,listAccessors,listFields,kvListAccessors,packageName,singleAccessors) ::= <<package ~packageName~;

public class ~name~ {

	private final java.util.UUID uuid = java.util.UUID.randomUUID();
	private final org.stringtemplate.v4.STGroupFile stGroupFile;
	private final String template;
	
	~singleFields:{it|private Object _~it~;};separator="\n"~
	~listFields:{it|private java.util.List<Object> _~it~ = new java.util.ArrayList<>();};separator="\n"~
	~kvListFields:{it|private java.util.List<java.util.Map<String, Object~gt()~> _~it.name~ = new java.util.ArrayList<>();};separator="\n"~
	
	public ~name~(org.stringtemplate.v4.STGroupFile stGroupFile, String template) {
		this.stGroupFile = stGroupFile;
		this.template = template;
	}

	@Override
	public boolean equals(Object o) {
		if (this == o) return true;
		if (o == null || getClass() != o.getClass()) return false;
		~name~ that = (~name~) o;
		return uuid.equals(that.uuid);
	}

	@Override
	public int hashCode() {
		return java.util.Objects.hash(uuid);
	}

	@Override
	public String toString() {
		final org.stringtemplate.v4.ST st = stGroupFile.getInstanceOf(template);
		~singleFields:{it|st.add("~it~" ,_~it~);};separator="\n"~
		~listFields:{it|for (Object o : _~it~) st.add("~it~", o);};separator="\n"~
		~kvListFields:{it|for (java.util.Map<String, Object> map : _~it.name~) st.addAggr("~it.aggrSpec~", ~it.aggrValues~);};separator="\n"~
		return st.render();
	}
	
	~singleAccessors:{it|~it~};separator="\n\n"~
	
	~listAccessors:{it|~it~};separator="\n\n"~
	
	~kvListAccessors:{it|~it~};separator="\n\n"~
~if(kvListAccessors)~

	private static void addAggr(String name, java.util.Map<String, Object> values, org.stringtemplate.v4.ST st) {
		final StringBuilder aggrSpec = new StringBuilder(name + ".{");
		final java.util.List<Object> aggrArguments = new java.util.ArrayList<>(values.size());

		boolean first = true;
		for (String key : values.keySet()) {
				if (!first) aggrSpec.append(",");
				aggrSpec.append(key);
				aggrArguments.add(values.get(key));
				first = false;
		}
		aggrSpec.append("}");

		st.addAggr(aggrSpec.toString(), aggrArguments.toArray());
	}~endif~
} >>

entityListAccessors(entity,name) ::= <<public ~entity~ add~name;format="capitalize"~(Object value) {
	this._~name~.add(value);
	return this;
}

public ~entity~ remove~name;format="capitalize"~(Object value) {
	this._~name~.remove(value);
	return this;
}

public ~entity~ remove~name;format="capitalize"~(int index) {
	this._~name~.remove(index);
	return this;
}

public java.util.List<Object> get~name;format="capitalize"~() {
	return this._~name~;
} >>

entityKVListAccessors(name,keys,entity) ::= <<public ~entity~ add~name;format="capitalize"~(~keys:{it|Object _~it~};separator=","~) {
	final java.util.Map<String, Object> map = new java.util.HashMap<>();
	~keys:{it|map.put("~it~", _~it~);};separator="\n"~
	this._~name~.add(map);
	return this;
}

public java.util.List<java.util.Map<String, Object~gt()~> get~name;format="capitalize"~() {
	return this._~name~;
} >>

entitySingleAccessors(name,entity) ::= <<public ~entity~ set~name;format="capitalize"~(Object value) {
	this._~name~ = value;
	return this;
}

public Object get~name;format="capitalize"~() {
	return this._~name~;
}

public boolean has~name;format="capitalize"~() {
	return this._~name~ != null;
}

public ~entity~ remove~name;format="capitalize"~() {
	this._~name~ = null;
	return this;
} >>

eom() ::= "}"

gt() ::= ">"
