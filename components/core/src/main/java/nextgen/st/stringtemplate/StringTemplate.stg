delimiters "~","~"

DomainVisitorRunner(packageName,imports,name,rootNode,initStatements,entityVisitors,relationVisitors,endStatements,templatesDir,dbDir,entityUuid) ::= <<package ~packageName~;

import nextgen.domains.meta.DomainEntity;
import nextgen.st.STRenderer;
import nextgen.st.domain.STGroupModel;
import nextgen.st.model.STModelDB;
import org.neo4j.graphdb.*;

import java.util.*;
import java.io.File;

~imports:{it|~it~};separator="\n"~

public class ~name~ implements Runnable {

	private final static org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(~name~.class);
	private final STModelDB db;
	private final STRenderer renderer;
	private final DomainEntity domainEntity;

	public ~name~(STModelDB db, STRenderer renderer, DomainEntity domainEntity) {
		this.db = db;
		this.renderer = renderer;
		this.domainEntity = domainEntity;
	}

	@Override
	public void run() {
		db.doInTransaction(transaction -> {
			final Visitor visitor = new Visitor();
			visitor.visit~rootNode;format="capitalize"~(domainEntity.getNode());
			visitor.end();
		});
	}

	private static final class Visitor {
		
		private final Set<Node> visitedNodes = new LinkedHashSet<>();

		Visitor() {
			~initStatements~
		}
		
		~entityVisitors:{it|~it~};separator="\n\n"~

		~relationVisitors:{it|~it~};separator="\n\n"~

		void end() {
			~endStatements~
		}

		private Iterable<Relationship> get(Node node, String components) {
			return node.getRelationships(Direction.OUTGOING, RelationshipType.withName(components));
		}

		private String getProperty(PropertyContainer propertyContainer, String name, String defaultValue) {
			return propertyContainer.hasProperty(name) ? (String) propertyContainer.getProperty(name) : defaultValue;
		}
	}

	public static void main(String[] args) {
		final Collection<nextgen.st.domain.STGroupModel> stGroups = new ArrayList<>();
		final File templatesDir = new java.io.File("~templatesDir~");
		Optional.ofNullable(templatesDir.listFiles(pathname -> pathname.isFile() && pathname.getName().toLowerCase().endsWith(".json")))
			.ifPresent(files -> {
				for (java.io.File file : files)
					stGroups.add(new STGroupModel(nextgen.st.STParser.readJsonObject(file)));
			});
		final STModelDB db = new STModelDB("~dbDir~", stGroups);
		final STRenderer renderer = new STRenderer(stGroups);
		final DomainEntity domainEntity = db.getInTransaction(transaction -> new DomainEntity(db.getDatabaseService().findNode(org.neo4j.graphdb.Label.label("DomainEntity"), "uuid", "~entityUuid~")));

		new Thread(new ~name~(db, renderer, domainEntity)).start();
	}
}  >>

VisitNodeMethod(name,properties,statements,relations) ::= <<void visit~name;format="capitalize"~(Node node) {
	if (visitedNodes.contains(node)) return;
	visitedNodes.add(node);
	log.info("on node ~name;format="capitalize"~");
	~properties:{it|final String ~it.name~ = getProperty(node, "~it.name~", ~if(it.defaultValue)~~it.defaultValue~~else~null~endif~);};separator="\n"~
~if(statements)~
	
	~statements~
	
~endif~	
	~relations:{it|get(node, "~it.name~").forEach(this::visit~it.name;format="capitalize"~);};separator="\n"~
}  >>

VisitRelationMethod(name,properties,statements,dst) ::= <<void visit~name;format="capitalize"~(Relationship relationship) {
	log.info("on relation ~name;format="capitalize"~");
	~properties:{it|final String ~it.name~ = getProperty(relationship, "~it.name~", ~if(it.defaultValue)~~it.defaultValue~~else~null~endif~);};separator="\n"~
~if(statements)~
	
	~statements~
	
~endif~
	~dst:{it|visit~it.name;format="capitalize"~(relationship.getEndNode());};separator="\n"~
}  >>

NeoDomain(package,name,entities,finders) ::= <<package ~package~;

import nextgen.st.model.*;
import org.neo4j.graphdb.Node;
import java.util.Optional;

public class ~name;format="capitalize"~ {

	private final STModelDB db;

	public ~name;format="capitalize"~(STModelDB db) {
		this.db = db;
	}

~entities:{it|
	public ~it.name;format="capitalize"~ new~it.name;format="capitalize"~() {
		return new ~it.name;format="capitalize"~(db);
	~eom()~

	public ~it.name;format="capitalize"~ new~it.name;format="capitalize"~(STModel stModel) {
		return new ~it.name;format="capitalize"~(db, stModel);
	~eom()~

	public ~it.name;format="capitalize"~ new~it.name;format="capitalize"~(Node node) {
		return new ~it.name;format="capitalize"~(db, node);
	~eom()~
};separator="\n\n"~

	~finders:{it|~it~};separator="\n\n"~
}  >>

NeoEntity(package,name,stGroupModel,stTemplate,singleAccessors,listAccessors,kvAccessors) ::= <<package ~package~;

import nextgen.st.model.*;
import nextgen.st.domain.*;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicReference;
import java.util.stream.Stream;

public class ~name;format="capitalize"~ {

	public static final String stGroupModelUuid = "~stGroupModel~";
   public static final String stTemplateUuid = "~stTemplate~";
   
	private final STModelDB db;
	private final STModel stModel;
	private final STTemplate stTemplate;

	public ~name;format="capitalize"~(STModelDB db) {
		this.db = db;
		this.stTemplate = this.db.findSTTemplateByUuid(stTemplateUuid);
		this.stModel = this.db.newSTModel(stGroupModelUuid, this.stTemplate);
	}

	public ~name;format="capitalize"~(STModelDB db, STModel stModel) {
		this.db = db;
		this.stTemplate = this.db.findSTTemplateByUuid(stTemplateUuid);
		this.stModel = stModel;
	}

	public ~name;format="capitalize"~(STModelDB db, org.neo4j.graphdb.Node node) {
		this.db = db;
		this.stTemplate = this.db.findSTTemplateByUuid(stTemplateUuid);
		this.stModel = this.db.newSTModel(node);
	}

	public STValue asSTValue () {
		return db.newSTValue(stModel);
	}

	~singleAccessors:{it|~it~};separator="\n\n"~

	~listAccessors:{it|~it~};separator="\n\n"~

	~kvAccessors:{it|~it~};separator="\n\n"~

	private ~name;format="capitalize"~ set(STValue value, String name) {
		findParameter(name)
				.ifPresent(stParameter -> {

					stModel.getArguments()
							.filter(stArgument -> stArgument.getStParameter().equals(stParameter.getUuid()))
							.findAny()
							.ifPresent(stModel::removeArguments);

					stModel.addArguments(db.newSTArgument(stParameter, value));
				});
		return this;
	}

	private STValue get(String name) {
		final AtomicReference<STValue> value = new AtomicReference<>();
		findParameter(name).flatMap(stParameter -> stModel.getArguments()
				.filter(stArgument -> stArgument.getStParameter().equals(stParameter.getUuid()))
				.findAny()).ifPresent(stArgument -> value.set(stArgument.getValue()));
		return value.get();
	}

	private ~name;format="capitalize"~ add(STValue value, String name) {
		findParameter(name)
				.ifPresent(stParameter -> stModel.addArguments(db.newSTArgument(stParameter, value)));
		return this;
	}

	private Stream<STValue> stream(String name) {
		return findParameter(name)
				.map(stParameter -> stModel.getArguments()
						.filter(stArgument -> stArgument.getStParameter().equals(stParameter.getUuid()))
						.map(STArgument::getValue)).orElseGet(Stream::empty);
	}

	private Optional<STParameter> findParameter(String name) {
		return stTemplate.getParameters()
				.filter(param -> param.getName().equals(name))
				.findFirst();
	}

	private void addKV(STValue _type, STParameter stParameter, Collection<STArgumentKV> kvs, String type) {
		stParameter.getKeys()
				.filter(stParameterKey -> stParameterKey.getName().equals(type))
				.findFirst()
				.ifPresent(stParameterKey -> kvs.add(db.newSTArgumentKV(stParameterKey, _type)));
	}
}  >>

SingleAccessors(entity,name) ::= <<public ~entity;format="capitalize"~ set~name;format="capitalize"~(String value) {
	return set~name;format="capitalize"~(db.newSTValue(value));
}

public ~entity;format="capitalize"~ set~name;format="capitalize"~(STValue value) {
	return set(value, "~name~");
}

public STValue get~name;format="capitalize"~() {
	return get("~name~");
}  >>

ListAccessors(entity,name) ::= <<public ~entity;format="capitalize"~ add~name;format="capitalize"~(String value) {
	return add~name;format="capitalize"~(db.newSTValue(value));
}

public ~entity;format="capitalize"~ add~name;format="capitalize"~(STValue value) {
	return add(value, "~name~");
}

public Stream<STValue> get~name;format="capitalize"~() {
	return stream("~name~");
}  >>

KVAccessors(entity,name,keys) ::= <<public ~entity;format="capitalize"~ add~name;format="capitalize"~(~keys:{it|String _~it.name~};separator=", "~) {
	return add~name;format="capitalize"~(~keys:{it|db.newSTValue(_~it.name~)};separator=", "~);
}

public ~entity;format="capitalize"~ add~name;format="capitalize"~(~entity;format="capitalize"~_~name;format="capitalize"~ value) {
	return add~name;format="capitalize"~(~keys:{it|value.get~it.name;format="capitalize"~()};separator=", "~);
}

public ~entity;format="capitalize"~ add~name;format="capitalize"~(~keys:{it|STValue _~it.name~};separator=", "~) {
	findParameter("~name~")
			.ifPresent(stParameter -> {
				final Collection<STArgumentKV> kvs = new ArrayList<>();
				~keys:{it|addKV(_~it.name~, stParameter, kvs, "~it.name~");};separator="\n"~
				db.newSTArgument(stParameter, kvs);
			});

	return this;
}

public java.util.stream.Stream<~entity;format="capitalize"~_~name;format="capitalize"~> stream~name;format="capitalize"~() {
	return findParameter("~name~")
			.map(stParameter -> stModel.getArguments()
					.filter(stArgument -> stArgument.getStParameter().equals(stParameter.getUuid()))
					.map(stArgument -> new ~entity;format="capitalize"~_~name;format="capitalize"~(stArgument, stParameter)))
			.orElseGet(Stream::empty);
}

public final class ~entity;format="capitalize"~_~name;format="capitalize"~ {

	STArgument stArgument;
	STParameter stParameter;

	public ~entity;format="capitalize"~_~name;format="capitalize"~(STArgument stArgument, STParameter stParameter) {
		this.stArgument = stArgument;
		this.stParameter = stParameter;
	}

~keys:{it|
	public ~entity;format="capitalize"~_~name;format="capitalize"~ set~it.name;format="capitalize"~(String value) {
		return set~it.name;format="capitalize"~(db.newSTValue(value));
	~eom()~

	public ~entity;format="capitalize"~_~name;format="capitalize"~ set~it.name;format="capitalize"~(STValue value) {
		return setKVValue("~it.name~", value);
	~eom()~

	public STValue get~it.name;format="capitalize"~() {
		return getKVValue("~it.name~");
	~eom()~
};separator="\n\n"~

	private ~entity;format="capitalize"~_~name;format="capitalize"~ setKVValue(String name, STValue value) {

		stParameter.getKeys()
				.filter(stParameterKey -> stParameterKey.getName().equals(name))
				.findAny()
				.ifPresent(stParameterKey -> {

					stArgument.getKeyValues()
							.filter(stArgumentKV -> stArgumentKV.getStParameterKey().equals(stParameterKey.getUuid()))
							.findAny()
							.ifPresent(stArgumentKV -> stArgument.removeKeyValues(stArgumentKV));

					stArgument.addKeyValues(db.newSTArgumentKV(stParameterKey, value));
				});

		return this;
	}

	private STValue getKVValue(String name) {
		final AtomicReference<STValue> value = new AtomicReference<>();
		stParameter.getKeys()
				.filter(param -> param.getName().equals(name))
				.findFirst().flatMap(stParameter -> stArgument.getKeyValues()
				.filter(stArgument -> stArgument.getStParameterKey().equals(stParameter.getUuid()))
				.findAny()).ifPresent(stArgument -> value.set(stArgument.getValue()));

		return value.get();
	}
}  >>

FindBy(entity,name) ::= <<public Optional<~entity;format="capitalize"~> find~entity;format="capitalize"~By~name;format="capitalize"~(STValue value) {
	return Optional.ofNullable(db.find("~name~", value, ~entity;format="capitalize"~.stTemplateUuid, ~entity;format="capitalize"~::new));
}  >>

ScriptRunner(packageName,imports,name,script,templatesDir,dbDir) ::= <<package ~packageName~;

~imports:{it|~it~};separator="\n"~

public class ~name~ implements Runnable {

	private final static org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(~name~.class);
	private final nextgen.st.model.STModelDB db;
	private final nextgen.st.STRenderer renderer;

	public ~name~(nextgen.st.model.STModelDB db, nextgen.st.STRenderer renderer) {
		this.db = db;
		this.renderer = renderer;
	}

	@Override
	public void run() {
		db.doInTransaction(transaction -> {
			~script~
		});
	}
	
	public static void main(String[] args) {
		final java.util.Collection<nextgen.st.domain.STGroupModel> stGroups = new java.util.ArrayList<>();
		final java.io.File templatesDir = new java.io.File("~templatesDir~");
		java.util.Optional.ofNullable(templatesDir.listFiles(pathname -> pathname.isFile() && pathname.getName().toLowerCase().endsWith(".json")))
			.ifPresent(files -> {
				for (java.io.File file : files)
						stGroups.add(new nextgen.st.domain.STGroupModel(nextgen.st.STParser.readJsonObject(file)));
			});
		new Thread(new ~name~(new nextgen.st.model.STModelDB("~dbDir~", stGroups), new nextgen.st.STRenderer(stGroups))).start();
	}
}  >>

STDomain(packageName,name,stgString,entities) ::= <<package ~packageName~;

public class ~name~ {

	private static final String stg = ~stgString~;

	public static org.stringtemplate.v4.STGroup decorate(final org.stringtemplate.v4.STGroup stGroup) {
		stGroup.registerRenderer(Object.class, new DefaultAttributeRenderer());
		stGroup.setListener(new org.stringtemplate.v4.STErrorListener() {
			@Override
			public void compileTimeError(org.stringtemplate.v4.misc.STMessage stMessage) {
				System.out.println("compileTimeError " + stMessage.toString());
			}

			@Override
			public void runTimeError(org.stringtemplate.v4.misc.STMessage stMessage) {
				final org.stringtemplate.v4.misc.STRuntimeMessage stRuntimeMessage = (org.stringtemplate.v4.misc.STRuntimeMessage) stMessage;
				System.out.println("runTimeError " + stMessage.self.getName() + " " + stRuntimeMessage.getSourceLocation());
			}

			@Override
			public void IOError(org.stringtemplate.v4.misc.STMessage stMessage) {
				System.out.println("IOError " + stMessage.toString());
			}

			@Override
			public void internalError(org.stringtemplate.v4.misc.STMessage stMessage) {
				System.out.println("internalError " + stMessage.toString());
			}
		});

		return stGroup;
	}
		
	private static org.stringtemplate.v4.STGroup stGroup = decorate(new org.stringtemplate.v4.STGroupString("~name~", stg, '\~', '\~'));

	public static void setSTGroup(final String stgFile) {
		stGroup = decorate(new org.stringtemplate.v4.STGroupFile(stgFile, '\~', '\~'));
	}

	~entities:{it|~it~};separator="\n\n"~

	private static final class DefaultAttributeRenderer implements org.stringtemplate.v4.AttributeRenderer {

		@Override
		public String toString(Object o, String formatString, java.util.Locale locale) {

			final String text = o.toString();
			if (formatString == null) return text;

			final String s = text.length() > 1 ? text.substring(1) : "";
			
			switch (formatString) {
				case "capitalize":
					return Character.toUpperCase(text.charAt(0)) + s;
				case "toUpper":
					return text.toUpperCase();
				case "lowFirst":
					return Character.toLowerCase(text.charAt(0)) + s;
				case "toLower":
					return text.toLowerCase();
				case "dotToCap":
					final StringBuilder formatted = new StringBuilder();
					final char[] chars = o.toString().toCharArray();
					for (int i = 0; i < chars.length; i++)
            		if (chars[i] != '.')
							formatted.append(i == 0 || chars[i - 1] == '.' ? Character.toUpperCase(chars[i]) : chars[i]);
					return formatted.toString().trim();
				default:
					return o.toString();
			}
		}
	}
}  >>

newEntityInstance(entityName) ::= <<public static ~entityName~ new~entityName~() {
	return new ~entityName~(stGroup);
}  >>

stgString(templates) ::= <<new StringBuilder("delimiters \"\~\", \"\~\"\\n")
	.append("eom() ::= \"}\"\\n")
	.append("gt() ::= \">\"\\n")
	~templates:{it|.append(~it~.st + "\\n")};separator="\n"~
	.toString()  >>

STDomainTests(packageName,domainName,name,testcases) ::= <<package ~packageName~;

import static ~packageName~.~domainName~.*;

/**
 * Tests for ~domainName~
 **/
public class ~name~ {

	@org.junit.Test
	public void testAll() {
		~testcases:{it|test~it.name;format="capitalize"~();};separator="\n"~
	}

	~testcases:{it|~it.impl~};separator="\n\n"~
} >>

templateTestMethod(template) ::= <<@org.junit.Test
public void test~template;format="capitalize"~() {
	System.out.println("\n--- TEST ~template~:\n" + new~template;format="capitalize"~());
} >>

STEntity(packageName,name,interfaces,singleFields,listFields,kvListFields,template,singleAccessors,listAccessors,kvListAccessors,stString) ::= <<package ~packageName~;

public class ~name~~if(interfaces)~ implements ~endif~~interfaces:{it|~it~};separator=", "~ {

	private final java.util.UUID uuid = java.util.UUID.randomUUID();
	private final org.stringtemplate.v4.STGroup stGroup;
	
	~singleFields:{it|private ~it.type~ _~it.name~;};separator="\n"~
	~listFields:{it|private java.util.List<~it.type~> _~it.name~ = new java.util.ArrayList<>();};separator="\n"~
	~kvListFields:{it|private java.util.List<java.util.Map<String, Object~gt()~> _~it.name~ = new java.util.ArrayList<>();};separator="\n"~
	
	~name~(org.stringtemplate.v4.STGroup stGroup) {
		this.stGroup = stGroup;
	}

	@Deprecated
	public java.util.UUID uuid() {
		return uuid;
	}

	public java.util.UUID getUuid() {
		return uuid;
	}

	@Override
	public String toString() {
		final org.stringtemplate.v4.ST st = stGroup.getInstanceOf("~template~");
		~singleFields:{it|st.add("~it.name~", _~it.name~);};separator="\n"~
		~listFields:{it|for (Object o : _~it.name~) st.add("~it.name~", o);};separator="\n"~
		~kvListFields:{it|for (java.util.Map<String, Object> map : _~it.name~) st.addAggr("~it.aggrSpec~", ~it.aggrValues~);};separator="\n"~
		return st.render().trim();
	}
	
	~singleAccessors:{it|~it~};separator="\n\n"~
	
	~listAccessors:{it|~it~};separator="\n\n"~
	
	~kvListAccessors:{it|~it~};separator="\n\n"~

	@Override
	public boolean equals(Object o) {
		if (this == o) return true;
		if (o == null || getClass() != o.getClass()) return false;
		~name~ that = (~name~) o;
		return uuid.equals(that.uuid);
	}

	@Override
	public int hashCode() {
		return java.util.Objects.hash(uuid);
	}
	
	~if(stString)~static final String st = "~stString~";~endif~
}  >>

entityListAccessors(entity,name,type) ::= <<public ~entity~ add~name;format="capitalize"~(~if(type)~~type~~else~Object~endif~ value) {
	this._~name~.add(value);
	return this;
}

public ~entity~ set~name;format="capitalize"~(~if(type)~~type~~else~Object~endif~[] value) {
	this._~name~.addAll(java.util.Arrays.asList(value));
	return this;
}

public ~entity~ set~name;format="capitalize"~(java.util.Collection<~if(type)~~type~~else~Object~endif~> values) {
	this._~name~.addAll(values);
	return this;
}

public ~entity~ remove~name;format="capitalize"~(~if(type)~~type~~else~Object~endif~ value) {
	this._~name~.remove(value);
	return this;
}

public ~entity~ remove~name;format="capitalize"~(int index) {
	this._~name~.remove(index);
	return this;
}

public java.util.List<~if(type)~~type~~else~Object~endif~> get~name;format="capitalize"~() {
	return this._~name~;
} >>

entityKVListAccessors(entity,name,keys) ::= <<public ~entity~ add~name;format="capitalize"~(~keys:{it|~if(it.type)~~it.type~~else~Object~endif~ _~it.name~};separator=", "~) {
	final java.util.Map<String, Object> map = new java.util.HashMap<>();
	~keys:{it|map.put("~it.name~", _~it.name~);};separator="\n"~
	this._~name~.add(map);
	return this;
}

public java.util.List<java.util.Map<String, Object~gt()~> get~name;format="capitalize"~() {
	return this._~name~;
}

public ~entity~ add~name;format="capitalize"~(~entity~_~name;format="capitalize"~ value) {
	return add~name;format="capitalize"~(~keys:{it|value._~it.name~};separator=", "~);
}

public java.util.stream.Stream<~entity~_~name;format="capitalize"~> stream~name;format="capitalize"~() {
	return this._~name~.stream().map(~entity~_~name;format="capitalize"~::new);
}

public static final class ~entity~_~name;format="capitalize"~ {

	~keys:{it|~if(it.type)~~it.type~~else~Object~endif~ _~it.name~;};separator="\n"~

	public ~entity~_~name;format="capitalize"~(~keys:{it|~if(it.type)~~it.type~~else~Object~endif~ _~it.name~};separator=", "~) {
		~keys:{it|this._~it.name~ = _~it.name~;};separator="\n"~
	}

	private ~entity~_~name;format="capitalize"~(java.util.Map<String, Object> map) {
		~keys:{it|this._~it.name~ = (~it.type~) map.get("~it.name~");};separator="\n"~
	}

	~keys:{it|public ~if(it.type)~~it.type~~else~Object~endif~ get~it.name;format="capitalize"~() {
	return this._~it.name~;
~eom()~
	};separator="\n"~
} >>

entitySingleAccessors(entity,name,type) ::= <<public ~entity~ set~name;format="capitalize"~(~if(type)~~type~~else~Object~endif~ value) {
	this._~name~ = value;
	return this;
}

public ~if(type)~~type~~else~Object~endif~ get~name;format="capitalize"~() {
	return this._~name~;
}

public ~if(type)~~type~~else~Object~endif~ get~name;format="capitalize"~(~if(type)~~type~~else~Object~endif~ defaultValue) {
	return this._~name~ == null ? defaultValue : this._~name~;
}

public boolean has~name;format="capitalize"~() {
	return this._~name~ != null;
}

public ~entity~ remove~name;format="capitalize"~() {
	this._~name~ = null;
	return this;
} >>

STEnum(packageName,name,enumValues) ::= <<package ~packageName~;

public enum ~name~ {

	~enumValues:{it|~it~};separator=",\n"~
}  >>

STEnumValue(name,lexical) ::= <<~name~~if(lexical)~() {
	@Override
	public String toString() { return "~lexical~"; }
}~endif~  >>

STInterface(packageName,name) ::= <<package ~packageName~;

public interface ~name~ {
	
} >>

eom() ::= "}"

gt() ::= ">"
