delimiters "~","~"

Domain(name,packageName,observable,entities) ::= <<Domain: ~name~ ~if(packageName)~(~packageName~)~endif~ ~if(observable)~observable~endif~
Entities:
~entities:{it|~it~};separator="\n"~  >>

Entity(name,isEnum,enumValues,observable,relations) ::= <<Entity: ~name~ ~if(isEnum)~Enum : ~enumValues:{it|~it~};separator=","~~endif~ ~if(observable)~observable~endif~
~relations:{it|~it~};separator="\n"~  >>

Relation(name,type,dst,lexical,self) ::= <<~name~ ~type~ ~dst~~if(lexical)~ lexical~endif~~if(self)~ self-referential~endif~  >>

JavaProject(packageName,javaPatterns,name,root,libraries,packageDeclarations) ::= <<package ~packageName~;

import nextgen.templates.java.*;

~if(javaPatterns)~import static ~packageName~.~name~.JavaPatterns.*;~endif~
	
public class ~name~ {

	final java.io.File root = new java.io.File("~root~");
	final java.io.File mainJava = new java.io.File(root, "src/main/java");
	final java.io.File mainResources = new java.io.File(root, "src/main/resources");
	final java.io.File testJava = new java.io.File(root, "src/test/java");
	final java.io.File testResources = new java.io.File(root, "src/test/resources");

	~libraries:{it|~it~};separator="\n\n"~
	
	~packageDeclarations:{it|~it~};separator="\n\n"~

	~javaPatterns~
}  >>

JavaPackage(comments,name,parent,packageName,entities,methods,subPackages) ::= <<~if(comments)~
// ~comments~
~endif~
final PackageDeclaration ~name~ = newPackageDeclaration(~if(parent)~~parent~, ~endif~"~packageName~");
~entities:{it|final NamedEntity ~if(it.ref)~~it.ref~~else~~it.name~~endif~ = new NamedEntity("~it.name~", ~if(it.isPrimitive)~null~else~~name~~endif~~if(it.variableName)~, "~it.variableName~"~endif~);};separator="\n"~

~methods:{it|~it~};separator="\n\n"~

~subPackages:{it|~it~};separator="\n\n"~  >>

JavaLibrary(name,packages) ::= <<// ~name~
~packages:{it|~it~};separator="\n\n"~  >>

eom() ::= "}"

gt() ::= ">"
