delimiters "~","~"

Component(imports,components,styleClasses,name,const,renderCondition,renderTrue,renderFalse,renderElement) ::= <<import React from 'react';
import { makeStyles } from '@material-ui/core/styles';
~imports:{it|import ~it.name~ from '~it.path~';};separator="\n"~
~components:{it|import ~it.name~ from '~it.lexical~';};separator="\n"~

const useStyles = makeStyles((theme) => ({
	~styleClasses:{it|~it~};separator=",\n"~
}));

export default function ~name~(props) {

	const classes = useStyles();
	~const:{it|const ~it.name~ = ~it.declaration~;};separator="\n"~

~if(renderCondition)~
	if(~renderCondition~)
		return ( 
			~renderTrue~
		);
	else
		return (
			~renderFalse~
		);
~else~
	return (
		~renderElement~
	);
~endif~
}  >>

StyleClass(name,attributes) ::= <<~name~: {
	~attributes:{it|~it.name~: ~it.value~};separator=",\n"~
}  >>

SimpleElement(name,key,className,attributes,children) ::= <<<~name~~if(key)~ key=~key~~endif~~if(className)~ className={classes.~className~}~endif~~if(attributes)~ ~endif~~attributes:{it|~it.name~~if(it.value)~=~it.value~~endif~};separator=" "~>
	~children:{it|~it~};separator="\n"~
</~name~>  >>

PaperElement(key,className,children) ::= <<<Paper~if(key)~ key=~key~~endif~~if(className)~ className={classes.~className~}~endif~>
	~children:{it|~it~};separator="\n"~
</Paper>  >>

TypographyElement(key,className,variant,component,gutter,text) ::= <<<Typography~if(key)~ key=~key~~endif~~if(className)~ className={classes.~className~}~endif~~if(variant)~ variant="~variant~"~endif~~if(component)~ component="~component~"~endif~~if(gutter)~ ~gutter~~endif~>
	~text~
</Typography>  >>

LinkElement(href,onClick,text) ::= <<<Link href="~href~" onClick=~onClick~>
	~text~
</Link>  >>

ButtonElement(key,className,color,component,attributes,children) ::= <<<Button~if(key)~ key=~key~~endif~~if(className)~ className={classes.~className~}~endif~~if(color)~ color="~color~"~endif~~if(component)~ component=~component~~endif~~if(attributes)~ ~endif~~attributes:{it|~it.name~~if(it.value)~=~it.value~~endif~};separator=" "~>
	~children:{it|~it~};separator="\n"~
</Button>  >>

GridContainerElement(key,className,justify,spacing,children) ::= <<<Grid container~if(key)~ key=~key~~endif~~if(className)~ className={classes.~className~}~endif~~if(justify)~ justify="~justify~"~endif~~if(spacing)~ spacing={~spacing~}~endif~>
	~children:{it|~it~};separator="\n"~
</Grid>  >>

GridItemElement(xs,key,className,children) ::= <<<Grid item~if(xs)~ xs={~xs~}~endif~~if(key)~ key=~key~~endif~~if(className)~ className={classes.~className~}~endif~>
	~children:{it|~it~};separator="\n"~
</Grid>  >>

DividerElement(light,orientation,variant,className) ::= <<<Divider~if(light)~ light~endif~~if(orientation)~ orientation="~orientation~"~endif~~if(variant)~ variant="~variant~"~endif~~if(className)~ className={classes.~className~}~endif~ />  >>

eom() ::= "}"

gt() ::= ">"
