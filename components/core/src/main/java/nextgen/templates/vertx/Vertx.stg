delimiters "~","~"

DomainVerticle(packageName,domainPackage,name,actions,domainFactory,address) ::= <<package ~packageName~;

import ~domainPackage~.*;
import io.vertx.core.AbstractVerticle;
import io.vertx.core.Promise;
import io.vertx.core.eventbus.Message;
import io.vertx.core.json.JsonArray;
import io.vertx.core.json.JsonObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ~name;format="capitalize"~ extends AbstractVerticle {

	private static final Logger log = LoggerFactory.getLogger(~name;format="capitalize"~.class);

	public enum Action {
		~actions:{it|~it.name~};separator=",\n"~
	}

	public enum ErrorCodes {
		NO_ACTION_HEADER,
		UNKNOWN_ACTION,
		DB_ERROR
	}

	private ~domainFactory~ db;

	@Override
	public void start(Promise<Void> promise) throws Exception {
		db = new ~domainFactory~(config().getString("path"));
		vertx.eventBus().consumer(config().getString("~address~", "~address~"), this::onMessage);
	}

	public void onMessage(Message<JsonObject> message) {

		if (!message.headers().contains("action")) {
			log.error("No action header specified for message with headers {} and body {}", message.headers(), message.body().encodePrettily());
			message.fail(ErrorCodes.NO_ACTION_HEADER.ordinal(), "No action header specified");
			return;
		}

		final Action action = getAction(message);
		
		if (action == null) {
			message.fail(ErrorCodes.UNKNOWN_ACTION.ordinal(), "Unknown action");
			return;
		}

		switch (action) {
~actions:{it|
			case ~it.name~: {
				~it.name~(message);
				break;
			\}};separator="\n"~
		}
	}

	~actions:{it|~it.declaration~};separator="\n\n"~

	private Action getAction(Message<JsonObject> message) {
		final String action = message.headers().get("action");
		try {
			return Action.valueOf(action);
		} catch (Throwable e) {
			log.error("Unknown action " + action);
			return null;
		}
	}
}  >>

jsonArrayAction(name,params,statements) ::= <<private void ~name~(Message<JsonObject> message) {

	final JsonObject body = message.body();
	~params:{it|final ~it.type~ ~it.name~ = body.get~it.type~("~it.name~");};separator="\n"~

	final JsonArray response = new JsonArray();

	db.doInTransaction(transaction -> {
		~statements:{it|~it~};separator="\n"~
		message.reply(response);
	}, throwable -> {
		message.fail(ErrorCodes.DB_ERROR.ordinal(), throwable.getMessage());
	});
}  >>

jsonObjectAction(name,params,statements) ::= <<private void ~name~(Message<JsonObject> message) {

	final JsonObject body = message.body();
	~params:{it|final ~it.type~ ~it.name~ = body.get~it.type~("~it.name~");};separator="\n"~

	final JsonObject response = new JsonObject();
	
	db.doInTransaction(transaction -> {
		~statements:{it|~it~};separator="\n"~
		message.reply(response);
	}, throwable -> {
		message.fail(ErrorCodes.DB_ERROR.ordinal(), throwable.getMessage());
	});
}  >>

Entities() ::= << >>

JsonWrapper(package,name,externalFields,accessors,neoNodeMapper,lexical) ::= <<package ~package~;

public class ~name;format="capitalize"~ {

	private final io.vertx.core.json.JsonObject jsonObject;
	~externalFields:{it|private ~it.type~ _~it.name~~if(it.initializer)~ = ~it.initializer~~endif~;};separator="\n"~

	public ~name;format="capitalize"~() { 
		this.jsonObject = new io.vertx.core.json.JsonObject();
		jsonObject.put("uuid", java.util.UUID.randomUUID().toString());
	}

	public ~name;format="capitalize"~(io.vertx.core.json.JsonObject jsonObject) { 
		this.jsonObject = jsonObject;
		java.lang.String uuidString = jsonObject.getString("uuid");
		if (uuidString == null) jsonObject.put("uuid", java.util.UUID.randomUUID().toString());
	}

	public io.vertx.core.json.JsonObject getJsonObject() { 
		return this.jsonObject;
	}

	public ~name;format="capitalize"~ removeUuid() {
		this.jsonObject.remove("uuid");
		return this;
	}

	@Override
	public boolean equals(java.lang.Object o) { 
		if (this == o) return true;
		if (o == null || getClass() != o.getClass()) return false;
		final ~name;format="capitalize"~ other = (~name;format="capitalize"~) o;
		return jsonObject.getString("uuid").equals(other.getJsonObject().getString("uuid"));
	}

	@Override
	public int hashCode() { 
		return java.util.Objects.hash(jsonObject.getString("uuid"));
	}

	~accessors:{it|~it~};separator="\n\n"~

	~neoNodeMapper~

	@Override
	public java.lang.String toString() { 
		return ~if(lexical)~jsonObject.getString("~lexical~")~else~jsonObject.encode()~endif~;
	}
}  >>

primitiveAccessors(className,name,type) ::= <<public ~className;format="capitalize"~ set~name;format="dotToCap"~(~type~ value) { 
	jsonObject.put("~name~", value);
	return this;
}

public ~type~ get~name;format="dotToCap"~() { 
	return jsonObject.get~type;format="capitalize"~("~name~");
}

public ~type~ get~name;format="dotToCap"~(~type~ defaultValue) { 
	return jsonObject.get~type;format="capitalize"~("~name~", defaultValue);
} >>

listReferenceAccessors(className,name,type) ::= <<public ~className;format="capitalize"~ add~name;format="capitalize"~(~type~ value) { 
	io.vertx.core.json.JsonArray jsonArray = jsonObject.getJsonArray("~name~");
	if (jsonArray == null) jsonObject.put("~name~", jsonArray = new io.vertx.core.json.JsonArray());
	jsonArray.add(value.getJsonObject());
	return this;
}

public java.util.stream.Stream<~type~> get~name;format="capitalize"~() { 
	return jsonObject.getJsonArray("~name~", new io.vertx.core.json.JsonArray()).stream().map((o) -> new ~type~((io.vertx.core.json.JsonObject) o));
}

public ~className;format="capitalize"~ remove~name;format="capitalize"~(~type~ value) { 
	final io.vertx.core.json.JsonArray jsonArray = jsonObject.getJsonArray("~name~", new io.vertx.core.json.JsonArray());
	for (int i = 0; i < jsonArray.size(); i++)  { 
		final io.vertx.core.json.JsonObject o = jsonArray.getJsonObject(i);
		if (value.getJsonObject().getString("uuid").equals(o.getString("uuid")))  { 
			jsonArray.remove(i);
			return this;
		}
	}
	return this;
}

public ~className;format="capitalize"~ clear~name;format="capitalize"~() { 
	jsonObject.put("~name~", new io.vertx.core.json.JsonArray());
	return this;
} >>

referenceAccessors(className,name,type) ::= <<public ~className;format="capitalize"~ set~name;format="capitalize"~(~type~ value) { 
	jsonObject.put("~name~", value.getJsonObject());
	return this;
}

public ~type~ get~name;format="capitalize"~() { 
	return jsonObject.getJsonObject("~name~") == null ? null : new ~type~(jsonObject.getJsonObject("~name~"));
} >>

listPrimitiveAccessors(className,name,type) ::= <<public ~className;format="capitalize"~ add~name;format="capitalize"~(~type~ value) { 
	io.vertx.core.json.JsonArray jsonArray = jsonObject.getJsonArray("~name~");
	if (jsonArray == null) jsonObject.put("~name~", jsonArray = new io.vertx.core.json.JsonArray());
	jsonArray.add(value);
	return this;
}

public java.util.stream.Stream<~type~> get~name;format="capitalize"~() { 
	return jsonObject.getJsonArray("~name~", new io.vertx.core.json.JsonArray()).stream().map((o) -> (~type~)o);
}

public ~className;format="capitalize"~ remove~name;format="capitalize"~(~type~ value) { 
	final io.vertx.core.json.JsonArray jsonArray = jsonObject.getJsonArray("~name~", new io.vertx.core.json.JsonArray());
	for (int i = 0; i < jsonArray.size(); i++)  { 
		final io.vertx.core.json.JsonObject o = jsonArray.getJsonObject(i);
		if (value.equals(o))  { 
			jsonArray.remove(i);
			return this;
		}
	}
	return this;
}

public ~className;format="capitalize"~ clear~name;format="capitalize"~() { 
	jsonObject.put("~name~", new io.vertx.core.json.JsonArray());
	return this;
} >>

externalAccessors(className,name,type) ::= <<public ~className;format="capitalize"~ set~name;format="capitalize"~(~type~ value) { 
	this._~name~ = value;
	return this;
}

public ~type~ get~name;format="capitalize"~() { 
	return this._~name~;
}

public ~type~ get~name;format="capitalize"~(~type~ defaultValue) { 
	return this._~name~ == null ? defaultValue : this._~name~;
} >>

enumAccessors(className,name,type) ::= <<public ~className;format="capitalize"~ set~name;format="capitalize"~(~type~ value) { 
	if (value == null) return this;
	jsonObject.put("~name~", value.name());
	return this;
}

public ~type~ get~name;format="capitalize"~() { 
	return get~name;format="capitalize"~(null);
}

public ~type~ get~name;format="capitalize"~(~type~ defaultValue) { 
	return jsonObject.getString("~name~") == null ? defaultValue : ~type~.valueOf(jsonObject.getString("~name~"));
} >>

listEnumAccessors(className,name,type) ::= <<public ~className;format="capitalize"~ add~name;format="capitalize"~(~type~ value) { 
	io.vertx.core.json.JsonArray jsonArray = jsonObject.getJsonArray("~name~");
	if (jsonArray == null) jsonObject.put("~name~", jsonArray = new io.vertx.core.json.JsonArray());
	jsonArray.add(value.name());
	return this;
}

public java.util.stream.Stream<~type~> get~name;format="capitalize"~() { 
	return jsonObject.getJsonArray("~name~", new io.vertx.core.json.JsonArray()).stream().map((o) -> ~type~.valueOf(o.toString()));
}

public ~className;format="capitalize"~ remove~name;format="capitalize"~(~type~ value) { 
	final io.vertx.core.json.JsonArray jsonArray = jsonObject.getJsonArray("~name~", new io.vertx.core.json.JsonArray());
	jsonArray.remove(value.name());
	return this;
}

public ~className;format="capitalize"~ clear~name;format="capitalize"~() { 
	jsonObject.put("~name~", new io.vertx.core.json.JsonArray());
	return this;
}  >>

JsonFactory(package,name,entities) ::= <<package ~package~;

public class ~name;format="capitalize"~ {

	public static void save(io.vertx.core.json.JsonObject jsonObject, java.io.File file) throws java.io.IOException {

		if (!file.getParentFile().exists() && !file.getParentFile().mkdirs())
			throw new IllegalStateException("could not create " + file.getParentFile().getAbsolutePath());

		if (!file.exists() && !file.createNewFile())
			throw new IllegalStateException("could not create " + file.getAbsolutePath());

		java.nio.file.Files.write(file.toPath(), jsonObject.toBuffer().getBytes());
	}
	
~entities:{it|
	public static ~it~ new~it~() { 
		return new ~it~();
	\}
	
	public static ~it~ new~it~NoUuid() { 
		return new ~it~().removeUuid();
	\}
	
	public static ~it~ new~it~(io.vertx.core.json.JsonObject jsonObject) { 
		return new ~it~(jsonObject);
	\}

	public static ~it~ new~it~(java.io.File file) throws java.io.IOException { 
		return new ~it~(new io.vertx.core.json.JsonObject(io.vertx.core.buffer.Buffer.buffer(java.nio.file.Files.readAllBytes(file.toPath()))));
	\}
};separator="\n"~
} >>

eom() ::= "}"

gt() ::= ">"
