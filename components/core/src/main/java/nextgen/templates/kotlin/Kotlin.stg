delimiters "~","~"

Expressions() ::= << >>

NullExpression() ::= <<null  >>

CastExpression(expression,type) ::= <<~expression~ as ~type~  >>

FunctionCallExpression(scope,functionName,arguments) ::= <<~if(scope)~~scope~.~endif~~functionName~(~arguments:{it|~it~};separator=", "~)  >>

ThisExpression(expression) ::= <<this.~expression~  >>

ConstructorCallExpression(className,params) ::= <<~className~(~params:{it|~it~};separator=", "~)  >>

ArrayEqualsExpression(leftArray,rightArray) ::= <<~leftArray~.contentEquals(~rightArray~)  >>

EqualsExpression(lhs,rhs) ::= <<~lhs~ == ~rhs~  >>

ScopeExpression(scope,expression) ::= <<~scope~.~expression~  >>

PairExpression(first,second) ::= <<~first~ to ~second~  >>

LiteralExpression(literal) ::= <<~literal~  >>

StringLiteralExpression(literal) ::= <<"~literal~"  >>

AssignExpression(varName,expression) ::= <<~varName~ = ~expression~  >>

ObjectExpression(extends,fields,members) ::= <<object~if(extends)~ : ~extends:{it|~it~};separator=", "~~endif~ {
	~fields:{it|~it~};separator="\n"~

	~members:{it|~it~};separator="\n"~
}  >>

ReferenceExpression(scope,name,property) ::= <<~if(scope)~~scope~.~endif~~name~::~property~  >>

PropertyAccessorExpression(object,property) ::= <<~object~.~property~  >>

Grammar() ::= << >>

Declarations() ::= << >>

AnnotationDeclaration(annotations) ::= <<~annotations:{it|@~it.name~(~it.params~)};separator="\n"~  >>

AnnotationParam(param) ::= <<~param:{it|~it.key~ = ~it.value~};separator=", "~  >>

PackageDeclaration(name) ::= <<package ~name~ >>

ClassDeclaration(annotations,isOpen,isAbstract,name,fields,extends,companionObject,overrideEquals,overrideHashCode,overrideToString,members,subclasses) ::= <<~annotations~~if(annotations)~
~endif~~if(isOpen)~open ~elseif(isAbstract)~abstract ~endif~class ~name~(
	~fields:{it|~it~};separator=",\n"~
)~if(extends)~: ~extends:{it|~it~};separator=", "~~endif~ {

	~companionObject~

	~overrideEquals~

	~overrideHashCode~

	~overrideToString~

	~members:{it|~it~};separator="\n"~

	~subclasses:{it|~it~};separator="\n"~
}  >>

OverrideEquals(className,fields) ::= <<override fun equals(other: Any?): Boolean {
	if (other !is ~className~) return false
	return if (other === this) true
	else
		~fields:{it|~it~};separator=" && "~
}  >>

OverrideHashCode(returnStatement) ::= <<override fun hashCode(): Int {
	~returnStatement~
}  >>

OverrideToString(className,fields) ::= <<override fun toString(): String {
	return "~className~(~fields:{it|~it.name~=~it.output~};separator=", "~)"
}  >>

CompanionObject(objectDeclaration) ::= <<companion ~objectDeclaration~  >>

PropertyDeclaration(annotations,isPrivate,isProtected,isMutable,name,type,initializer) ::= <<~annotations:{it|~it~};separator="\n"~
~if(isPrivate)~private ~elseif(isProtected)~protected ~endif~~if(isMutable)~var ~else~val ~endif~~name~~if(type)~: ~type~~endif~~if(initializer)~ = ~initializer~~endif~  >>

FunctionDeclaration(annotations,override,name,params,returnType,expressionBody,statements) ::= <<~annotations~~if(override)~override ~endif~fun ~name~(~params:{it|~it~};separator=", "~)~if(returnType)~: ~returnType~~endif~~if(expressionBody)~ =
	~expressionBody~~else~ {
	~statements:{it|~it~};separator="\n"~
}~endif~  >>

FunctionParam(name,typeDeclaration,defaultValue) ::= <<~name~: ~typeDeclaration~~if(defaultValue)~ = ~defaultValue~~endif~  >>

DataClassDeclaration(annotations,name,fields,members,subclasses) ::= <<~annotations~~if(annotations)~
~endif~data class ~name~(
	~fields:{it|~it~};separator=",\n"~
)~if(members)~ {

	~members:{it|~it~};separator="\n"~

	~subclasses:{it|~it~};separator="\n"~
}~endif~  >>

ExtendingClass(className,params) ::= <<~className~(~params:{it|~it~};separator=", "~)  >>

ImplementingInterface(interfaceName) ::= <<~interfaceName~  >>

InterfaceDeclaration(name,extends) ::= <<interface ~name~~if(extends)~: ~extends:{it|~it~};separator=", "~~endif~  >>

ParameterDeclaration(name,type,initializer) ::= <<~name~~if(type)~: ~type~~endif~~if(initializer)~ = ~initializer~~endif~  >>

ObjectDeclaration(name,extends,fields,members) ::= <<object~if(name)~ ~name~~endif~~if(extends)~ : ~extends:{it|~it~};separator=", "~~endif~ {
	~fields:{it|~it~};separator="\n"~

	~members:{it|~it~};separator="\n"~
}  >>

Statements() ::= << >>

ImportStatement(scope,name) ::= <<import ~scope~.~name~  >>

TodoStatement(reason) ::= <<TODO("~reason~")  >>

ReturnStatement(expression) ::= <<return ~expression~  >>

VarDeclarationStatement(isMutable,name,type,initializer) ::= <<~if(isMutable)~var ~else~val ~endif~~name~~if(type)~: ~type~~endif~~if(initializer)~ = ~initializer~~endif~  >>

KotlinStringTemplates() ::= << >>

KotlinStringTemplateExpression(expression) ::= <<${~expression~}  >>

KotlinStringTemplateSingleValue(name) ::= <<$~name~  >>

Initializers() ::= << >>

ArrayInitializer(expressions) ::= <<arrayOf(~expressions:{it|~it~};separator=", "~)  >>

EmptyArrayInitializer() ::= <<emptyArray()  >>

ListInitializer(expressions) ::= <<listOf(~expressions:{it|~it~};separator=", "~)  >>

MapInitializer(kvpairs) ::= <<mapOf(~kvpairs:{it|~it.key~ to ~it.value~};separator=", "~)  >>

EmptyMapInitializer() ::= <<emptyMap()  >>

MutableMapInitializer(kvpairs) ::= <<mutableMapOf(~kvpairs:{it|~it.key~ to ~it.value~};separator=", "~)  >>

SetInitializer(expressions) ::= <<setOf(~expressions:{it|~it~};separator=", "~)  >>

MutableSetInitializer(expressions) ::= <<mutableSetOf(~expressions:{it|~it~};separator=", "~)  >>

MutableListInitializer(expressions) ::= <<mutableListOf(~expressions:{it|~it~};separator=", "~)  >>

KotlinFile(packageDeclaration,imports,compilationUnit) ::= <<~packageDeclaration~

~imports:{it|~it~};separator="\n"~

~compilationUnit:{it|~it~};separator="\n\n"~  >>

KotlinTypes() ::= << >>

ArrayType(type) ::= <<Array<~type~>  >>

ListType(type) ::= <<List<~type~>  >>

MapType(first,second) ::= <<Map<~first~, ~second~>  >>

NamedType(name) ::= <<~name~  >>

NullableType(type) ::= <<~type~?  >>

StringType() ::= <<String  >>

IntType() ::= <<Int  >>

LongType() ::= <<Long  >>

BooleanType() ::= <<Boolean  >>

FloatType() ::= <<Float  >>

DoubleType() ::= <<Double  >>

UnitType() ::= <<Unit  >>

PairType(first,second) ::= <<Pair<~first~, ~second~>  >>

MutableMapType(first,second) ::= <<MutableMap<~first~, ~second~>  >>

MutableListType(type) ::= <<MutableList<~type~>  >>

SetType(type) ::= <<Set<~type~>  >>

MutableSetType(type) ::= <<MutableSet<~type~>  >>

AnyType() ::= <<Any  >>

eom() ::= "}"

gt() ::= ">"
