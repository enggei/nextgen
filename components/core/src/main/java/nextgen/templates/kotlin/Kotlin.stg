delimiters "~","~"

Entities() ::= << >>

Poko(packageDeclaration,classDeclaration) ::= <<~packageDeclaration~

~classDeclaration~ >>

Expressions() ::= << >>

NullExpression() ::= <<null  >>

VarExpression(varname) ::= <<~varname~  >>

CastExpression(expression,type) ::= <<~expression~ as ~type~  >>

FunctionCallExpression(scope,functionName,arguments) ::= <<~if(scope)~~scope~.~endif~~functionName~(~arguments:{it|~it~};separator=", "~)  >>

ThisExpression(expression) ::= <<this.~expression~  >>

ConstructorCallExpression(className,params) ::= <<~className~(~params:{it|~it~};separator=", "~)  >>

FunctionCallParamExpression(fieldName,expression) ::= <<~fieldName~ = ~expression~  >>

ArrayEqualsExpression(leftArray,rightArray) ::= <<~leftArray~.contentEquals(~rightArray~)  >>

EqualsExpression(lhs,rhs) ::= <<~lhs~ == ~rhs~  >>

ScopeExpression(scope,expression) ::= <<~scope~.~expression~  >>

Grammar() ::= << >>

Declarations() ::= << >>

AnnotationDeclaration(annotations) ::= <<~annotations:{it|@~it.name~(~it.params~)};separator="\n"~  >>

AnnotationParam(param) ::= <<~param:{it|~it.key~ = ~it.value~};separator=", "~ >>

PackageDeclaration(name) ::= <<package ~name~ >>

ClassDeclaration(annotations,isOpen,isAbstract,name,fields,extends,overrideEquals,overrideHashCode,overrideToString,members) ::= <<~annotations~~if(annotations)~
~endif~~if(isOpen)~open ~elseif(isAbstract)~abstract ~endif~class ~name~(
	~fields:{it|~it~};separator=",\n"~
)~if(extends)~: ~extends:{it|~it~};separator=", "~~endif~ {

	~overrideEquals~

	~overrideHashCode~

	~overrideToString~

	~members:{it|~it~};separator="\n"~
}  >>

OverrideEquals(className,fields) ::= <<override fun equals(other: Any?): Boolean {
	if (other !is ~className~) return false
	return if (other === this) true
	else
		~fields:{it|~it~};separator=" && "~
}  >>

OverrideHashCode() ::= <<override fun hashCode(): Int {
	TODO("not implemented")
}  >>

OverrideToString(className,fields) ::= <<override fun toString(): String {
	return "~className~(~fields:{it|~it~='$~it~'};separator=", "~)"
}  >>

FieldDeclaration(annotations,isMutable,isNonMember,name,type,initializer) ::= <<~annotations:{it|~it~};separator="\n"~
~if(isMutable)~var ~elseif(isNonMember)~~else~val ~endif~~name~: ~type~~if(initializer)~ = ~initializer~~endif~  >>

Extending(className,params) ::= <<~className~(~params:{it|~it.name~};separator=", "~) >>

FunctionDeclaration(annotations,override,name,params,returnType,expressionBody,statements) ::= <<~annotations~~if(override)~override ~endif~fun ~name~(~params:{it|~it~};separator=", "~): ~returnType~~if(expressionBody)~ =
	~expressionBody~~else~ {
	~statements~
}~endif~  >>

FunctionParam(name,typeDeclaration,defaultValue) ::= <<~name~: ~typeDeclaration~~if(defaultValue)~ = ~defaultValue~~endif~  >>

Statements() ::= << >>

ImportStatement(scope,name) ::= <<import ~scope~.~name~  >>

Initializers() ::= << >>

ArrayInitializer(statements) ::= <<arrayOf(~statements:{it|~it~};separator=", "~)  >>

EmptyArrayInitializer() ::= <<emptyArray()  >>

ListInitializer(statements) ::= <<listOf(~statements:{it|~it~};separator=", "~)  >>

MapInitializer(kvpairs) ::= <<mapOf(~kvpairs:{it|~it.key~ to ~it.value~};separator=", "~)  >>

NullInitializer() ::= <<null  >>

ExpressionInitializer(expression) ::= <<~expression~  >>

KotlinFile(packageDeclaration,imports,compilationUnit) ::= <<~packageDeclaration~

~imports:{it|~it~};separator="\n"~

~compilationUnit:{it|~it~};separator="\n\n"~  >>

KotlinTypes() ::= << >>

ArrayType(type) ::= <<Array<~type~>  >>

ListType(type) ::= <<List<~type~>  >>

MapType(type) ::= <<Map<~type~>  >>

NamedType(name) ::= <<~name~  >>

NullableType(type) ::= <<~type~?  >>

eom() ::= "}"

gt() ::= ">"
