delimiters "~","~"

Entities() ::= << >>

NodeWrapper(package,name,externalFields,accessors,lexical) ::= <<package ~package~;

public class ~name;format="capitalize"~ {

	private final org.neo4j.graphdb.Node node;
	~externalFields:{it|private ~it.type~ _~it.name~~if(it.initializer)~ = ~it.initializer~~endif~;};separator="\n"~

	public ~name;format="capitalize"~(org.neo4j.graphdb.Node node) { 
		this.node = node;
	}

	public org.neo4j.graphdb.Node getNode() { 
		return this.node;
	}

	@Override
	public boolean equals(java.lang.Object o) { 
		if (this == o) return true;
		if (o == null || getClass() != o.getClass()) return false;
		final ~name;format="capitalize"~ other = (~name;format="capitalize"~) o;
		return node.equals(other.node);
	}

	@Override
	public int hashCode() { 
		return java.util.Objects.hash(node);
	}

	~accessors:{it|~it~};separator="\n\n"~

	@Override
	public String toString() {
		return ""~if(lexical)~ + ~endif~~lexical:{it|node.getProperty("~it~")};separator=" + \" \" + "~;
	}
} >>

primitiveAccessors(className,name,type) ::= <<public ~className;format="capitalize"~ set~name;format="capitalize"~(~type~ value) { 
	if (value == null) node.removeProperty("~name~"); 
	else node.setProperty("~name~", value);
	return this;
}

public ~type~ get~name;format="capitalize"~() { 
	if (node.hasProperty("~name~")) return (~type~) node.getProperty("~name~");
	return null;
}

public ~type~ get~name;format="capitalize"~(~type~ defaultValue) { 
	if (node.hasProperty("~name~")) return (~type~) node.getProperty("~name~");
	return defaultValue;
}

public boolean has~name;format="capitalize"~() { 
	return node.hasProperty("~name~");
}

public ~className;format="capitalize"~ remove~name;format="capitalize"~() { 
	node.removeProperty("~name~");
	return this;
} >>

listReferenceAccessors(className,name,type) ::= <<public ~className;format="capitalize"~ add~name;format="capitalize"~(~type~ dst) { 
	final java.util.Optional<org.neo4j.graphdb.Relationship> existing = java.util.stream.StreamSupport.stream(node.getRelationships(org.neo4j.graphdb.Direction.OUTGOING, org.neo4j.graphdb.RelationshipType.withName("~name~")).spliterator(), false).filter((r) -> r.getOtherNode(node).equals(dst.getNode())).findAny();
	if (existing.isPresent()) return this;
	node.createRelationshipTo(dst.getNode(), org.neo4j.graphdb.RelationshipType.withName("~name~"));
	return this;
}

public java.util.stream.Stream<~type~> get~name;format="capitalize"~() { 
	return java.util.stream.StreamSupport.stream(node.getRelationships(org.neo4j.graphdb.Direction.OUTGOING, org.neo4j.graphdb.RelationshipType.withName("~name~")).spliterator(), false).map((relationship) -> new ~type~(relationship.getOtherNode(node)));
}

public ~className;format="capitalize"~ remove~name;format="capitalize"~(~type~ dst) { 
	final java.util.Optional<org.neo4j.graphdb.Relationship> existing = java.util.stream.StreamSupport.stream(node.getRelationships(org.neo4j.graphdb.Direction.OUTGOING, org.neo4j.graphdb.RelationshipType.withName("~name~")).spliterator(), false).filter((r) -> r.getOtherNode(node).equals(dst.getNode())).findAny();
	existing.ifPresent(org.neo4j.graphdb.Relationship::delete);
	return this;
} >>

listPrimitiveAccessors(className,name,type) ::= <<public ~className;format="capitalize"~ add~name;format="capitalize"~(~type~ dst) { 
	final java.util.Optional<org.neo4j.graphdb.Node> existing = java.util.stream.StreamSupport.stream(node.getRelationships(org.neo4j.graphdb.Direction.OUTGOING, org.neo4j.graphdb.RelationshipType.withName("aliases")).spliterator(), false).map((r) -> r.getOtherNode(node)).filter((n) -> dst.equals(n.getProperty("value"))).findAny();
	if (existing.isPresent()) return this;
	final org.neo4j.graphdb.Node newNode = node.getGraphDatabase().createNode(org.neo4j.graphdb.Label.label("~type~"));
	newNode.setProperty("value", dst);
	node.createRelationshipTo(newNode, org.neo4j.graphdb.RelationshipType.withName("~name~"));
	return this;
}

public java.util.stream.Stream<~type~> get~name;format="capitalize"~() { 
	return java.util.stream.StreamSupport.stream(node.getRelationships(org.neo4j.graphdb.Direction.OUTGOING, org.neo4j.graphdb.RelationshipType.withName("~name~")).spliterator(), false).map((relationship) -> (~type~) relationship.getOtherNode(node).getProperty("value"));
} >>

enumAccessors(className,name,type) ::= <<public ~className;format="capitalize"~ set~name;format="capitalize"~(~type~ value) { 
	if (value == null) node.removeProperty("~name~"); 
	else node.setProperty("~name~", value.name());
	return this;
}

public ~type~ get~name;format="capitalize"~() { 
	if (node.hasProperty("~name~")) return ~type~.valueOf((java.lang.String) node.getProperty("~name~"));
	return null;
}

public ~type~ get~name;format="capitalize"~(~type~ defaultValue) { 
	if (node.hasProperty("~name~")) return ~type~.valueOf((java.lang.String) node.getProperty("~name~"));
	return defaultValue;
}

public boolean has~name;format="capitalize"~() { 
	return node.hasProperty("~name~");
}

public ~className;format="capitalize"~ remove~name;format="capitalize"~() { 
	node.removeProperty("~name~");
	return this;
} >>

referenceAccessors(className,name,type) ::= <<public ~className;format="capitalize"~ set~name;format="capitalize"~(~type~ dst) { 
	final org.neo4j.graphdb.Relationship relationship = node.getSingleRelationship(org.neo4j.graphdb.RelationshipType.withName("~name~"), org.neo4j.graphdb.Direction.OUTGOING);
	if (relationship != null)  { 
		if (relationship.getOtherNode(node).equals(dst.getNode())) return this;
		relationship.delete();
	}
	node.createRelationshipTo(dst.getNode(), org.neo4j.graphdb.RelationshipType.withName("~name~"));
	return this;
}

public ~type~ get~name;format="capitalize"~() { 
	final org.neo4j.graphdb.Relationship relationship = node.getSingleRelationship(org.neo4j.graphdb.RelationshipType.withName("~name~"), org.neo4j.graphdb.Direction.OUTGOING);
	return relationship == null ? null : new ~type~(relationship.getOtherNode(node));
}

public ~className;format="capitalize"~ remove~name;format="capitalize"~(~type~ dst) { 
	final java.util.Optional<org.neo4j.graphdb.Relationship> existing = java.util.stream.StreamSupport.stream(node.getRelationships(org.neo4j.graphdb.Direction.OUTGOING, org.neo4j.graphdb.RelationshipType.withName("~name~")).spliterator(), false).filter((r) -> r.getOtherNode(node).equals(dst.getNode())).findAny();
	existing.ifPresent(org.neo4j.graphdb.Relationship::delete);
	return this;
} >>

externalAccessors(className,name,type) ::= <<public ~className;format="capitalize"~ set~name;format="capitalize"~(~type~ value) { 
	this._~name~ = value;
	return this;
}

public ~type~ get~name;format="capitalize"~() { 
	return this._~name~;
}

public ~type~ get~name;format="capitalize"~(~type~ defaultValue) { 
	return this._~name~ == null ? defaultValue : this._~name~;
} >>

incomingReferenceStream(type,name) ::= <<public java.util.stream.Stream<~type~> getIncoming~name;format="capitalize"~() { 
	return java.util.stream.StreamSupport.stream(node.getRelationships(org.neo4j.graphdb.Direction.INCOMING, org.neo4j.graphdb.RelationshipType.withName("~name~")).spliterator(), false).map((relationship) -> new ~type~(relationship.getOtherNode(node)));
} >>

Types() ::= << >>

GraphDatabaseFactory() ::= <<org.neo4j.graphdb.factory.GraphDatabaseFactory >>

GraphDatabaseSettings() ::= <<org.neo4j.graphdb.factory.GraphDatabaseSettings >>

GraphDatabaseService() ::= <<org.neo4j.graphdb.GraphDatabaseService >>

Node() ::= <<org.neo4j.graphdb.Node >>

Label() ::= <<org.neo4j.graphdb.Label >>

Direction() ::= <<org.neo4j.graphdb.Direction >>

Relationship() ::= <<org.neo4j.graphdb.Relationship >>

RelationshipType() ::= <<org.neo4j.graphdb.RelationshipType >>

Transaction() ::= <<org.neo4j.graphdb.Transaction >>

eom() ::= "}"

gt() ::= ">"
