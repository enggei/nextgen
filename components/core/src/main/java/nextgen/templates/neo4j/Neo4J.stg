delimiters "~","~"

Entities() ::= << >>

NodeWrapper(package,name,externalFields,accessors,lexical,methods) ::= <<package ~package~;

public class ~name;format="capitalize"~ {

	private final org.neo4j.graphdb.Node node;
	~externalFields:{it|private ~it.type~ _~it.name~~if(it.initializer)~ = ~it.initializer~~endif~;};separator="\n"~

	public ~name;format="capitalize"~(org.neo4j.graphdb.Node node) { 
		this.node = node;
	}

	public org.neo4j.graphdb.Node getNode() { 
		return this.node;
	}

	@Override
	public boolean equals(java.lang.Object o) { 
		if (this == o) return true;
		if (o == null || getClass() != o.getClass()) return false;
		final ~name;format="capitalize"~ other = (~name;format="capitalize"~) o;
		return node.equals(other.node);
	}

	@Override
	public int hashCode() { 
		return java.util.Objects.hash(node);
	}

	~accessors:{it|~it~};separator="\n\n"~

	@Override
	public String toString() {
		return ""~if(lexical)~ + ~endif~~lexical:{it|node.getProperty("~it~")};separator=" + \" \" + "~;
	}

	~methods:{it|~it~};separator="\n\n"~
}  >>

primitiveAccessors(className,name,type) ::= <<public ~className;format="capitalize"~ set~name;format="capitalize"~(~type~ value) { 
	if (value == null) node.removeProperty("~name~"); 
	else node.setProperty("~name~", value);
	return this;
}

public ~type~ get~name;format="capitalize"~() { 
	if (node.hasProperty("~name~")) return (~type~) node.getProperty("~name~");
	return null;
}

public ~type~ get~name;format="capitalize"~(~type~ defaultValue) { 
	if (node.hasProperty("~name~")) return (~type~) node.getProperty("~name~");
	return defaultValue;
}

public boolean has~name;format="capitalize"~() { 
	return node.hasProperty("~name~");
}

public ~className;format="capitalize"~ remove~name;format="capitalize"~() { 
	node.removeProperty("~name~");
	return this;
} >>

listReferenceAccessors(className,name,type) ::= <<public ~className;format="capitalize"~ add~name;format="capitalize"~(~type~ dst) { 
	final java.util.Optional<org.neo4j.graphdb.Relationship> existing = java.util.stream.StreamSupport.stream(node.getRelationships(org.neo4j.graphdb.Direction.OUTGOING, org.neo4j.graphdb.RelationshipType.withName("~name~")).spliterator(), false).filter((r) -> r.getOtherNode(node).equals(dst.getNode())).findAny();
	if (existing.isPresent()) return this;
	final org.neo4j.graphdb.Relationship relationship = node.createRelationshipTo(dst.getNode(), org.neo4j.graphdb.RelationshipType.withName("~name~"));
	relationship.setProperty("_t", System.nanoTime());
	return this;
}

public java.util.stream.Stream<~type~> get~name;format="capitalize"~() { 
	return java.util.stream.StreamSupport.stream(node.getRelationships(org.neo4j.graphdb.Direction.OUTGOING, org.neo4j.graphdb.RelationshipType.withName("~name~")).spliterator(), false).map((relationship) -> new ~type~(relationship.getOtherNode(node)));
}

public java.util.stream.Stream<~type~> get~name;format="capitalize"~Sorted() { 
	return java.util.stream.StreamSupport.stream(node.getRelationships(org.neo4j.graphdb.Direction.OUTGOING, org.neo4j.graphdb.RelationshipType.withName("~name~")).spliterator(), false).sorted(java.util.Comparator.comparing(o -> (Long) o.getProperty("_t", o.getId()))).map((relationship) -> new ~type~(relationship.getOtherNode(node)));
}

public ~className;format="capitalize"~ remove~name;format="capitalize"~(~type~ dst) { 
	final java.util.Optional<org.neo4j.graphdb.Relationship> existing = java.util.stream.StreamSupport.stream(node.getRelationships(org.neo4j.graphdb.Direction.OUTGOING, org.neo4j.graphdb.RelationshipType.withName("~name~")).spliterator(), false).filter((r) -> r.getOtherNode(node).equals(dst.getNode())).findAny();
	existing.ifPresent(org.neo4j.graphdb.Relationship::delete);
	return this;
}  >>

listPrimitiveAccessors(className,name,type) ::= <<public ~className;format="capitalize"~ add~name;format="capitalize"~(~type~ dst) { 
	final java.util.Optional<org.neo4j.graphdb.Node> existing = java.util.stream.StreamSupport.stream(node.getRelationships(org.neo4j.graphdb.Direction.OUTGOING, org.neo4j.graphdb.RelationshipType.withName("~name~")).spliterator(), false).map((r) -> r.getOtherNode(node)).filter((n) -> dst.equals(n.getProperty("value"))).findAny();
	if (existing.isPresent()) return this;
	final org.neo4j.graphdb.Node newNode = node.getGraphDatabase().createNode(org.neo4j.graphdb.Label.label("~type~"));
	newNode.setProperty("value", dst);
	final org.neo4j.graphdb.Relationship relationship = node.createRelationshipTo(newNode, org.neo4j.graphdb.RelationshipType.withName("~name~"));
	relationship.setProperty("_t", System.nanoTime());
	return this;
}

public java.util.stream.Stream<~type~> get~name;format="capitalize"~() { 
	return java.util.stream.StreamSupport.stream(node.getRelationships(org.neo4j.graphdb.Direction.OUTGOING, org.neo4j.graphdb.RelationshipType.withName("~name~")).spliterator(), false).map((relationship) -> (~type~) relationship.getOtherNode(node).getProperty("value"));
}

public java.util.stream.Stream<~type~> get~name;format="capitalize"~Sorted() { 
	return java.util.stream.StreamSupport.stream(node.getRelationships(org.neo4j.graphdb.Direction.OUTGOING, org.neo4j.graphdb.RelationshipType.withName("~name~")).spliterator(), false).sorted(java.util.Comparator.comparing(o -> (Long) o.getProperty("_t", o.getId()))).map((relationship) -> (~type~) relationship.getOtherNode(node).getProperty("value"));
}  >>

enumAccessors(className,name,type) ::= <<public ~className;format="capitalize"~ set~name;format="capitalize"~(~type~ value) { 
	if (value == null) node.removeProperty("~name~"); 
	else node.setProperty("~name~", value.name());
	return this;
}

public ~type~ get~name;format="capitalize"~() { 
	if (node.hasProperty("~name~")) return ~type~.valueOf((java.lang.String) node.getProperty("~name~"));
	return null;
}

public ~type~ get~name;format="capitalize"~(~type~ defaultValue) { 
	if (node.hasProperty("~name~")) return ~type~.valueOf((java.lang.String) node.getProperty("~name~"));
	return defaultValue;
}

public boolean has~name;format="capitalize"~() { 
	return node.hasProperty("~name~");
}

public ~className;format="capitalize"~ remove~name;format="capitalize"~() { 
	node.removeProperty("~name~");
	return this;
} >>

referenceAccessors(className,name,type) ::= <<public ~className;format="capitalize"~ set~name;format="capitalize"~(~type~ dst) { 
	final org.neo4j.graphdb.Relationship relationship = get~name;format="capitalize"~Relation();
	if (relationship != null)  { 
		if (relationship.getOtherNode(node).equals(dst.getNode())) return this;
		relationship.delete();
	}
	if (dst == null) return this;
	node.createRelationshipTo(dst.getNode(), org.neo4j.graphdb.RelationshipType.withName("~name~"));
	return this;
}

public ~type~ get~name;format="capitalize"~() { 
	final org.neo4j.graphdb.Relationship relationship = get~name;format="capitalize"~Relation();
	return relationship == null ? null : new ~type~(relationship.getOtherNode(node));
}

public ~className;format="capitalize"~ remove~name;format="capitalize"~() { 
	final java.util.Optional<org.neo4j.graphdb.Relationship> existing = java.util.Optional.ofNullable(get~name;format="capitalize"~Relation());
	existing.ifPresent(org.neo4j.graphdb.Relationship::delete);
	return this;
}

public org.neo4j.graphdb.Relationship get~name;format="capitalize"~Relation() { 
	return node.getSingleRelationship(org.neo4j.graphdb.RelationshipType.withName("~name~"), org.neo4j.graphdb.Direction.OUTGOING);
}  >>

externalAccessors(className,name,type) ::= <<public ~className;format="capitalize"~ set~name;format="capitalize"~(~type~ value) { 
	this._~name~ = value;
	return this;
}

public ~type~ get~name;format="capitalize"~() { 
	return this._~name~;
}

public ~type~ get~name;format="capitalize"~(~type~ defaultValue) { 
	return this._~name~ == null ? defaultValue : this._~name~;
} >>

incomingReferenceStream(type,name) ::= <<public java.util.stream.Stream<~type~> getIncoming~name;format="capitalize"~() { 
	return java.util.stream.StreamSupport.stream(node.getRelationships(org.neo4j.graphdb.Direction.INCOMING, org.neo4j.graphdb.RelationshipType.withName("~name~")).spliterator(), false).map((relationship) -> new ~type~(relationship.getOtherNode(node)));
} >>

enumListAccessors(className,name,type) ::= <<public ~className;format="capitalize"~ add~name;format="capitalize"~(~type~ dst) { 
	final java.util.Optional<org.neo4j.graphdb.Node> existing = java.util.stream.StreamSupport.stream(node.getRelationships(org.neo4j.graphdb.Direction.OUTGOING, org.neo4j.graphdb.RelationshipType.withName("~name~")).spliterator(), false).map((r) -> r.getOtherNode(node)).filter((n) -> dst.equals(n.getProperty("value"))).findAny();
	if (existing.isPresent()) return this;
	final org.neo4j.graphdb.Node newNode = node.getGraphDatabase().createNode(org.neo4j.graphdb.Label.label("~type~"));
	newNode.setProperty("value", dst.name());
	node.createRelationshipTo(newNode, org.neo4j.graphdb.RelationshipType.withName("~name~"));
	return this;
}

public java.util.stream.Stream<~type~> get~name;format="capitalize"~() { 
	return java.util.stream.StreamSupport.stream(node.getRelationships(org.neo4j.graphdb.Direction.OUTGOING, org.neo4j.graphdb.RelationshipType.withName("~name~")).spliterator(), false).map((relationship) -> ~type~.valueOf(relationship.getOtherNode(node).getProperty("value").toString()));
}  >>

nodeToJsonObject(properties,refs,refList,primitiveList) ::= <<public io.vertx.core.json.JsonObject toJsonObject() {
	io.vertx.core.json.JsonObject jsonObject = new io.vertx.core.json.JsonObject();
	if (node.hasProperty("uuid")) jsonObject.put("uuid", node.getProperty("uuid"));
	~properties:{it|if (node.hasProperty("~it.name~")) jsonObject.put("~it.name~", node.getProperty("~it.name~"));};separator="\n"~
~refs:{it|
	final ~it.type~ _~it.name~ = get~it.name;format="capitalize"~();
	if (_~it.name~ != null) jsonObject.put("~it.name~", _~it.name~.toJsonObject());
};separator="\n"~
~refList:{it|
	final io.vertx.core.json.JsonArray _~it.name~ = new io.vertx.core.json.JsonArray();
	get~it.name;format="capitalize"~().forEach(element -> _~it.name~.add(element.toJsonObject()));
	if (!_~it.name~.isEmpty()) jsonObject.put("~it.name~", _~it.name~);
};separator="\n"~
~primitiveList:{it|
	final io.vertx.core.json.JsonArray _~it.name~ = new io.vertx.core.json.JsonArray();
	get~it.name;format="capitalize"~().forEach(_~it.name~::add);
	if (!_~it.name~.isEmpty()) jsonObject.put("~it.name~", _~it.name~);
};separator="\n"~
	return jsonObject;
}  >>

deleteNode(refs,refList) ::= <<public void deleteTree() {
~refs:{it|
	final ~it.type~ _~it.name~ = get~it.name;format="capitalize"~();
	if (_~it.name~ != null) _~it.name~.deleteTree();
};separator="\n"~
~refList:{it|
	get~it.name;format="capitalize"~().forEach(element -> element.deleteTree());
};separator="\n"~
	node.getRelationships(org.neo4j.graphdb.Direction.INCOMING).forEach(org.neo4j.graphdb.Relationship::delete);
	node.delete();
}  >>

NeoFactory(package,name,accessors) ::= <<package ~package~;

public class ~name;format="capitalize"~ {

	private final org.neo4j.graphdb.GraphDatabaseService db;

	public ~name;format="capitalize"~(java.lang.String dir) { 
		this(new org.neo4j.graphdb.factory.GraphDatabaseFactory().newEmbeddedDatabaseBuilder(new java.io.File(dir)).setConfig(org.neo4j.graphdb.factory.GraphDatabaseSettings.allow_upgrade, "true").newGraphDatabase());
		Runtime.getRuntime().addShutdownHook(new java.lang.Thread(db::shutdown));
	}

	public ~name;format="capitalize"~(org.neo4j.graphdb.GraphDatabaseService db) { 
		this.db = db;
	}

	public org.neo4j.graphdb.GraphDatabaseService getDatabaseService() { 
		return this.db;
	}

	public void doInTransaction(java.util.function.Consumer<org.neo4j.graphdb.Transaction> action) { 
		doInTransaction(action, java.lang.Throwable::printStackTrace);
	}

	public void doInTransaction(java.util.function.Consumer<org.neo4j.graphdb.Transaction> action, java.util.function.Consumer<java.lang.Throwable> onException) { 
		try (org.neo4j.graphdb.Transaction tx = db.beginTx())  { 
			action.accept(tx);
			tx.success();
		} catch (java.lang.Throwable t)  { 
			onException.accept(t);
		}
	}

	public <T> T getInTransaction(java.util.function.Function<org.neo4j.graphdb.Transaction, T> action) {
		return getInTransaction(action, throwable -> {
			throwable.printStackTrace();
			return null;
		});
	}

	public <T> T getInTransaction(java.util.function.Function<org.neo4j.graphdb.Transaction, T> action, java.util.function.Function<java.lang.Throwable, T> onException) {
		T returnValue;
		try (org.neo4j.graphdb.Transaction tx = db.beginTx()) {
			returnValue = action.apply(tx);
			tx.success();
		} catch (java.lang.Throwable t) {
			return onException.apply(t);
		}
		return returnValue;
	}

	~accessors:{it|~it~};separator="\n\n"~
}  >>

NeoFactoryAccessors(name,properties) ::= <<public ~name;format="capitalize"~ new~name;format="capitalize"~() { 
	return new~name;format="capitalize"~(db.createNode(org.neo4j.graphdb.Label.label("~name~")));
}

public ~name;format="capitalize"~ new~name;format="capitalize"~(org.neo4j.graphdb.Node node) { 
	return new ~name;format="capitalize"~(node);
}

public java.util.stream.Stream<~name;format="capitalize"~> findAll~name;format="capitalize"~() { 
	return db.findNodes(org.neo4j.graphdb.Label.label("~name~")).stream().map(this::new~name;format="capitalize"~);
}

~properties:{it|~it~};separator="\n\n"~ >>

NeoFactoryPropertyAccessors(entity,propertyName,propertyType,isEnum) ::= <<public ~entity;format="capitalize"~ find~entity;format="capitalize"~By~propertyName;format="capitalize"~(~propertyType~ value) {
	final org.neo4j.graphdb.Node node = db.findNode(org.neo4j.graphdb.Label.label("~entity~"), "~propertyName~", value~if(isEnum)~.name()~endif~);
	return node == null ? null : new ~entity;format="capitalize"~(node);
}

public ~entity;format="capitalize"~ findOrCreate~entity;format="capitalize"~By~propertyName;format="capitalize"~(~propertyType~ value) {
	final ~entity;format="capitalize"~ existing = find~entity;format="capitalize"~By~propertyName;format="capitalize"~(value);
	return existing == null ? new~entity;format="capitalize"~().set~propertyName;format="capitalize"~(value) : existing;
}

public java.util.stream.Stream<~entity;format="capitalize"~> findAll~entity;format="capitalize"~By~propertyName;format="capitalize"~(~propertyType~ value) {
	return db.findNodes(org.neo4j.graphdb.Label.label("~entity~"), "~propertyName~", value~if(isEnum)~.name()~endif~).stream().map(this::new~entity;format="capitalize"~);
}  >>

eom() ::= "}"

gt() ::= ">"
